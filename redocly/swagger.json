{
  "info": {
    "title": "ECP-API",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "account"
    },
    {
      "name": "alarm"
    },
    {
      "name": "assets"
    },
    {
      "name": "audit"
    },
    {
      "name": "emqxcluster"
    },
    {
      "name": "configuration"
    },
    {
      "name": "es"
    },
    {
      "name": "identityprovider"
    },
    {
      "name": "edgedeploy"
    },
    {
      "name": "license"
    },
    {
      "name": "monitor"
    },
    {
      "name": "org"
    },
    {
      "name": "project"
    },
    {
      "name": "backup"
    },
    {
      "name": "deploy"
    },
    {
      "name": "dockerdeploy"
    },
    {
      "name": "edgeagent"
    },
    {
      "name": "edgeservice"
    },
    {
      "name": "edgetemplate"
    },
    {
      "name": "tag"
    },
    {
      "name": "sso"
    },
    {
      "name": "task"
    },
    {
      "name": "user"
    },
    {
      "name": "iaas"
    },
    {
      "name": "version"
    },
    {
      "name": "trace"
    }
  ],
  "paths": {
    "/api/account/activate": {
      "get": {
        "summary": "验证邮箱邀请",
        "deprecated": false,
        "description": "",
        "operationId": "ActivateAccount",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "302": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/avatar": {
      "post": {
        "summary": "上传头像",
        "deprecated": false,
        "description": "",
        "operationId": "UploadAvatar",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "File",
            "x-go-named": "*mime/multipart.FileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UploadAvatarResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/init": {
      "post": {
        "summary": "设置初始账号名称及初始密码",
        "deprecated": false,
        "description": "",
        "operationId": "SetupInitSuperAdmin",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SetupInitSuperAdminRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/login": {
      "post": {
        "summary": "登录",
        "deprecated": false,
        "description": "",
        "operationId": "Login",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/logout": {
      "get": {
        "summary": "退出登录",
        "deprecated": false,
        "description": "",
        "operationId": "Logout",
        "tags": [
          "account"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/password": {
      "post": {
        "summary": "设置密码",
        "deprecated": false,
        "description": "",
        "operationId": "UpdatePassword",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/password/reset": {
      "post": {
        "summary": "重置密码",
        "deprecated": false,
        "description": "",
        "operationId": "ResetPassword",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/password/send-reset-email": {
      "post": {
        "summary": "发送密码重置邮件",
        "deprecated": false,
        "description": "",
        "operationId": "SendResetPasswordEmail",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SendResetPasswordEmailRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/password/verify-reset-email": {
      "get": {
        "summary": "验证重置邮件",
        "deprecated": false,
        "description": "",
        "operationId": "VerifyResetPasswordEmail",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "302": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/profile": {
      "get": {
        "summary": "个人信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetProfile",
        "tags": [
          "account"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetProfileResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "修改个人信息",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateProfile",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProfileRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateProfileResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/roles": {
      "get": {
        "summary": "查询用户角色",
        "deprecated": false,
        "description": "",
        "operationId": "GetUserRoles",
        "tags": [
          "account"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetUserRolesResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/setup": {
      "post": {
        "summary": "设置账号名称及初始密码",
        "deprecated": false,
        "description": "",
        "operationId": "SetupAccount",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SetupAccountRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/account/token/refresh": {
      "post": {
        "summary": "刷新token",
        "deprecated": false,
        "description": "",
        "operationId": "RefreshToken",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RefreshTokenRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/RefreshTokenResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/alarm/webhook/alertmanager/v1": {
      "post": {
        "summary": "提供给AlertManager调用的Webhook",
        "deprecated": false,
        "description": "",
        "operationId": "AlertManagerWebhook",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/H"
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration": {
      "get": {
        "summary": "查询项目告警配置",
        "deprecated": false,
        "description": "",
        "operationId": "GetAlarmConfiguration",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AlarmConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification": {
      "post": {
        "summary": "修改项目告警通知配置",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateAlarmConfigurationNotification",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAlarmConfigurationNotificationRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AlarmConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/email": {
      "post": {
        "summary": "修改项目告警通知中邮件的设置",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateAlarmConfigurationNotificationEmail",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAlarmConfigurationNotificationEmailRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AlarmConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/webhook": {
      "post": {
        "summary": "修改项目告警通知中Webhook的配置",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateAlarmConfigurationNotificationWebhook",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAlarmConfigurationNotificationWebhookRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AlarmConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/webhook/preview": {
      "post": {
        "summary": "预览项目告警Webhook模板",
        "deprecated": false,
        "description": "",
        "operationId": "PreviewAlarmConfigurationNotificationWebhook",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/PreviewAlarmConfigurationNotificationWebhookResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/webhook/testing": {
      "post": {
        "summary": "测试项目告警Webhook URL是否有效",
        "deprecated": false,
        "description": "",
        "operationId": "TestAlarmConfigurationNotificationWebhookURL",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TestAlarmConfigurationNotificationWebhookURLRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/current": {
      "get": {
        "summary": "查询项目当前告警",
        "deprecated": false,
        "description": "",
        "operationId": "GetCurrentAlarmsByPage",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "fuzzyName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int8",
            "type": "integer"
          },
          {
            "name": "startsAt",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "endsAt",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetAlarmsByPageResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/current/count": {
      "get": {
        "summary": "查询项目当前告警数量",
        "deprecated": false,
        "description": "",
        "operationId": "GetCurrentAlarmsCount",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetCurrentAlarmsCountResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/enabled": {
      "post": {
        "summary": "启用/禁用项目告警",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateAlarmEnabled",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAlarmEnabledRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/history": {
      "get": {
        "summary": "查询项目历史告警",
        "deprecated": false,
        "description": "",
        "operationId": "GetHistoryAlarmsByPage",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "fuzzyName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int8",
            "type": "integer"
          },
          {
            "name": "startsAt",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "endsAt",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetAlarmsByPageResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/alarms/status": {
      "get": {
        "summary": "查询项目告警状态：启用/禁用",
        "deprecated": false,
        "description": "",
        "operationId": "GetAlarmStatus",
        "tags": [
          "alarm"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetAlarmStatusResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/assets/file": {
      "post": {
        "summary": "Upload",
        "deprecated": false,
        "description": "",
        "operationId": "Upload",
        "tags": [
          "assets"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "x-go-name": "Name"
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "File",
            "x-go-named": "*mime/multipart.FileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/assets/file/*file": {
      "get": {
        "summary": "File",
        "deprecated": false,
        "description": "",
        "operationId": "File",
        "tags": [
          "assets"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Delete",
        "deprecated": false,
        "description": "",
        "operationId": "Delete",
        "tags": [
          "assets"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/assets/manifest.json": {
      "get": {
        "summary": "ManifestJSON",
        "deprecated": false,
        "description": "",
        "operationId": "ManifestJSON",
        "tags": [
          "assets"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ManifestResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/audit/operations": {
      "get": {
        "summary": "查询操作审计日志",
        "deprecated": false,
        "description": "",
        "operationId": "GetOperationList",
        "tags": [
          "audit"
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int64",
            "default": "",
            "type": "integer"
          },
          {
            "name": "operation",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int64",
            "default": "",
            "type": "integer"
          },
          {
            "name": "operatorId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "operatorName",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "clusterId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "edgeServiceId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "until",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetOperationListResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/audit/{orgId}/{projectId}/batch/{batchId}": {
      "get": {
        "summary": "BatchResult 查询某批量任务执行状态",
        "deprecated": false,
        "description": "",
        "operationId": "BatchResult",
        "tags": [
          "audit"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "maxLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchInfoResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/clusters/agents/emqxee/metadata": {
      "get": {
        "summary": "用于EMQX集群Agent同步配置信息",
        "deprecated": false,
        "description": "",
        "operationId": "QueryClusterAgentMetadata",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/QueryClusterMetadataResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/clusters/agents/emqxee/register": {
      "post": {
        "summary": "注册EMQX集群Agent",
        "deprecated": false,
        "description": "",
        "operationId": "RegisterClusterAgent",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegisterClusterAgentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/RegisterClusterAgentResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/clusters/agents/emqxee/report": {
      "post": {
        "summary": "上报EMQX集群Agent信息",
        "deprecated": false,
        "description": "",
        "operationId": "ReportClusterAgentInfo",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportClusterAgentInfoData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/clusters/agents/emqxee/unregister": {
      "post": {
        "summary": "移除EMQX集群Agent",
        "deprecated": false,
        "description": "",
        "operationId": "UnregisterClusterAgent",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/clusters/add-existing-cluster": {
      "post": {
        "summary": "添加现有集群",
        "deprecated": false,
        "description": "",
        "operationId": "AddExistingCluster",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "minLength": 1,
            "maxLength": 200,
            "type": "string",
            "x-go-name": "Name",
            "x-go-validate": "@string[1,200]"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AddExistingClusterResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/agents": {
      "get": {
        "summary": "查询EMQX集群Agents",
        "deprecated": false,
        "description": "",
        "operationId": "GetClusterAgents",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetClusterAgentsResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/agents/{agentId}": {
      "delete": {
        "summary": "删除EMQX集群Agent",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteClusterAgent",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "minimum": 1,
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/setupInstructions": {
      "get": {
        "summary": "获取EMQX集群Agent安装向导信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetClusterAgentSetupInstructions",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "platform",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetClusterAgentSetupInstructionsResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/transfer": {
      "post": {
        "summary": "转移集群",
        "deprecated": false,
        "description": "",
        "operationId": "TransferCluster",
        "tags": [
          "emqxcluster"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TransferClusterRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/alarm": {
      "get": {
        "summary": "查询告警配置",
        "deprecated": false,
        "description": "",
        "operationId": "GetGlobalAlarmConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GlobalAlarmConfigResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新告警配置",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateGlobalAlarmConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateGlobalAlarmConfigRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GlobalAlarmConfigResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/common/{name}": {
      "get": {
        "summary": "查询全局配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetGlobalConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建全局配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateGlobalConfigBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除全局配置",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteGlobalConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/common/{name}/org/{orgId}": {
      "get": {
        "summary": "查询组织配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryOrgConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetOrgConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建组织配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateOrgConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateGlobalConfigBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除组织配置",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteOrgConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/common/{name}/org/{orgId}/project/{projectId}": {
      "get": {
        "summary": "查询项目配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryProjectConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetProjectConfigurationResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建项目配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateProjectConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateGlobalConfigBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除项目配置",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteProjectConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/docker-info": {
      "get": {
        "summary": "查询Docker 节点配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigDockerInfo",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DockerInfoResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新Docker 节点配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigDockerInfo",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "port",
            "in": "formData",
            "required": true,
            "format": "int64",
            "minimum": 1,
            "maximum": 65535,
            "type": "integer",
            "x-go-name": "Port",
            "x-go-validate": "@int[1,65535]"
          },
          {
            "name": "tls",
            "in": "formData",
            "default": "false",
            "type": "boolean",
            "x-go-name": "Tls"
          },
          {
            "name": "cacertFile",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "CacertFile",
            "x-go-validate": "@string[0,]",
            "description": "cacertPath, certPath, keyPath"
          },
          {
            "name": "certFile",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "CertFile",
            "x-go-validate": "@string[0,]"
          },
          {
            "name": "keyFile",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "KeyFile",
            "x-go-validate": "@string[0,]"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/edgeservice-default": {
      "get": {
        "summary": "QueryGlobalConfigEdgeserviceDefaultConfig 查询边缘服务 Docker 部署的默认配置信息",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEdgeserviceDefaultConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EdgeserviceDefaultConfigResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "CreateGlobalConfigEdgeserviceDefaultConfig 更新边缘服务 Docker 部署的默认配置信息",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEdgeserviceDefaultConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EdgeserviceDefaultConfigData"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/edgeservice-license": {
      "get": {
        "summary": "GetEdgeServiceLicConfig",
        "deprecated": false,
        "description": "",
        "operationId": "GetEdgeServiceLicConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EdgeServiceLicenseConfigData"
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "UpdateEdgeServiceLicConfig",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateEdgeServiceLicConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EdgeServiceLicenseConfigData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/edgeservice-quota": {
      "get": {
        "summary": "查询边缘服务配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEdgeserviceQuota",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EdgeserviceQuotaResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新边缘服务配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEdgeserviceQuota",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EdgeserviceQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/emqx-quota-list": {
      "get": {
        "summary": "查询EMQX集群配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEmqxQuotaList",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxQuotaResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新EMQX配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEmqxQuotaList",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmqxQuotaReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/emqx-total-quota": {
      "get": {
        "summary": "查询EMQX总配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEmqxTotalQuota",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxTotalQuota"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新EMQX总配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEmqxTotalQuota",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmqxTotalQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/es-target": {
      "get": {
        "summary": "查询ES配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEsTarget",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EsTargetData"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新ES配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEsTarget",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EsTargetData"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/image-pull-secret": {
      "get": {
        "summary": "查询镜像服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigImagePullSecret",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DockerRegistryConfigItemDTO"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新镜像服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigImagePullSecret",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DockerRegistryConfigItemDTOArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/image-pull-secret/test": {
      "post": {
        "summary": "CheckImageRegistry 测试容器镜像库连通性",
        "deprecated": false,
        "description": "",
        "operationId": "CheckImageRegistry",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DockerRegistryConfigItemDTOArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/image-version-list": {
      "get": {
        "summary": "查询EMQX镜像",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEmqxImageVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageVersion"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新EMQX镜像",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEmqxImageVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageVersion"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/kuiper-quota": {
      "post": {
        "summary": "更新eKuiper配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigKuiperQuota",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/KuiperQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/kuiper-version-list": {
      "get": {
        "summary": "查询eKuiper镜像配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigKuiperVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KuiperVersion"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新eKuiper镜像配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigKuiperVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KuiperVersion"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/language": {
      "put": {
        "summary": "更新系统语言",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateSystemLanguage",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateSystemLanguageRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/languages": {
      "get": {
        "summary": "查询支持的语言列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetSupportedLanguages",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetSupportedLanguagesResponse"
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/lb-annotations": {
      "get": {
        "summary": "查询负载均衡注解配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEmqxLbAnnotation",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LbAnnotation"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新负载均衡注解配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEmqxLbAnnotation",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LbAnnotation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/metric-gateway": {
      "get": {
        "summary": "QueryGlobalConfigMetricGateway 查询指标网关",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigMetricGateway",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricGatewayData"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "CreateGlobalConfigMetricGateway 配置指标网关",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigMetricGateway",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricGatewayData"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/monitor-scraper": {
      "get": {
        "summary": "查询监控配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigMonitorScraper",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/MonitorScraperConfig"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新监控配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigMonitorScraper",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MonitorScraperConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/neuron-quota": {
      "post": {
        "summary": "更新Neuron配额配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigNeuronQuota",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NeuronQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/neuron-version-list": {
      "get": {
        "summary": "查询Neuron版本配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigNeuronVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NeuronVersion"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新Neuron版本配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigNeuronVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NeuronVersion"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/neuronex-version-list": {
      "get": {
        "summary": "查询NeuronEX版本配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigNeuronEXVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NeuronEXVersion"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新NeuronEX版本配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigNeuronEXVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NeuronEXVersion"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/reloader-version": {
      "get": {
        "summary": "查询 emqx 的 reloader 镜像",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigReloaderVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ReloaderVersion"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新 emqx 的 reloader 镜像",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigReloaderVersion",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReloaderVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/server-access-name": {
      "get": {
        "summary": "查询访问域名配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigBCServer",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BCServerData"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新访问域名配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigBCServer",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BCServerData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/server-access-name/testing": {
      "post": {
        "summary": "测试访问域名",
        "deprecated": false,
        "description": "",
        "operationId": "TestGlobalConfigBCServer",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BCServerData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/smtp": {
      "get": {
        "summary": "查询邮件配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigSMTP",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SMTPConfigData"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新邮件配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigSMTP",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SMTPConfigData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/smtp/testing": {
      "post": {
        "summary": "测试邮件配置",
        "deprecated": false,
        "description": "",
        "operationId": "TestGlobalConfigSMTP",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SMTPConfigData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/storage-class": {
      "get": {
        "summary": "查询EMQX集群存储类名",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigEmqxStorageClass",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageClass"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新EMQX集群存储类名",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigEmqxStorageClass",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageClass"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/syslog-info": {
      "get": {
        "summary": "QueryGlobalConfigSyslogInfo query syslog server configration",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigSyslogInfo",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SyslogInfo"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "CreateGlobalConfigSyslogInfo update syslog server configration",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigSyslogInfo",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SyslogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/syslog-info/test": {
      "post": {
        "summary": "CheckSyslogServer check the syslog server is right",
        "deprecated": false,
        "description": "",
        "operationId": "CheckSyslogServer",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SyslogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/telegraf-image": {
      "get": {
        "summary": "查询Telegraf镜像配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigTelegrafImage",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/TelegrafImage"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新Telegraf镜像配置",
        "deprecated": false,
        "description": "",
        "operationId": "CreateGlobalConfigTelegrafImage",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TelegrafImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/ui-customization": {
      "post": {
        "summary": "更新自定义页面配置",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateUICustomzationConfig",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "x-go-name": "Name"
          },
          {
            "name": "logo",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "Logo",
            "x-go-named": "*mime/multipart.FileHeader"
          },
          {
            "name": "loginBg",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "LoginBackgroundImage",
            "x-go-named": "*mime/multipart.FileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateUICustomizationConfigResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/configuration/user-management": {
      "get": {
        "summary": "查询用户管理配置",
        "deprecated": false,
        "description": "",
        "operationId": "QueryGlobalConfigUserManagement",
        "tags": [
          "configuration"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/QueryGlobalConfigUserManagementResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新用户管理配置",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateGlobalConfigUserManagement",
        "tags": [
          "configuration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateGlobalConfigUserManagementRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/elastic/docs/all": {
      "get": {
        "summary": "GetAggregatedList 获取聚合日志列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetAggregatedList",
        "tags": [
          "es"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "level",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "msg",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "100",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "字段名",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "asc/desc",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/elastic/docs/antares": {
      "get": {
        "summary": "GetAntaresLogList 获取ECP日志列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetAntaresLogList",
        "tags": [
          "es"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "level",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "msg",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "100",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "字段名",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "asc/desc",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetAntaresLogListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/elastic/docs/name-id-map": {
      "get": {
        "summary": "GetNameIdMap 查询当前用户有权限的组织、项目下的服务列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetNameIdMap",
        "tags": [
          "es"
        ],
        "parameters": [
          {
            "name": "serviceType",
            "in": "query",
            "description": "",
            "required": true,
            "format": "uint8",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetNameIdMapResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/elastic/document/{orgId}/{projectId}/edge": {
      "get": {
        "summary": "GetEdgeLogList 获取边缘服务日志列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetEdgeLogList",
        "tags": [
          "es"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "服务类别(1:kuiper；2:neuron; 3:edge; 4:other; 99:customize)",
            "required": false,
            "format": "int8",
            "default": "2",
            "type": "integer"
          },
          {
            "name": "start",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "level",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "node",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "msg",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "100",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "字段名",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "asc/desc",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetEdgeLogListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/elastic/document/{orgId}/{projectId}/emqx": {
      "get": {
        "summary": "GetLogList 获取EMQX日志列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetLogList",
        "tags": [
          "es"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "timestamp，秒",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "level",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "msg",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "100",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "字段名",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "asc/desc",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetLogListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/elastic/testing": {
      "post": {
        "summary": "TestESConnectivity 测试ES连通性",
        "deprecated": false,
        "description": "",
        "operationId": "TestESConnectivity",
        "tags": [
          "es"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TestConnectivityData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/identityproviders": {
      "get": {
        "summary": "获取认证服务列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetIdentityProviders",
        "tags": [
          "identityprovider"
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "uint32",
            "minimum": 1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "uint32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetIdentityProvidersResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建认证服务",
        "deprecated": false,
        "description": "",
        "operationId": "CreateIdentityProvider",
        "tags": [
          "identityprovider"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateIdentityProviderRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateIdentityProviderResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/identityproviders/{id}": {
      "get": {
        "summary": "获取认证服务信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetIdentityProvider",
        "tags": [
          "identityprovider"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/IdentityProviderDetail"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "更新认证服务",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateIdentityProvider",
        "tags": [
          "identityprovider"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateIdentityProviderRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateIdentityProviderResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除认证服务",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteIdentityProvider",
        "tags": [
          "identityprovider"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/jwt/pubkey/download": {
      "get": {
        "summary": "DownloadJwtPublicKey 下载边缘服务 jwt 鉴权需要的jwt公钥",
        "deprecated": false,
        "description": "",
        "operationId": "DownloadJwtPublicKey",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JwtResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy": {
      "get": {
        "summary": "List 托管边缘服务列表接口",
        "deprecated": false,
        "description": "",
        "operationId": "List",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "limit",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "edgeName",
            "in": "query",
            "description": "部署名",
            "required": false,
            "minLength": 0,
            "default": "",
            "type": "string"
          },
          {
            "name": "creator",
            "in": "query",
            "description": "部署创建人",
            "required": false,
            "minLength": 0,
            "default": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "Update 更新某个边缘服务的版本",
        "deprecated": false,
        "description": "",
        "operationId": "Update",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EdgeUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Create 创建一个托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Create",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EdgeCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchCreateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batch": {
      "post": {
        "summary": "BatchCreate 批量创建托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "BatchCreate",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EdgeCreateReq"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchCreateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batch/info": {
      "post": {
        "summary": "BatchInfo 查询某批量（除更新之外）、或者指定edgeIds的任务执行状态",
        "deprecated": false,
        "description": "",
        "operationId": "BatchInfo",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchInfoResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchDelete": {
      "delete": {
        "summary": "BatchDelete 批量删除边缘服务， 包括托管的和纳管的",
        "deprecated": false,
        "description": "",
        "operationId": "BatchDelete",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchDeleteBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchDeleteResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchRestart": {
      "post": {
        "summary": "BatchRestart 批量重启托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "BatchRestart",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchDeleteBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchRestartResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchStart": {
      "post": {
        "summary": "BatchStart 批量启动托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "BatchStart",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchDeleteBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchStartResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchStop": {
      "post": {
        "summary": "BatchStop 批量停止托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "BatchStop",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchDeleteBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchStopResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchUpdate": {
      "post": {
        "summary": "BatchUpdate 批量更新托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "BatchUpdate",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "parallel",
            "in": "query",
            "description": "",
            "required": false,
            "default": "false",
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EdgeUpdateReq"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchUpdateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchUpdate/{batchId}": {
      "get": {
        "summary": "BatchUpdateInfo 查询某批量更新任务的状态",
        "deprecated": false,
        "description": "",
        "operationId": "BatchUpdateInfo",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchUpdateInfoResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/{edgeId}": {
      "get": {
        "summary": "Get 查询指定的某个边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Get",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Delete 删除一个托管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Delete",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DeleteResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/{edgeId}/status": {
      "get": {
        "summary": "Status 查询某个边缘服务的状态",
        "deprecated": false,
        "description": "",
        "operationId": "Status",
        "tags": [
          "edgedeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/license": {
      "get": {
        "summary": "查询许可证信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetLicenseInfo",
        "tags": [
          "license"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetLicenseResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "更新上传许可证",
        "deprecated": false,
        "description": "",
        "operationId": "UploadLicense",
        "tags": [
          "license"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "File",
            "x-go-named": "*mime/multipart.FileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UploadLicenseResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/deployment/{clusterId}": {
      "get": {
        "summary": "GetDeployMonitorData 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "GetDeployMonitorData",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetDeployMonitorDataResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/license": {
      "get": {
        "summary": "GetLicenseMonitorData 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "GetLicenseMonitorData",
        "tags": [
          "monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetLicenseMonitorDataResp"
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/license/clusters": {
      "get": {
        "summary": "GetClusterLicenseMonitorData",
        "deprecated": false,
        "description": "",
        "operationId": "GetClusterLicenseMonitorData",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "description": "orgID",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "projectID",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetClusterLicMonitorDataResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/license/edgeservices": {
      "get": {
        "summary": "GetEdgeLicenseMonitorData",
        "deprecated": false,
        "description": "",
        "operationId": "GetEdgeLicenseMonitorData",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "description": "orgID",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "projectID",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "noTags",
            "in": "query",
            "description": "",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetEdgeLicMonitorDataResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/abnormalEkuipers": {
      "get": {
        "summary": "QueryAbnormalEkuipers 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QueryAbnormalEkuipers",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AbnormalServiceListItem"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/abnormalNeurons": {
      "get": {
        "summary": "QueryAbnormalNeurons 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QueryAbnormalNeurons",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AbnormalServiceListItem"
              }
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/edges": {
      "get": {
        "summary": "QueryEdgeStats 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QueryEdgeStats",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EdgeStats"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/ekuipers": {
      "get": {
        "summary": "QueryEkuiperStats 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QueryEkuiperStats",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EkuiperStats"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/ekuipers/{serviceId}": {
      "get": {
        "summary": "QuerySingleEkuiperStats 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QuerySingleEkuiperStats",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SingleEkuiperStats"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/neurons": {
      "get": {
        "summary": "QueryNeuronStats 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QueryNeuronStats",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/NeuronStats"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/metrics/orgs/{orgId}/projects/{projectId}/neurons/{serviceId}": {
      "get": {
        "summary": "QuerySingleNeuronStats 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QuerySingleNeuronStats",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SingleNeuronStats"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/orgs/{orgId}/projects/{projectId}": {
      "get": {
        "summary": "GetProjectMonitorData 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "GetProjectMonitorData",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "100",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "字段名",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "asc/desc",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetProjectMonitorDataResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/targets/category/{category}/nodetype/{nodetype}": {
      "get": {
        "summary": "QueryHttpSD 内部接口",
        "deprecated": false,
        "description": "",
        "operationId": "QueryHttpSD",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "",
            "required": true,
            "format": "int8",
            "type": "integer",
            "x-example": 0
          },
          {
            "name": "nodetype",
            "in": "path",
            "description": "",
            "required": true,
            "format": "int8",
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StaticConfig"
              }
            }
          },
          "401": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/monitor/testing": {
      "post": {
        "summary": "TestAntaresConnectivity 测试ECP连通性",
        "deprecated": false,
        "description": "",
        "operationId": "TestAntaresConnectivity",
        "tags": [
          "monitor"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TestConnectivityData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs": {
      "get": {
        "summary": "查询组织列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetOrgsByPage",
        "tags": [
          "org"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetOrganizationsByPageResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建组织",
        "deprecated": false,
        "description": "",
        "operationId": "CreateOrg",
        "tags": [
          "org"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateOrgRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateOrgResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/names": {
      "get": {
        "summary": "查询组织名称",
        "deprecated": false,
        "description": "",
        "operationId": "GetOrgNames",
        "tags": [
          "org"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetOrgNamesResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}": {
      "get": {
        "summary": "查询组织",
        "deprecated": false,
        "description": "",
        "operationId": "GetOrgByID",
        "tags": [
          "org"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetOrgResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "更新组织信息",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateOrg",
        "tags": [
          "org"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateOrgRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateOrgResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除组织",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteOrg",
        "tags": [
          "org"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects": {
      "get": {
        "summary": "查询组织项目列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetOrgProjectsByPage",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetOrgProjectsByPageResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建项目",
        "deprecated": false,
        "description": "",
        "operationId": "CreateProject",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateProjectRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateProjectResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/names": {
      "get": {
        "summary": "查询项目名称",
        "deprecated": false,
        "description": "",
        "operationId": "GetProjectNames",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetProjectNamesResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}": {
      "get": {
        "summary": "查询项目",
        "deprecated": false,
        "description": "",
        "operationId": "GetProjectByID",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetProjectResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "更新项目",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateProject",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProjectRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateProjectResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除项目",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteProject",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/projects": {
      "get": {
        "summary": "查询项目列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetProjectsByPage",
        "tags": [
          "project"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetProjectsByPageResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/0/upload_import": {
      "post": {
        "summary": "BackupFileUpload 上传备份文件， 并使用该备份文件来恢复集群",
        "deprecated": false,
        "description": "",
        "operationId": "BackupFileUpload",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "deployId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BackupFileUploadReqData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BackupFileUploadResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/deployments/{clusterId}/{filename}": {
      "delete": {
        "summary": "BackupDelete 删除指定备份",
        "deprecated": false,
        "description": "",
        "operationId": "BackupDelete",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "filename",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BackupDeleteResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/list": {
      "post": {
        "summary": "BackupList 查询一个或多个集群的备份列表",
        "deprecated": false,
        "description": "",
        "operationId": "BackupList",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BackupListReqData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BackupListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/task": {
      "get": {
        "summary": "BackupTaskList 查询指定 Org+Project下所有备份任务",
        "deprecated": false,
        "description": "",
        "operationId": "BackupTaskList",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BackupTaskListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "CreateBackupTask 创建备份任务",
        "deprecated": false,
        "description": "",
        "operationId": "CreateBackupTask",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateBackupTaskReqData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateBackupTaskResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/task/{task_id}": {
      "delete": {
        "summary": "DeleteBackupTask 删除备份任务",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteBackupTask",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "minimum": 1,
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DeleteBackupTaskResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/{clusterId}": {
      "post": {
        "summary": "BackupImmediately 对指定集群立即备份",
        "deprecated": false,
        "description": "",
        "operationId": "BackupImmediately",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BackupImmediatelyResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/{clusterId}/download/{filename}": {
      "get": {
        "summary": "BackupDownload 下载指定备份文件",
        "deprecated": false,
        "description": "",
        "operationId": "BackupDownload",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "filename",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/backups/{clusterId}/import": {
      "post": {
        "summary": "BackupImport 使用指定备份来恢复集群",
        "deprecated": false,
        "description": "",
        "operationId": "BackupImport",
        "tags": [
          "backup"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BackupImportReqData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BackupImportResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments": {
      "get": {
        "summary": "GetDeployList 获取部署列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetDeployList",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "orgID",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectID",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "limit",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "deployName",
            "in": "query",
            "description": "部署名",
            "required": false,
            "minLength": 0,
            "default": "",
            "type": "string"
          },
          {
            "name": "creator",
            "in": "query",
            "description": "部署创建人",
            "required": false,
            "minLength": 0,
            "default": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetDeployListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "EmqxCreate 创建部署",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxCreate",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "deployName",
            "in": "formData",
            "required": true,
            "type": "string",
            "x-go-name": "DeployName",
            "x-go-validate": "@regexp[^[一-龥_a-zA-Z0-9 -]{1,200}$]"
          },
          {
            "name": "desc",
            "in": "formData",
            "minLength": 0,
            "maxLength": 500,
            "default": "",
            "type": "string",
            "x-go-name": "Desc",
            "x-go-validate": "@string[0,500]"
          },
          {
            "name": "image",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "Image"
          },
          {
            "name": "replicas",
            "in": "formData",
            "format": "int32",
            "minimum": 1,
            "maximum": 7,
            "default": "3",
            "type": "integer",
            "x-go-name": "Replicas",
            "x-go-validate": "@int32[1,7]"
          },
          {
            "name": "nodeSelector",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "NodeSelector",
            "description": "format: format: json string"
          },
          {
            "name": "nodeAntiAffinity",
            "in": "formData",
            "default": "",
            "type": "boolean",
            "x-go-name": "NodeAntiAffinity"
          },
          {
            "name": "resourceLimit",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "ResourceLimit",
            "description": "resource_limit: global config EmqxQuota.Name"
          },
          {
            "name": "labels",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "Labels"
          },
          {
            "name": "env",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "Env",
            "description": "format: format: json string"
          },
          {
            "name": "networkType",
            "in": "formData",
            "default": "ClusterIP",
            "type": "string",
            "x-go-name": "NetworkType",
            "description": "StorageClassPVSize 默认单位 Mi\nStorageClassSize int32 `json:\"storageClassSize\" default:\"0\" in:\"formData\" `\nvalue is one of: ClusterIP, LoadBalancer, NodePort"
          },
          {
            "name": "networkConfig",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "NetworkConfig",
            "description": " network_config format: json string; All field Not must\n\texample:\n\n\t{\n\t    \"external_port\": {\n\t        \"mqtt\": 1883,\n\t        \"mqtts\": 8883,\n\t        \"ws\": 8083,\n\t        \"wss\": 8084,\n\t        \"dashboard\": 18083,\n\t        \"api\": 8081\n\t    },\n\t    \"service_port\": {\n\t        \"mqtt\": 1883,\n\t        \"mqtts\": 8883,\n\t        \"ws\": 8083,\n\t        \"wss\": 8084,\n\t        \"dashboard\": 18083,\n\t        \"api\": 8081\n\t    },\n\t    \"annotations\": {\n\t        \"service.beta.kubernetes.io/alibaba-cloud-loadbalancer-resource-group-id\": \"rg-acfnsek6c4hoiea\",\n\t        \"service.beta.kubernetes.io/alibaba-cloud-loadbalancer-spec\": \"slb.s2.small\",\n\t        \"service.beta.kubernetes.io/alicloud-loadbalancer-address-type\": \"internet\"\n\t    }\n\t}"
          },
          {
            "name": "logType",
            "in": "formData",
            "default": "internal",
            "type": "string",
            "x-go-name": "LogType"
          },
          {
            "name": "crtType",
            "in": "formData",
            "format": "int8",
            "default": "0",
            "type": "integer",
            "x-go-name": "CrtType",
            "description": "EMQX 证书类型 0: 默认值都为空 1: wss和mqtts都用 WssCaCrt 2: wss和mqtts都用 MqttsCaCrt\n3: wss和mqtts都用 WssTlsCrt 4: wss和mqtts都用 MqttsTlsCrt\n5: WssCaCrt + MqttsCaCrt 同时使用 6: WssTlsCrt + MqttsTlsCrt 同时使用\n7: WssCaCrt + MqttsTlsCrt 同时使用 8: WssTlsCrt + MqttsCaCrt 同时使用"
          },
          {
            "name": "wssCaCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssCaCrt",
            "x-go-validate": "@string[0,]",
            "description": "wss WssCaCrt 文件"
          },
          {
            "name": "wssTlsCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssTlsCrt",
            "x-go-validate": "@string[0,]",
            "description": "wss WssTlsCrt 文件"
          },
          {
            "name": "wssTlsKey",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssTlsKey",
            "x-go-validate": "@string[0,]",
            "description": "wss WssTlsKey 文件"
          },
          {
            "name": "mqttsCaCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsCaCrt",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsCaCrt 文件"
          },
          {
            "name": "mqttsTlsCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsTlsCrt",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsTlsCrt 文件"
          },
          {
            "name": "mqttsTlsKey",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsTlsKey",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsTlsKey 文件"
          },
          {
            "name": "license",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "License",
            "x-go-validate": "@string[0,]",
            "description": "emqx License 文件"
          },
          {
            "name": "connectLimit",
            "in": "formData",
            "format": "int32",
            "minimum": 1,
            "default": "10",
            "type": "integer",
            "x-go-name": "ConnectLimit",
            "x-go-validate": "@int32[1,]"
          },
          {
            "name": "backupFilename",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "BackupFileName",
            "description": "backup init parameters"
          },
          {
            "name": "backupDeployId",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "BackupDeployId"
          },
          {
            "name": "backupFile",
            "in": "formData",
            "default": "",
            "type": "string",
            "x-go-name": "BackupFile"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxCreateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}": {
      "get": {
        "summary": "GetDeployInfoById 根据 deployID、orgID、projectID 获取部署详细信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetDeployInfoById",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetDeployResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "EmqxDelete 删除指定部署",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxDelete",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxDeleteResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/crt": {
      "post": {
        "summary": "EmqxCrtUpdate 更新部署的证书，包括 WSS, MQTTS 的证书",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxCrtUpdate",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "crtType",
            "in": "formData",
            "format": "int8",
            "default": "0",
            "type": "integer",
            "x-go-name": "CrtType",
            "description": "EMQX 证书类型 0: 默认值都为空 1: wss和mqtts都用 WssCaCrt 2: wss和mqtts都用 MqttsCaCrt\n3: wss和mqtts都用 WssTlsCrt 4: wss和mqtts都用 MqttsTlsCrt\n5: WssCaCrt + MqttsCaCrt 同时使用 6: WssTlsCrt + MqttsTlsCrt 同时使用\n7: WssCaCrt + MqttsTlsCrt 同时使用 8: WssTlsCrt + MqttsCaCrt 同时使用"
          },
          {
            "name": "wssCaCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssCaCrt",
            "x-go-validate": "@string[0,]",
            "description": "wss WssCaCrt 文件"
          },
          {
            "name": "wssTlsCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssTlsCrt",
            "x-go-validate": "@string[0,]",
            "description": "wss WssTlsCrt 文件"
          },
          {
            "name": "wssTlsKey",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssTlsKey",
            "x-go-validate": "@string[0,]",
            "description": "wss WssTlsKey 文件"
          },
          {
            "name": "mqttsCaCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsCaCrt",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsCaCrt 文件"
          },
          {
            "name": "mqttsTlsCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsTlsCrt",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsTlsCrt 文件"
          },
          {
            "name": "mqttsTlsKey",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsTlsKey",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsTlsKey 文件"
          },
          {
            "name": "license",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "License",
            "x-go-validate": "@string[0,]",
            "description": "emqx License 文件"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxCrtUpdateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/dynamiclicense-update": {
      "post": {
        "summary": "EMQX 集群动态License更新",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxUpdateDynamicLicense",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmqxUpdateDynamicLicenseReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxUpdateDynamicLicenseResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/image-update": {
      "post": {
        "summary": "EMQX 集群镜像版本更新",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxUpdateImage",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmqxUpdateImageReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxUpdateImageResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/lic": {
      "post": {
        "summary": "EmqxLicUpdate 更新部署的 License",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxLicUpdate",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "crtType",
            "in": "formData",
            "format": "int8",
            "default": "0",
            "type": "integer",
            "x-go-name": "CrtType",
            "description": "EMQX 证书类型 0: 默认值都为空 1: wss和mqtts都用 WssCaCrt 2: wss和mqtts都用 MqttsCaCrt\n3: wss和mqtts都用 WssTlsCrt 4: wss和mqtts都用 MqttsTlsCrt\n5: WssCaCrt + MqttsCaCrt 同时使用 6: WssTlsCrt + MqttsTlsCrt 同时使用\n7: WssCaCrt + MqttsTlsCrt 同时使用 8: WssTlsCrt + MqttsCaCrt 同时使用"
          },
          {
            "name": "wssCaCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssCaCrt",
            "x-go-validate": "@string[0,]",
            "description": "wss WssCaCrt 文件"
          },
          {
            "name": "wssTlsCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssTlsCrt",
            "x-go-validate": "@string[0,]",
            "description": "wss WssTlsCrt 文件"
          },
          {
            "name": "wssTlsKey",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "WssTlsKey",
            "x-go-validate": "@string[0,]",
            "description": "wss WssTlsKey 文件"
          },
          {
            "name": "mqttsCaCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsCaCrt",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsCaCrt 文件"
          },
          {
            "name": "mqttsTlsCrt",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsTlsCrt",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsTlsCrt 文件"
          },
          {
            "name": "mqttsTlsKey",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "MqttsTlsKey",
            "x-go-validate": "@string[0,]",
            "description": "mqtts MqttsTlsKey 文件"
          },
          {
            "name": "license",
            "in": "formData",
            "minLength": 0,
            "default": "",
            "type": "string",
            "x-go-name": "License",
            "x-go-validate": "@string[0,]",
            "description": "emqx License 文件"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxLicUpdateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/net": {
      "post": {
        "summary": "EmqxNetUpdate 更新部署的 network",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxNetUpdate",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PortInfos"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxNetUpdateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/proxy": {
      "post": {
        "summary": "EmqxProxy 先检查该 deployid是否真的存在， 并开启代理通道",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxProxy",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmqxProxyReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxProxyResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/repair": {
      "post": {
        "summary": "EmqxRepair 修复指定已经异常的集群",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxRepair",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxRepairResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/scale/{replicas}": {
      "post": {
        "summary": "EmqxScale 水平伸缩指定部署",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxScale",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "replicas",
            "in": "path",
            "description": "",
            "required": true,
            "format": "int32",
            "minimum": 1,
            "maximum": 7,
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxScaleResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/start": {
      "post": {
        "summary": "EmqxStart 启动指定部署",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxStart",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxStartResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/status": {
      "get": {
        "summary": "EmqxStatus 查询部署状态",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxStatus",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxStatusResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/stop": {
      "post": {
        "summary": "停止指定部署的服务",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxStop",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxStopResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/update": {
      "put": {
        "summary": "更新指定部署的信息",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateProjectInfoByDeployID",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "orgID",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectID",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "clusterId",
            "in": "path",
            "description": "deployID",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateDeployData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateDeployResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/deployments/{clusterId}/vertical/{resourceLimit}": {
      "post": {
        "summary": "EmqxVerticalScale 垂直伸缩指定部署",
        "deprecated": false,
        "description": "",
        "operationId": "EmqxVerticalScale",
        "tags": [
          "deploy"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "resourceLimit",
            "in": "path",
            "description": "resource_limit: global config EmqxQuota.Name",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EmqxVerticalScaleResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy": {
      "put": {
        "summary": "Update 批量更新部署在 docker 上的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Update",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateOptions"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Create 批量部署 docker 上的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Create",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateOptions"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Delete 批量删除部署在 docker 上的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Delete",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeleteOptions"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node": {
      "post": {
        "summary": "CreateNode 创建 docker 节点信息",
        "deprecated": false,
        "description": "",
        "operationId": "CreateNode",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateNodeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node/list": {
      "get": {
        "summary": " ListNode 列表查询 docker 节点信息",
        "deprecated": false,
        "description": "",
        "operationId": "ListNode",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ListNodeResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node/{id}": {
      "get": {
        "summary": "GetNode 查询 docker 节点信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetNode",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DockerIaas"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "UpdateNode 更新 docker 节点信息",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateNode",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "minimum": 0,
            "type": "integer",
            "x-example": 0
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateNodeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "DeleteNode 删除 docker 节点信息",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteNode",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node/{id}/services": {
      "get": {
        "summary": "GetNodeServices 查询 docker 节点上的边缘服务列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetNodeServices",
        "tags": [
          "dockerdeploy"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "minimum": 0,
            "type": "integer",
            "x-example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetNodeServicesResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeagents": {
      "get": {
        "summary": "List 获取边缘网关列表",
        "deprecated": false,
        "description": "",
        "operationId": "List",
        "tags": [
          "edgeagent"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "agentId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": "100",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "字段名",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "asc/desc",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ListAgentResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Create 创建边缘网关",
        "deprecated": false,
        "description": "",
        "operationId": "Create",
        "tags": [
          "edgeagent"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAgentBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeagents/transfer": {
      "post": {
        "summary": "Transfer 转移边缘网关",
        "deprecated": false,
        "description": "",
        "operationId": "Transfer",
        "tags": [
          "edgeagent"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TransferBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeagents/{agentId}": {
      "put": {
        "summary": "Update 更新边缘网关",
        "deprecated": false,
        "description": "",
        "operationId": "Update",
        "tags": [
          "edgeagent"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAgentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Delete 删除边缘网关",
        "deprecated": false,
        "description": "",
        "operationId": "Delete",
        "tags": [
          "edgeagent"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices": {
      "get": {
        "summary": "ListServices 获取边缘服务列表",
        "deprecated": false,
        "description": "",
        "operationId": "ListServices",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "orgID",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectID",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "size",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": -1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          },
          {
            "name": "type",
            "in": "query",
            "description": "0-all, 1-online, 2-offline",
            "required": false,
            "format": "int64",
            "default": "0",
            "type": "integer"
          },
          {
            "name": "category",
            "in": "query",
            "description": "1-ekuiper, 2-neuron, 3-nanomq",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int8"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "nodeType",
            "in": "query",
            "description": "0-all, 3-proxy, 4-direct",
            "required": false,
            "format": "int8",
            "default": "0",
            "type": "integer"
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "agentName",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "unionFuzzy",
            "in": "query",
            "description": "多字段联合模糊搜索，包含name、endpoint、version、desc，此时不返回normal数量",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "noTags",
            "in": "query",
            "description": "",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "toClone",
            "in": "query",
            "description": "toClone = true 时，ekuiper version >= 1.8.0，neuron version >= 2.4.0",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "isPartial",
            "in": "query",
            "description": "toClone = true 时有效，isPartial = true 时，ekuiper version >= 1.9.0, neuron 暂不支持",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "isEcpInstalled",
            "in": "query",
            "description": "",
            "required": false,
            "default": "false",
            "type": "boolean"
          },
          {
            "name": "dockerName",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetEdgeServiceListResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Create 纳管边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Create",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateEdgeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateEdgeResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/export": {
      "get": {
        "summary": "Export 导出纳管的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Export",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceIds",
            "in": "query",
            "description": "",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/import": {
      "post": {
        "summary": "Import 导入纳管边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Import",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "File",
            "x-go-named": "*mime/multipart.FileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ImportEdgeResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/names": {
      "get": {
        "summary": "GetEdgeServiceNames 获取项目下边缘服务名称",
        "deprecated": false,
        "description": "",
        "operationId": "GetEdgeServiceNames",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetEdgeServiceNamesResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/tag": {
      "post": {
        "summary": "BatchTag 为多个边缘服务添加标签",
        "deprecated": false,
        "description": "",
        "operationId": "BatchTag",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchTagRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/BatchAddTagResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}": {
      "get": {
        "summary": "GetService",
        "deprecated": false,
        "description": "",
        "operationId": "GetService",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeServiceId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetEdgeServiceResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "Update 更新边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Update",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeServiceId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateEdgeServiceData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateEdgeResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Delete 解除纳管边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "Delete",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeServiceId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}/tag": {
      "post": {
        "summary": "AddTag 为单个边缘服务添加标签",
        "deprecated": false,
        "description": "",
        "operationId": "AddTag",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeServiceId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddTagRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AddTagResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}/taglimit": {
      "post": {
        "summary": "allocate tag to NeuronEX",
        "deprecated": false,
        "description": "",
        "operationId": "AllocateTagLimit",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeServiceId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagLimitBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}/tagused": {
      "get": {
        "summary": "get used tag from NeuronEX",
        "deprecated": false,
        "description": "",
        "operationId": "GetTagUsed",
        "tags": [
          "edgeservice"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "edgeServiceId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetTagUsedResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/deliver": {
      "post": {
        "summary": "Deliver 下发边缘服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "Deliver",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeliverBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/deliver/result": {
      "get": {
        "summary": "DeliverResult 获取边缘服务配置下发结果",
        "deprecated": false,
        "description": "",
        "operationId": "DeliverResult",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DeliverResultResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/export": {
      "get": {
        "summary": "Export 导出边缘服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "Export",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "file",
            "in": "query",
            "description": "",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "only related to export from edge directly, ekuiper version >= 1.9.0, neuron 暂不支持",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "function",
            "in": "query",
            "description": "1-ekuiper,2-neuron",
            "required": true,
            "format": "int64",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/export/param": {
      "get": {
        "summary": "ExportParam 导出边缘服务配置模版中的参数",
        "deprecated": false,
        "description": "",
        "operationId": "ExportParam",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceIds",
            "in": "query",
            "description": "",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "data",
            "in": "query",
            "description": "",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/import": {
      "post": {
        "summary": "Import 导入边缘服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "Import",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "type",
            "in": "query",
            "description": "0-all,1-partial",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "function",
            "in": "query",
            "description": "1-ekuiper,2-neuron",
            "required": true,
            "format": "int64",
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImportTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ImportResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/import/param": {
      "post": {
        "summary": "ImportParam 导入边缘服务配置模版参数对应的值",
        "deprecated": false,
        "description": "",
        "operationId": "ImportParam",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "File",
            "x-go-named": "*mime/multipart.FileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ImportParamResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/validate": {
      "post": {
        "summary": "Validate 校验边缘服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "Validate",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ValidateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ValidateResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/view": {
      "post": {
        "summary": "View 预览边缘服务配置",
        "deprecated": false,
        "description": "",
        "operationId": "View",
        "tags": [
          "edgetemplate"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 8,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ViewBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "type": "object",
              "additionalProperties": {},
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/tags": {
      "get": {
        "summary": "查询项目标签列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetTagsByPage",
        "tags": [
          "tag"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": true,
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetTagsByPageResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建项目标签",
        "deprecated": false,
        "description": "",
        "operationId": "CreateTag",
        "tags": [
          "tag"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateTagRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateTagResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/tags/{tagId}": {
      "put": {
        "summary": "更新项目标签",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateTag",
        "tags": [
          "tag"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "type": "integer",
            "x-example": 0
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateTagRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateTagResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除项目标签",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteTag",
        "tags": [
          "tag"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/orgs/{orgId}/projects/{projectId}/tags/{tagId}/edgeservices": {
      "get": {
        "summary": "查询项目标签下的边缘服务",
        "deprecated": false,
        "description": "",
        "operationId": "GetTaggedEdgeServices",
        "tags": [
          "tag"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "",
            "required": true,
            "format": "uint64",
            "type": "integer",
            "x-example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetTaggedEdgeServicesResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sso/activate": {
      "post": {
        "summary": "单点登录激活账号",
        "deprecated": false,
        "description": "",
        "operationId": "ActivateAccount",
        "tags": [
          "sso"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ActivateAccountRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ActivateSSOAccountResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sso/idps": {
      "get": {
        "summary": "获取单点登录服务",
        "deprecated": false,
        "description": "",
        "operationId": "GetProviders",
        "tags": [
          "sso"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetSSOProvidersResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sso/saml/0/slo": {
      "get": {
        "summary": "提供给认证服务的SAML SLO接口",
        "deprecated": false,
        "description": "",
        "operationId": "SAMLSingleLogoutService",
        "tags": [
          "sso"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "302": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "提供给认证服务的SAML SLO接口",
        "deprecated": false,
        "description": "",
        "operationId": "SAMLSingleLogoutService",
        "tags": [
          "sso"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "302": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sso/saml/{id}/acs": {
      "post": {
        "summary": "提供给认证服务的SAML ACS接口",
        "deprecated": false,
        "description": "",
        "operationId": "SAMLAssertionConsumerService",
        "tags": [
          "sso"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "RelayState",
            "in": "formData",
            "required": true,
            "type": "string",
            "x-go-name": "RelayState"
          },
          {
            "name": "SAMLResponse",
            "in": "formData",
            "required": true,
            "type": "string",
            "x-go-name": "SAMLResponse"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "302": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sso/saml/{id}/login/request": {
      "get": {
        "summary": "用于单点登录请求",
        "deprecated": false,
        "description": "",
        "operationId": "GetSAMLLoginRequest",
        "tags": [
          "sso"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "relayState",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetSAMLLoginRequestResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sso/saml/{id}/metadata": {
      "get": {
        "summary": "下载SP元数据XML",
        "deprecated": false,
        "description": "",
        "operationId": "SAMLServiceProviderMetadata",
        "tags": [
          "sso"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/tasks": {
      "post": {
        "summary": "CreateTask 创建一个任务",
        "deprecated": false,
        "description": "",
        "operationId": "CreateTask",
        "tags": [
          "task"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateTaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateTaskResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "summary": "GetTaskByTaskID 查询指定的任务",
        "deprecated": false,
        "description": "",
        "operationId": "GetTaskByTaskID",
        "tags": [
          "task"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/TaskInfo"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "UpdateTask 修改某个任务",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateTask",
        "tags": [
          "task"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateTaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateTaskResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users": {
      "get": {
        "summary": "查询用户列表",
        "deprecated": false,
        "description": "",
        "operationId": "GetUserList",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "nameOrEmail",
            "in": "query",
            "description": "",
            "required": false,
            "minLength": 0,
            "maxLength": 200,
            "default": "",
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "admin",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "boolean"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": 1,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetUserListResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "创建用户",
        "deprecated": false,
        "description": "",
        "operationId": "CreateUser",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/email/invite": {
      "post": {
        "summary": "通过邮箱邀请新用户",
        "deprecated": false,
        "description": "",
        "operationId": "SendUserInvitationEmail",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InviteUserByEmailRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/email/invited": {
      "get": {
        "summary": "邮箱是否已邀请",
        "deprecated": false,
        "description": "",
        "operationId": "IsEmailAlreadyInvited",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/IsEmailAlreadyInvitedResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/search": {
      "get": {
        "summary": "通过姓名搜索用户",
        "deprecated": false,
        "description": "",
        "operationId": "SearchUsers",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "name": "verified",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "boolean"
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "",
            "required": false,
            "default": "",
            "type": "boolean"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "minimum": -1,
            "maximum": 100,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "format": "int32",
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SearchUsersResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/{userId}": {
      "get": {
        "summary": "查询用户信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetUserByUserID",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetUserByUserIDResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "更新用户",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateUser",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "maxLength": 40,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UpdateUserResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除用户",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteUser",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/{userId}/add-to-orgs": {
      "post": {
        "summary": "将用户添加到组织",
        "deprecated": false,
        "description": "",
        "operationId": "AddToOrgs",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "maxLength": 40,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddToOrgsRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/AddToOrgsResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/{userId}/enabled": {
      "post": {
        "summary": "启用/禁用用户",
        "deprecated": false,
        "description": "",
        "operationId": "UpdateEnabled",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "maxLength": 40,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnableUserRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ActivateUserResponse"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/{userId}/password/reset": {
      "post": {
        "summary": "重置用户密码",
        "deprecated": false,
        "description": "",
        "operationId": "ResetUserPassword",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "maxLength": 40,
            "type": "string",
            "x-example": ""
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetUserPasswordRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/{userId}/reinvite": {
      "post": {
        "summary": "重新发送邀请邮件",
        "deprecated": false,
        "description": "",
        "operationId": "ResendUserInvitationEmail",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "maxLength": 40,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/StatusError"
            }
          },
          "204": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/iaas-configs": {
      "get": {
        "summary": "查询 k8s 连接信息列表",
        "deprecated": false,
        "description": "",
        "operationId": "ListKubeConfig",
        "tags": [
          "iaas"
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "分页数",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "maximum": 50,
            "default": "10",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "分页偏移",
            "required": false,
            "format": "int64",
            "minimum": 0,
            "default": "0",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/ListKubeConfigResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "新建 k8s 连接信息",
        "deprecated": false,
        "description": "",
        "operationId": "SetKubeConfig",
        "tags": [
          "iaas"
        ],
        "parameters": [
          {
            "name": "kubeConfig",
            "in": "formData",
            "required": true,
            "format": "binary",
            "type": "string",
            "x-go-name": "Config",
            "x-go-named": "*mime/multipart.FileHeader",
            "description": "Config: kube-config 文件"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "x-go-name": "Name",
            "x-go-validate": "@regexp[^[_a-zA-Z0-9]{1,200}$]",
            "description": "Name: 给 kube-config 取个名字"
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SetKubeConfigResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/users/iaas-configs/{name}": {
      "get": {
        "summary": "查询指定的 k8s 连接信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetKubeConfig",
        "tags": [
          "iaas"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/GetKubeConfigResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "删除指定的 k8s 连接信息",
        "deprecated": false,
        "description": "",
        "operationId": "DeleteKubeConfig",
        "tags": [
          "iaas"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "minLength": 1,
            "type": "string",
            "x-example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DeleteKubeConfigResp"
            }
          },
          "500": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/version": {
      "get": {
        "summary": "查询版本信息",
        "deprecated": false,
        "description": "",
        "operationId": "GetEcpVersion",
        "tags": [
          "version"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/EcpVersion"
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/traces/configs": {
      "get": {
        "summary": "查询链路追踪配置信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "trace"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "examples": {
              "application/json": {
                "grpc": "8.217.31.193:30317",
                "http": "8.217.31.193:30318"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "grpc": {
                  "type": "string",
                  "description": "grpc 地址"
                },
                "http": {
                  "type": "string",
                  "description": "http 地址"
                }
              },
              "required": [
                "grpc",
                "http"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/traces/list": {
      "get": {
        "summary": "查询链路追踪列表记录",
        "deprecated": false,
        "description": "",
        "tags": [
          "trace"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "分页开始位置",
            "required": false,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "size",
            "in": "query",
            "description": "每页数量",
            "required": false,
            "type": "string",
            "x-example": "30"
          },
          {
            "name": "service_name_like",
            "in": "query",
            "description": "模糊查询服务名称",
            "required": false,
            "type": "string",
            "x-example": "demo"
          },
          {
            "name": "span_name_like",
            "in": "query",
            "description": "模糊查询 Span名称",
            "required": false,
            "type": "string",
            "x-example": "driver"
          },
          {
            "name": "attribute_like",
            "in": "query",
            "description": "模糊查询 Attribute 名称",
            "required": false,
            "type": "string",
            "x-example": "nam"
          },
          {
            "name": "start",
            "in": "query",
            "description": "开始时间 （utc）",
            "required": false,
            "type": "string",
            "x-example": "2024-10-15%2003%3A02%3A06.172"
          },
          {
            "name": "end",
            "in": "query",
            "description": "结束时间 （utc）",
            "required": false,
            "type": "string",
            "x-example": "2024-10-16%2003%3A02%3A06.172"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "examples": {
              "application/json": {
                "data": [
                  {
                    "trace_id": "b45664f3fedbac6b3d781cde00d1e389",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:15.798",
                    "duration_ms": 162.050616
                  },
                  {
                    "trace_id": "96276768ad2ed8784d8c31c0ed4b88f9",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:15.612",
                    "duration_ms": 170.05465
                  },
                  {
                    "trace_id": "fdad0fe4b6670ac3778415e28ba7ea9e",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:15.424",
                    "duration_ms": 174.068943
                  },
                  {
                    "trace_id": "3a79b799f4090f12bf99412a216e4d45",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:15.240",
                    "duration_ms": 165.045234
                  },
                  {
                    "trace_id": "904bdf57da9561ba0916dbee536d5f46",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:15.060",
                    "duration_ms": 158.064324
                  },
                  {
                    "trace_id": "53ce3aeae423523204ed2b374e03cc57",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:14.878",
                    "duration_ms": 161.04129
                  },
                  {
                    "trace_id": "99607b19c63d343b1036674bafab4164",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:14.698",
                    "duration_ms": 158.041126
                  },
                  {
                    "trace_id": "e19b24da9167c2d012405293ce5874ad",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:14.514",
                    "duration_ms": 166.03944
                  },
                  {
                    "trace_id": "b31f2853163342f285b64186b5025132",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:14.329",
                    "duration_ms": 168.049876
                  },
                  {
                    "trace_id": "ef0cfa23f5170b838015fcbdfa8d6838",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:14.143",
                    "duration_ms": 170.039488
                  },
                  {
                    "trace_id": "3ea1fd41f18f7bb3a717f41e02f09cb6",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:13.960",
                    "duration_ms": 164.042531
                  },
                  {
                    "trace_id": "f80437fb1ebd8bfff7702301a73c0bd1",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:13.781",
                    "duration_ms": 156.042625
                  },
                  {
                    "trace_id": "77af753811e2150e6de883bcc5a15251",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:13.598",
                    "duration_ms": 164.035773
                  },
                  {
                    "trace_id": "939490cfb5aaae9810e8d00a0b7b00dc",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:13.417",
                    "duration_ms": 160.040425
                  },
                  {
                    "trace_id": "6a32ac7463cc6ae48543b36e475e6ad0",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:13.233",
                    "duration_ms": 164.042463
                  },
                  {
                    "trace_id": "06fa6c1b52e18f6d07436617b47832d5",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:13.054",
                    "duration_ms": 156.049014
                  },
                  {
                    "trace_id": "4ea6f613e7b8fdcf84f974b8b5e37378",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:12.871",
                    "duration_ms": 164.035528
                  },
                  {
                    "trace_id": "9979dfaab4bea0b5f75a37cab985cefb",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:12.682",
                    "duration_ms": 176.037949
                  },
                  {
                    "trace_id": "d2e6347093c1533c50791f006051873b",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:12.494",
                    "duration_ms": 174.04264
                  },
                  {
                    "trace_id": "639176dd7e036eb629ecaab1ada62ddd",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:12.308",
                    "duration_ms": 170.041062
                  },
                  {
                    "trace_id": "e2fe8adafb5afc55182c4a542f0cdd49",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:12.126",
                    "duration_ms": 162.035473
                  },
                  {
                    "trace_id": "9d44b96dbecc2bd3bc28b825f50ac034",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:11.945",
                    "duration_ms": 160.045731
                  },
                  {
                    "trace_id": "bedd75d8aa422f903b53cd87c4b0706e",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:11.759",
                    "duration_ms": 170.047546
                  },
                  {
                    "trace_id": "1c45b68cef8a07cae844cfbf1f79c2da",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:11.566",
                    "duration_ms": 185.042419
                  },
                  {
                    "trace_id": "a9e1df496030165a33a8e14fb56e0a62",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:11.384",
                    "duration_ms": 162.06048
                  },
                  {
                    "trace_id": "547cfc7d6ffe6378bb33fbd78499f3a4",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:11.196",
                    "duration_ms": 174.046116
                  },
                  {
                    "trace_id": "c0b6d9e2e599f6cd734ae5b3ad2cb719",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:11.004",
                    "duration_ms": 182.049456
                  },
                  {
                    "trace_id": "deed290b57847aba54ab58ccd9565f40",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:10.818",
                    "duration_ms": 170
                  },
                  {
                    "trace_id": "90b7291dc211223dd1f0bac305e7dffc",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:10.637",
                    "duration_ms": 160.049139
                  },
                  {
                    "trace_id": "8d55add4b13cce87fd07d7759f86c401",
                    "service_name": "local-8085-demo",
                    "span_name": "driver cmd send",
                    "start_time": "2024-10-15 05:55:10.448",
                    "duration_ms": 176.0555
                  }
                ],
                "total": 151
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "trace_id": {
                        "type": "string",
                        "description": "Trace ID\n"
                      },
                      "service_name": {
                        "type": "string",
                        "description": "服务名称"
                      },
                      "span_name": {
                        "type": "string",
                        "description": "span 名称"
                      },
                      "start_time": {
                        "type": "string",
                        "description": "开始时间"
                      },
                      "duration_ms": {
                        "type": "number",
                        "description": "总耗时（ms）"
                      }
                    },
                    "required": [
                      "trace_id",
                      "service_name",
                      "span_name",
                      "start_time",
                      "duration_ms"
                    ]
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "总数"
                }
              },
              "required": [
                "data",
                "total"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/traces/{traceId}": {
      "get": {
        "summary": "查询链路详情",
        "deprecated": false,
        "description": "",
        "tags": [
          "trace"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "examples": {
              "application/json": {
                "data": [
                  {
                    "service.name": "local-8085-demo",
                    "parent_span_id": "",
                    "span_id": "b6c1c6f508f8e150",
                    "span_kind": "Server",
                    "span_name": "driver cmd send",
                    "duration_ms": 86,
                    "time": "2024-10-15 05:55:15.612",
                    "status_code": "",
                    "status_message": "",
                    "attributes": {
                      "app.name": "neuron",
                      "app.version": "2.10.0",
                      "clib": "glibc",
                      "clib_version": "2.35",
                      "distro": "Ubuntu 22.04",
                      "kernel": "5.15.0-92-generic",
                      "machine": "x86_64",
                      "node": "fins",
                      "span.mytype": "data-collection",
                      "thread id": 140203593299520
                    },
                    "childSpan": [
                      {
                        "service.name": "local-8085-demo",
                        "parent_span_id": "b6c1c6f508f8e150",
                        "span_id": "ee3ea65d341263eb",
                        "span_kind": "Server",
                        "span_name": "driver cmd recv",
                        "duration_ms": 84,
                        "time": "2024-10-15 05:55:15.614",
                        "status_code": "",
                        "status_message": "",
                        "attributes": {
                          "app.name": "neuron",
                          "app.version": "2.10.0",
                          "clib": "glibc",
                          "clib_version": "2.35",
                          "distro": "Ubuntu 22.04",
                          "kernel": "5.15.0-92-generic",
                          "machine": "x86_64",
                          "span.mytype": "data-collection",
                          "thread id": 140203301795392
                        },
                        "childSpan": [
                          {
                            "service.name": "local-8085-demo",
                            "parent_span_id": "ee3ea65d341263eb",
                            "span_id": "e0725164404f0c08",
                            "span_kind": "Server",
                            "span_name": "report cb",
                            "duration_ms": 0,
                            "time": "2024-10-15 05:55:15.730",
                            "status_code": "",
                            "status_message": "",
                            "attributes": {
                              "app.name": "neuron",
                              "app.version": "2.10.0",
                              "clib": "glibc",
                              "clib_version": "2.35",
                              "distro": "Ubuntu 22.04",
                              "kernel": "5.15.0-92-generic",
                              "machine": "x86_64",
                              "mqtt": 1,
                              "span.mytype": "data-collection",
                              "thread id": 140203584906816
                            },
                            "childSpan": [
                              {
                                "service.name": "local-8085-demo",
                                "parent_span_id": "e0725164404f0c08",
                                "span_id": "cab3cc0e2a957445",
                                "span_kind": "Server",
                                "span_name": "mqtt publish",
                                "duration_ms": 0,
                                "time": "2024-10-15 05:55:15.730",
                                "status_code": "",
                                "status_message": "",
                                "attributes": {
                                  "app.name": "neuron",
                                  "app.version": "2.10.0",
                                  "clib": "glibc",
                                  "clib_version": "2.35",
                                  "distro": "Ubuntu 22.04",
                                  "error": 0,
                                  "kernel": "5.15.0-92-generic",
                                  "machine": "x86_64",
                                  "playload": "{\"node\": \"fins\", \"group\": \"1\", \"timestamp\": 1728971715722, \"values\": {\"1\": 0}, \"errors\": {}, \"metas\": {}}",
                                  "span.mytype": "data-collection",
                                  "thread id": 140203285009984
                                },
                                "childSpan": [
                                  {
                                    "service.name": "emqx",
                                    "parent_span_id": "cab3cc0e2a957445",
                                    "span_id": "0e1ecd22fc1ce1b7",
                                    "span_kind": "Internal",
                                    "span_name": "process_message",
                                    "duration_ms": 0.05465,
                                    "time": "2024-10-15 05:55:15.732",
                                    "status_code": "",
                                    "status_message": "",
                                    "attributes": {
                                      "messaging.client_id": "neuron_ZN0mjK",
                                      "messaging.destination.name": "/neuron/mqtt",
                                      "process.executable.name": "/opt/emqx/bin/emqx",
                                      "process.runtime.description": "Erlang/OTP 25 erts-13.2.2",
                                      "process.runtime.name": "BEAM",
                                      "process.runtime.version": "13.2.2",
                                      "service.instance.id": "emqx@172.23.0.3",
                                      "service.version": "5.6.0",
                                      "telemetry.sdk.language": "erlang",
                                      "telemetry.sdk.name": "opentelemetry",
                                      "telemetry.sdk.version": "1.4.7-emqx"
                                    },
                                    "childSpan": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "total": 5
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "service.name": {
                        "type": "string",
                        "description": "服务名称"
                      },
                      "parent_span_id": {
                        "type": "string",
                        "description": "父span id"
                      },
                      "span_id": {
                        "type": "string"
                      },
                      "span_kind": {
                        "type": "string"
                      },
                      "span_name": {
                        "type": "string",
                        "description": "span 名称"
                      },
                      "duration_ms": {
                        "type": "integer",
                        "description": "耗时"
                      },
                      "time": {
                        "type": "string",
                        "description": "开始时间"
                      },
                      "status_code": {
                        "type": "string",
                        "description": "状态"
                      },
                      "status_message": {
                        "type": "string",
                        "description": "错误信息"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {}
                      },
                      "childSpan": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "service.name": {
                              "type": "string"
                            },
                            "parent_span_id": {
                              "type": "string"
                            },
                            "span_id": {
                              "type": "string"
                            },
                            "span_kind": {
                              "type": "string"
                            },
                            "span_name": {
                              "type": "string"
                            },
                            "duration_ms": {
                              "type": "integer"
                            },
                            "time": {
                              "type": "string"
                            },
                            "status_code": {
                              "type": "string"
                            },
                            "status_message": {
                              "type": "string"
                            },
                            "attributes": {
                              "type": "object",
                              "properties": {}
                            },
                            "childSpan": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "service.name": {
                                    "type": "string"
                                  },
                                  "parent_span_id": {
                                    "type": "string"
                                  },
                                  "span_id": {
                                    "type": "string"
                                  },
                                  "span_kind": {
                                    "type": "string"
                                  },
                                  "span_name": {
                                    "type": "string"
                                  },
                                  "duration_ms": {
                                    "type": "integer"
                                  },
                                  "time": {
                                    "type": "string"
                                  },
                                  "status_code": {
                                    "type": "string"
                                  },
                                  "status_message": {
                                    "type": "string"
                                  },
                                  "attributes": {
                                    "type": "object",
                                    "properties": {}
                                  },
                                  "childSpan": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "service.name": {
                                          "type": "string"
                                        },
                                        "parent_span_id": {
                                          "type": "string"
                                        },
                                        "span_id": {
                                          "type": "string"
                                        },
                                        "span_kind": {
                                          "type": "string"
                                        },
                                        "span_name": {
                                          "type": "string"
                                        },
                                        "duration_ms": {
                                          "type": "integer"
                                        },
                                        "time": {
                                          "type": "string"
                                        },
                                        "status_code": {
                                          "type": "string"
                                        },
                                        "status_message": {
                                          "type": "string"
                                        },
                                        "attributes": {
                                          "type": "object",
                                          "properties": {}
                                        },
                                        "childSpan": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "service.name": {
                                                "type": "string"
                                              },
                                              "parent_span_id": {
                                                "type": "string"
                                              },
                                              "span_id": {
                                                "type": "string"
                                              },
                                              "span_kind": {
                                                "type": "string"
                                              },
                                              "span_name": {
                                                "type": "string"
                                              },
                                              "duration_ms": {
                                                "type": "number"
                                              },
                                              "time": {
                                                "type": "string"
                                              },
                                              "status_code": {
                                                "type": "string"
                                              },
                                              "status_message": {
                                                "type": "string"
                                              },
                                              "attributes": {
                                                "type": "object",
                                                "properties": {}
                                              },
                                              "childSpan": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "description": "子span"
                      }
                    }
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "总数"
                }
              },
              "required": [
                "data",
                "total"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/emqx/state": {
      "get": {
        "summary": "获取EMQX状态",
        "deprecated": false,
        "description": "获取emqx broker的配置信息与运行状态",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "integer"
                },
                "address": {
                  "type": "string"
                }
              },
              "required": [
                "state",
                "address"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/emqx/setting": {
      "get": {
        "summary": "获取EMQX配置",
        "deprecated": false,
        "description": "获取emqx broker的配置信息",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "broker": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "clientid": {
                  "type": "string"
                },
                "topic": {
                  "type": "string"
                },
                "qos": {
                  "type": "string"
                },
                "ssl": {
                  "type": "boolean"
                },
                "ca": {
                  "type": "string"
                },
                "cert": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              },
              "required": [
                "broker",
                "port",
                "username",
                "password",
                "clientid",
                "topic",
                "qos",
                "ssl",
                "ca",
                "cert",
                "key"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "修改EMQX的配置",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "brokerHost",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "brokerPort",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "username",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "topic",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "qos",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "ssl",
            "in": "formData",
            "type": "boolean"
          },
          {
            "name": "ca",
            "in": "formData",
            "format": "binary",
            "type": "string"
          },
          {
            "name": "cert",
            "in": "formData",
            "format": "binary",
            "type": "string"
          },
          {
            "name": "key",
            "in": "formData",
            "format": "binary",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/emqx/test": {
      "post": {
        "summary": "测试EMQX连接状态",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "brokerHost",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "brokerPort",
            "in": "formData",
            "type": "integer"
          },
          {
            "name": "username",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "topic",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "qos",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "ssl",
            "in": "formData",
            "type": "boolean"
          },
          {
            "name": "ca",
            "in": "formData",
            "format": "binary",
            "type": "string"
          },
          {
            "name": "cert",
            "in": "formData",
            "format": "binary",
            "type": "string"
          },
          {
            "name": "key",
            "in": "formData",
            "format": "binary",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/datalayers/state": {
      "get": {
        "summary": "获取Datalayers状态",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "invalid-不可用，connected-已连接，disconnect-已断开"
                },
                "address": {
                  "type": "string"
                },
                "usedStore": {
                  "type": "string"
                },
                "ttl": {
                  "type": "string"
                }
              },
              "required": [
                "status",
                "address"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/datalayers/setting": {
      "get": {
        "summary": "获取Datalayers配置",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "database": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "ttl": {
                  "type": "string"
                }
              },
              "required": [
                "host",
                "database",
                "port"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "修改Datalayers配置",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "host",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "port",
            "in": "formData",
            "type": "integer"
          },
          {
            "name": "database",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "user",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "ttl",
            "in": "formData",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/datalayers/test": {
      "post": {
        "summary": "测试Datalayers配置",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "database": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "tls": {
                  "type": "boolean"
                },
                "pool-count": {
                  "type": "integer"
                }
              },
              "required": [
                "address",
                "database",
                "username",
                "password",
                "tls",
                "pool-count"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/datalayers/execute": {
      "post": {
        "summary": "执行sql",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "sql": {
                  "type": "string"
                }
              },
              "required": [
                "sql"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "outputs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rows": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "schema": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "total_number": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "rows",
                      "schema",
                      "total_number"
                    ]
                  }
                }
              },
              "required": [
                "outputs"
              ]
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/overview": {
      "get": {
        "summary": "节点概览",
        "deprecated": false,
        "description": "节点概览信息",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line4"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "pathType": {
                  "type": "integer",
                  "description": "节点类型"
                },
                "nodeStatus": {
                  "type": "integer",
                  "description": "节点状态"
                },
                "nodeCount": {
                  "type": "integer",
                  "description": "节点数"
                },
                "onlineNodeCount": {
                  "type": "integer",
                  "description": "在线节点数"
                },
                "deviceCount": {
                  "type": "integer",
                  "description": "设备数"
                },
                "deviceStatus": {
                  "type": "integer",
                  "description": "设备状态"
                },
                "onlineDeviceCount": {
                  "type": "integer",
                  "description": "在线设备数"
                },
                "metricCount": {
                  "type": "integer",
                  "description": "点位数量"
                }
              },
              "required": [
                "pathType",
                "nodeStatus",
                "nodeCount",
                "onlineNodeCount",
                "deviceCount",
                "deviceStatus",
                "onlineDeviceCount",
                "metricCount"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/model": {
      "get": {
        "summary": "模型树查询",
        "deprecated": false,
        "description": "获取模型的子列表，如果id为空，则默认获取root节点下的所有子节点\n\n新版本中添加了expendNodes 用于携带默认展开的节点uid，如下：\n{\"nodes\":[{\"id\":\"spBv1.0/Factory1\",\"name\":\"Factory1\",\"alias\":\"\",\"category\":5,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz\",\"name\":\"xyz\",\"alias\":\"\",\"category\":5,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试\",\"name\":\"测试\",\"alias\":\"\",\"category\":1,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1\",\"name\":\"Neuron1\",\"alias\":\"\",\"category\":5,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、\",\"name\":\"测试1、xyz、\",\"alias\":\"\",\"category\":5,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123\",\"name\":\"123\",\"alias\":\"\",\"category\":2,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123/ctt\",\"name\":\"ctt\",\"alias\":\"\",\"category\":3,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":null},{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123/x\",\"name\":\"x\",\"alias\":\"\",\"category\":6,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123/x/y\",\"name\":\"y\",\"alias\":\"\",\"category\":6,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123/x/y/z\",\"name\":\"z\",\"alias\":\"\",\"category\":3,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":null}]}]}]}]}]}]}]}]},{\"id\":\"spBv1.0/kunming01\",\"name\":\"kunming01\",\"alias\":\"\",\"category\":1,\"type\":0,\"isLeaf\":false,\"children\":[{\"id\":\"spBv1.0/kunming01/wuhua01\",\"name\":\"wuhua01\",\"alias\":\"\",\"category\":2,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":[{\"id\":\"spBv1.0/kunming01/wuhua01/ctt\",\"name\":\"ctt\",\"alias\":\"\",\"category\":3,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":null}]},{\"id\":\"spBv1.0/kunming01/wuhua02\",\"name\":\"wuhua02\",\"alias\":\"\",\"category\":2,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":[{\"id\":\"spBv1.0/kunming01/wuhua02/x\",\"name\":\"x\",\"alias\":\"\",\"category\":3,\"type\":0,\"isLeaf\":false,\"status\":\"online\",\"children\":null}]}]}],\"expandNodes\":[\"spBv1.0/Factory1\",\"spBv1.0/Factory1/xyz\",\"spBv1.0/Factory1/xyz/测试\",\"spBv1.0/Factory1/xyz/测试/Neuron1\",\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、\",\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123\",\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123/x\",\"spBv1.0/Factory1/xyz/测试/Neuron1/测试1、xyz、/123/x/y\",\"spBv1.0/kunming01\",\"spBv1.0/kunming01/wuhua01\",\"spBv1.0/kunming01/wuhua02\"]}",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "nodes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "alias": {
                        "type": "string"
                      },
                      "node-type": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "datatype": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "alias",
                      "node-type",
                      "value",
                      "datatype"
                    ]
                  }
                },
                "expandNodes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "nodes",
                "expandNodes"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "模型节点删除",
        "deprecated": false,
        "description": "可以对没有在线的edge node或者 device 进项删除操作",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/model/filter": {
      "get": {
        "summary": "模型查询过滤",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "find",
            "in": "query",
            "description": "查找的字符串",
            "required": false,
            "type": "string"
          },
          {
            "name": "flag",
            "in": "query",
            "description": "查找类型，值为nam或alias",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "alias": {
                  "type": "string"
                },
                "category": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "isLeaf": {
                  "type": "string"
                },
                "children": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "alias": {
                        "type": "string"
                      },
                      "category": {
                        "type": "string",
                        "description": "group"
                      },
                      "isLeaf": {
                        "type": "string"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "alias",
                      "category",
                      "isLeaf",
                      "children"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "name",
                "alias",
                "category",
                "type",
                "isLeaf",
                "children"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/info": {
      "get": {
        "summary": "获取基础信息",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "nodeType": {
                  "type": "string"
                },
                "alias": {
                  "type": "string"
                },
                "fullAlias": {
                  "type": "string"
                },
                "datalayersName": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "statics": {
                  "type": "object",
                  "properties": {
                    "lastOmDate": {
                      "type": "string"
                    },
                    "setupDate": {
                      "type": "string"
                    },
                    "sn": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "lastOmDate",
                    "setupDate",
                    "sn",
                    "type"
                  ]
                }
              },
              "required": [
                "id",
                "nodeType",
                "alias",
                "fullAlias",
                "datalayersName",
                "tags",
                "statics"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "修改信息",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "alias": {
                  "type": "string",
                  "description": "别名"
                },
                "staticType": {
                  "type": "string",
                  "description": "设备类型"
                },
                "staticSn": {
                  "type": "string",
                  "description": "设备序列号"
                },
                "staticSetupDate": {
                  "type": "string",
                  "description": "设备安装日期"
                },
                "staticLastOmDate": {
                  "type": "string",
                  "description": "设备最后维护日期"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/info/tags": {
      "get": {
        "summary": "获取可用Tag列表",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "tags"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "修改指定ID下的Tags",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "tags"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/metrics": {
      "get": {
        "summary": "获取点位列表",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "alias": {
                        "type": "string"
                      },
                      "datatype": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "unit": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "stale": {
                        "type": "string",
                        "description": "数据是否过期"
                      }
                    },
                    "required": [
                      "name",
                      "alias",
                      "datatype",
                      "value",
                      "unit",
                      "timestamp",
                      "id",
                      "stale"
                    ]
                  }
                }
              },
              "required": [
                "tags"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/metrics/metric": {
      "get": {
        "summary": "获取点位实时数据",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID",
            "required": false,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1/tag01"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string"
                },
                "datatype": {
                  "type": "string"
                },
                "stale": {
                  "type": "string",
                  "description": "数据是否过期"
                }
              },
              "required": [
                "id",
                "value",
                "unit",
                "timestamp",
                "datatype",
                "stale"
              ]
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/metrics/metric/unit": {
      "put": {
        "summary": "修改点位单位",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1/tag01"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "unit": {
                  "type": "string"
                }
              },
              "required": [
                "unit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/metrics/metric/value": {
      "put": {
        "summary": "修改点位数值",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "x-example": "spBv1.0/factory1/line1/modubus1/tag01"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "datatype": {
                  "type": "integer"
                }
              },
              "required": [
                "value",
                "datatype"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/sparkplug/metrics/metric/values": {
      "put": {
        "summary": "修改多点位数值",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "metrics": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "id",
                      "value"
                    ]
                  }
                },
                "value": {
                  "type": "string"
                },
                "datatype": {
                  "type": "integer"
                }
              },
              "required": [
                "metrics",
                "value",
                "datatype"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/integration-analysis/history": {
      "delete": {
        "summary": "删除会话历史",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/integration-analysis": {
      "post": {
        "summary": "请求ai分析",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/integration-analysis/stop": {
      "post": {
        "summary": "停止会话",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/datalayers/reload": {
      "post": {
        "summary": "更新数据库配置信息",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/integration-ask": {
      "post": {
        "summary": "请求ai文档查询",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/integration-ask/history": {
      "delete": {
        "summary": "删除历史会话",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/api/v1/ai/integration-ask/stop": {
      "post": {
        "summary": "停止会话",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [],
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "security": [],
  "swagger": "2.0",
  "definitions": {
    "AbnormalServiceListItem": {
      "type": "object",
      "required": [
        "id",
        "name",
        "version"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "ActivateAccountRequestData": {
      "type": "object",
      "required": [
        "token",
        "name",
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "default": "",
          "x-go-name": "Email",
          "x-go-validate": "@email"
        },
        "name": {
          "type": "string",
          "default": "",
          "maxLength": 50,
          "minLength": 1,
          "x-go-name": "Name",
          "x-go-validate": "@string[1,50]"
        },
        "password": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Password",
          "x-go-validate": "@string[1,]"
        },
        "token": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Token",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "ActivateSSOAccountResponse": {
      "type": "object",
      "required": [
        "tokenType",
        "accessToken",
        "expiresIn",
        "refreshToken",
        "refreshExpiresIn",
        "admin"
      ],
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "admin": {
          "type": "boolean",
          "x-go-name": "IsAdministrator"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresIn"
        },
        "refreshExpiresIn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RefreshExpiresIn"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "tokenType": {
          "type": "string",
          "x-go-name": "TokenType"
        }
      }
    },
    "ActivateUserResponse": {
      "type": "object",
      "required": [
        "user"
      ],
      "properties": {
        "user": {
          "type": "string",
          "x-go-name": "User"
        }
      }
    },
    "AddExistingClusterResponse": {
      "type": "object",
      "required": [
        "id",
        "type",
        "name",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Type"
        }
      }
    },
    "AddTagRequestData": {
      "type": "object",
      "required": [
        "tag"
      ],
      "properties": {
        "tag": {
          "type": "string",
          "x-go-name": "Tag"
        }
      }
    },
    "AddTagResponse": {
      "type": "object",
      "required": [
        "tags"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      }
    },
    "AddToOrgsRequestData": {
      "type": "object",
      "required": [
        "orgIds"
      ],
      "properties": {
        "orgIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrgIDs"
        }
      }
    },
    "AddToOrgsResponse": {
      "type": "object",
      "required": [
        "orgIds"
      ],
      "properties": {
        "orgIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OrgIDs"
        }
      }
    },
    "Agent": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseModelUUID"
        },
        {
          "type": "object",
          "required": [
            "agentId",
            "orgId",
            "projectId",
            "name",
            "desc",
            "timestamp",
            "status"
          ],
          "properties": {
            "agentId": {
              "description": "agentID",
              "type": "string",
              "x-go-name": "AgentID"
            },
            "desc": {
              "description": "desc",
              "type": "string",
              "x-go-name": "Desc"
            },
            "name": {
              "description": "name",
              "type": "string",
              "x-go-name": "Name"
            },
            "orgId": {
              "description": "orgID",
              "type": "string",
              "x-go-name": "OrgID"
            },
            "projectId": {
              "description": "projectID",
              "type": "string",
              "x-go-name": "ProjectID"
            },
            "status": {
              "description": "agent状态 0-off, 1-on",
              "type": "integer",
              "format": "int64",
              "x-go-name": "Status"
            },
            "timestamp": {
              "description": "记录时间",
              "type": "integer",
              "format": "int64",
              "x-go-name": "Timestamp"
            }
          }
        }
      ]
    },
    "AgentInfo": {
      "type": "object",
      "required": [
        "totalCount",
        "activeCount"
      ],
      "properties": {
        "activeCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ActiveCount"
        },
        "totalCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalCount"
        }
      }
    },
    "AlarmConfigurationResponse": {
      "type": "object",
      "required": [
        "enabled",
        "email",
        "webhook",
        "onlyCritical",
        "silenceInterval",
        "resolveInterval",
        "stormInterval",
        "stormMaxAlarms"
      ],
      "properties": {
        "email": {
          "$ref": "#/definitions/AlarmNotificationEmailConfiguration"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "onlyCritical": {
          "type": "boolean",
          "x-go-name": "NotifyOnlyCritical"
        },
        "resolveInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResolveInterval"
        },
        "silenceInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SilenceInterval"
        },
        "stormInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StormInterval"
        },
        "stormMaxAlarms": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StormMaxAlarms"
        },
        "webhook": {
          "$ref": "#/definitions/AlarmNotificationWebhookConfiguration"
        }
      }
    },
    "AlarmNotificationEmailConfiguration": {
      "type": "object",
      "required": [
        "enabled",
        "receivers"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "receivers": {
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "Receivers",
          "x-go-validate": "@array[0,10]:@email"
        }
      }
    },
    "AlarmNotificationWebhookConfiguration": {
      "type": "object",
      "required": [
        "enabled",
        "url",
        "headers"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Headers",
          "properties": {}
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      }
    },
    "Alert": {
      "description": "Alert holds one alert for notification templates.",
      "type": "object",
      "required": [
        "status",
        "labels",
        "annotations",
        "startsAt",
        "endsAt",
        "generatorURL",
        "fingerprint"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/KV"
        },
        "endsAt": {
          "$ref": "#/definitions/Time"
        },
        "fingerprint": {
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "generatorURL": {
          "type": "string",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/KV"
        },
        "startsAt": {
          "$ref": "#/definitions/Time"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      }
    },
    "Alerts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Alert"
      }
    },
    "AuthTokenConfig": {
      "type": "object",
      "required": [
        "accessTokenDuration",
        "refreshTokenDuration"
      ],
      "properties": {
        "accessTokenDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccessTokenDuration"
        },
        "refreshTokenDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RefreshTokenDuration"
        }
      }
    },
    "BCServerData": {
      "type": "object",
      "required": [
        "server_name",
        "scheme"
      ],
      "properties": {
        "scheme": {
          "type": "string",
          "x-go-name": "Scheme"
        },
        "server_name": {
          "type": "string",
          "x-go-name": "ServerName"
        }
      }
    },
    "Backup": {
      "type": "object",
      "required": [
        "created_at",
        "filename",
        "node",
        "size"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "filename": {
          "type": "string",
          "x-go-name": "Filename"
        },
        "node": {
          "type": "string",
          "x-go-name": "Node"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        }
      }
    },
    "BackupDeleteResp": {
      "type": "object",
      "required": [
        "msg"
      ],
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      }
    },
    "BackupFileUploadReqData": {
      "type": "object",
      "required": [
        "filename",
        "file"
      ],
      "properties": {
        "file": {
          "type": "string",
          "x-go-name": "File"
        },
        "filename": {
          "type": "string",
          "x-go-name": "FileName"
        }
      }
    },
    "BackupFileUploadResp": {
      "type": "object",
      "required": [
        "msg"
      ],
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      }
    },
    "BackupImmediatelyResp": {
      "type": "object",
      "required": [
        "msg"
      ],
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      }
    },
    "BackupImportReqData": {
      "type": "object",
      "required": [
        "filename",
        "node"
      ],
      "properties": {
        "filename": {
          "type": "string",
          "x-go-name": "FileName"
        },
        "node": {
          "type": "string",
          "x-go-name": "Node"
        }
      }
    },
    "BackupImportResp": {
      "type": "object",
      "required": [
        "msg"
      ],
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      }
    },
    "BackupListReqData": {
      "type": "object",
      "required": [
        "deploy_ids"
      ],
      "properties": {
        "deploy_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DeployIds"
        }
      }
    },
    "BackupListResp": {
      "type": "object",
      "required": [
        "data",
        "deploy_id_name_map",
        "errors"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ListBackupResponse"
          },
          "x-go-name": "Data",
          "properties": {}
        },
        "deploy_id_name_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "DeployIdNameMap",
          "properties": {}
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        }
      }
    },
    "BackupTask": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseModel"
        },
        {
          "type": "object",
          "required": [
            "deploy_id",
            "up_time"
          ],
          "properties": {
            "deploy_id": {
              "type": "string",
              "x-go-name": "DeployID"
            },
            "schedule_type": {
              "description": "周期任务类型类别，值参见 internal/pkg/backup/constants.go",
              "type": "integer",
              "format": "uint8",
              "default": "0",
              "x-go-name": "ScheduleType"
            },
            "status": {
              "description": "执行状态，值参见 internal/pkg/backup/constants.go",
              "type": "integer",
              "format": "uint8",
              "default": "",
              "x-go-name": "Status"
            },
            "type": {
              "description": "任务类型，值参见 internal/pkg/backup/constants.go",
              "type": "integer",
              "format": "uint8",
              "default": "0",
              "x-go-name": "Type"
            },
            "up_time": {
              "$ref": "#/definitions/Time"
            }
          }
        }
      ]
    },
    "BackupTaskListResp": {
      "type": "object",
      "required": [
        "data",
        "deploy_id_name_map"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BackupTask"
            }
          },
          "x-go-name": "Data",
          "properties": {}
        },
        "deploy_id_name_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "DeployIdNameMap",
          "properties": {}
        }
      }
    },
    "BaseModel": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "created_at": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "updated_at": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "BaseModelUUID": {
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "BatchAddTagResponse": {
      "type": "object",
      "required": [
        "failedServiceNames"
      ],
      "properties": {
        "failedServiceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FailedEdgeServiceNames"
        }
      }
    },
    "BatchCreateResp": {
      "type": "object",
      "required": [
        "batchId",
        "errMap"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        },
        "errMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "ErrMap",
          "properties": {}
        }
      }
    },
    "BatchDeleteResp": {
      "type": "object",
      "required": [
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        }
      }
    },
    "BatchInfo": {
      "type": "object",
      "required": [
        "edgeInfoId",
        "taskId",
        "edgeName",
        "taskProgress",
        "taskStatus"
      ],
      "properties": {
        "edgeInfoId": {
          "type": "string",
          "x-go-name": "EdgeInfoId"
        },
        "edgeName": {
          "type": "string",
          "x-go-name": "EdgeName"
        },
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        },
        "taskProgress": {
          "type": "string",
          "x-go-name": "TaskProgress"
        },
        "taskStatus": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "TaskStatus"
        }
      }
    },
    "BatchInfoResp": {
      "type": "object",
      "required": [
        "data",
        "success",
        "failed",
        "running"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchInfo"
          },
          "x-go-name": "Data"
        },
        "failed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Failed"
        },
        "running": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Running"
        },
        "success": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Success"
        }
      }
    },
    "BatchReqBody": {
      "type": "object",
      "properties": {
        "batchId": {
          "description": "查询某批次，就只填 batchId",
          "type": "string",
          "default": "",
          "x-go-name": "BatchId"
        },
        "edgeIds": {
          "description": "查询指定EdgeId的安装信息， 就将其填入 edgeIds 列表中",
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeIds"
        }
      }
    },
    "BatchRestartResp": {
      "type": "object",
      "required": [
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        }
      }
    },
    "BatchResult": {
      "type": "object",
      "required": [
        "edgeServiceId",
        "edgeServiceName",
        "status",
        "failureReason"
      ],
      "properties": {
        "edgeServiceId": {
          "type": "string",
          "x-go-name": "EdgeServiceID"
        },
        "edgeServiceName": {
          "type": "string",
          "x-go-name": "EdgeServiceName"
        },
        "failureReason": {
          "type": "string",
          "x-go-name": "FailureReason"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        }
      }
    },
    "BatchStartResp": {
      "type": "object",
      "required": [
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        }
      }
    },
    "BatchStopResp": {
      "type": "object",
      "required": [
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        }
      }
    },
    "BatchTagRequestData": {
      "type": "object",
      "required": [
        "serviceIds",
        "tag"
      ],
      "properties": {
        "serviceIds": {
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeServiceIDs",
          "x-go-validate": "@array[1,]"
        },
        "tag": {
          "type": "string",
          "x-go-name": "Tag"
        }
      }
    },
    "BatchUpdateInfoResp": {
      "type": "object",
      "required": [
        "data",
        "success",
        "failed",
        "running"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchResult"
          },
          "x-go-name": "Data"
        },
        "failed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Failed"
        },
        "running": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Running"
        },
        "success": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Success"
        }
      }
    },
    "BatchUpdateResp": {
      "type": "object",
      "required": [
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        }
      }
    },
    "ClusterAgent": {
      "type": "object",
      "required": [
        "id",
        "state",
        "nodeId",
        "version",
        "dashboard",
        "err",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "dashboard": {
          "type": "boolean",
          "x-go-name": "Dashboard"
        },
        "err": {
          "type": "string",
          "x-go-name": "Error"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "nodeId": {
          "type": "string",
          "x-go-name": "NodeID"
        },
        "state": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "State"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "ClusterAgentArchitectureSetupInstructions": {
      "type": "object",
      "required": [
        "architecture",
        "installInstructions",
        "registerInstructions"
      ],
      "properties": {
        "architecture": {
          "type": "string",
          "x-go-name": "Architecture"
        },
        "installInstructions": {
          "type": "string",
          "x-go-name": "InstallInstructions"
        },
        "registerInstructions": {
          "type": "string",
          "x-go-name": "RegisterInstructions"
        }
      }
    },
    "ClusterLicenseItem": {
      "type": "object",
      "required": [
        "orgId",
        "projectId",
        "deployId",
        "name",
        "status",
        "createdAt",
        "updatedAt",
        "connectLimit"
      ],
      "properties": {
        "connectLimit": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ConnectLimit"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "deployId": {
          "type": "string",
          "x-go-name": "DeployID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "status": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "Status"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "ClusterListInfo": {
      "type": "object",
      "required": [
        "total",
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterLicenseItem"
          },
          "x-go-name": "List"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "ConfigData": {
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "name",
        "config"
      ],
      "properties": {
        "config": {
          "description": "注意 Config 的类型",
          "type": "string",
          "x-go-name": "Config"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "CreateAgentBody": {
      "type": "object",
      "required": [
        "agentId",
        "name"
      ],
      "properties": {
        "agentId": {
          "type": "string",
          "x-go-name": "AgentID"
        },
        "desc": {
          "type": "string",
          "default": "",
          "x-go-name": "Desc"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "CreateBackupTaskReqData": {
      "type": "object",
      "required": [
        "deploy_id_list",
        "up_time"
      ],
      "properties": {
        "deploy_id_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DeployIdList"
        },
        "schedule_type": {
          "type": "integer",
          "format": "uint8",
          "default": "0",
          "x-go-name": "ScheduleType"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "default": "0",
          "x-go-name": "Status"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "default": "0",
          "x-go-name": "Type"
        },
        "up_time": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpTime"
        }
      }
    },
    "CreateBackupTaskResp": {
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Error",
          "properties": {}
        }
      }
    },
    "CreateEdgeBody": {
      "type": "object",
      "required": [
        "category",
        "name",
        "endpoint",
        "tag"
      ],
      "properties": {
        "agentId": {
          "type": "string",
          "default": "",
          "x-go-name": "AgentID"
        },
        "auth": {
          "description": "认证类型(0:无认证; 1:basic; 2:jwt)",
          "type": "integer",
          "format": "int8",
          "default": "0",
          "x-go-name": "Auth"
        },
        "broker": {
          "type": "string",
          "default": "",
          "maxLength": 100,
          "minLength": 0,
          "x-go-name": "Broker",
          "x-go-validate": "@string[0,100]"
        },
        "category": {
          "description": "服务类别(1:ekuiper；2:neuron; 3:nanomq; 4:neuronex 99:customize)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "Category"
        },
        "desc": {
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 0,
          "x-go-name": "Desc",
          "x-go-validate": "@string[0,500]"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "key": {
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 0,
          "x-go-name": "Key",
          "x-go-validate": "@string[0,500]"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@regexp[^[一-龥a-zA-Z0-9 -]{1,200}$]"
        },
        "nodeType": {
          "description": "节点类型(3:proxy; 4:direct)",
          "type": "integer",
          "format": "int8",
          "default": "4",
          "x-go-name": "NodeType"
        },
        "scheme": {
          "type": "string",
          "default": "http",
          "x-go-name": "Scheme"
        },
        "secret": {
          "description": "经aes-cbc及base64加密",
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 0,
          "x-go-name": "Secret",
          "x-go-validate": "@string[0,500]"
        },
        "tag": {
          "type": "string",
          "x-go-name": "Tag"
        }
      }
    },
    "CreateEdgeResp": {
      "type": "object",
      "required": [
        "data",
        "tip"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeService"
        },
        "tip": {
          "type": "string",
          "x-go-name": "Tip"
        }
      }
    },
    "CreateIdentityProviderRequestData": {
      "type": "object",
      "required": [
        "type",
        "name",
        "enabled",
        "idPSsoUrl",
        "idpSloUrl",
        "spEntityId",
        "spAcsUrl",
        "spSloUrl",
        "signAuthn",
        "forceAuthn",
        "validateSignature",
        "validatingCertificate"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "forceAuthn": {
          "type": "boolean",
          "x-go-name": "ForceAuthenticate"
        },
        "idPSsoUrl": {
          "description": "saml config",
          "type": "string",
          "default": "",
          "x-go-name": "IdPSSOURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "idpSloUrl": {
          "type": "string",
          "default": "",
          "x-go-name": "IdPSLOURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "name": {
          "type": "string",
          "default": "",
          "maxLength": 50,
          "minLength": 1,
          "x-go-name": "Name",
          "x-go-validate": "@string[1,50]"
        },
        "signAuthn": {
          "type": "boolean",
          "x-go-name": "SignAuthnRequests"
        },
        "spAcsUrl": {
          "type": "string",
          "default": "",
          "x-go-name": "SPACSURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "spEntityId": {
          "type": "string",
          "x-go-name": "SPEntityID"
        },
        "spSloUrl": {
          "type": "string",
          "default": "",
          "x-go-name": "SPSLOURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "type": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Type",
          "x-go-validate": "@string[1,]"
        },
        "validateSignature": {
          "type": "boolean",
          "x-go-name": "ValidateSignature"
        },
        "validatingCertificate": {
          "type": "string",
          "x-go-name": "ValidatingCertificate"
        }
      }
    },
    "CreateIdentityProviderResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "CreateNodeBody": {
      "type": "object",
      "required": [
        "dockerHost",
        "name"
      ],
      "properties": {
        "desc": {
          "type": "string",
          "default": "",
          "x-go-name": "Desc"
        },
        "dockerHost": {
          "description": "Tls        bool   `json:\"tls\"  default:\"false\" `\n//cacertPath, certPath, keyPath\nCacertPath string `json:\"cacertPath\" default:\"\"`\nCertPath   string `json:\"certPath\" default:\"\"`\nKeyPath    string `json:\"keyPath\" default:\"\"`",
          "type": "string",
          "x-go-name": "DockerHost"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "CreateOptions": {
      "type": "object",
      "required": [
        "dockerIaasId",
        "category",
        "serviceName",
        "containerName",
        "disableAuth",
        "image"
      ],
      "properties": {
        "category": {
          "description": "edge service properties\n(1:kuiper；2:neuron; 3:edge; 4:neuronex; 99:customize)",
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Category"
        },
        "cmd": {
          "description": "CMD & Entrypoint",
          "type": "string",
          "default": "",
          "x-go-name": "Cmd"
        },
        "containerName": {
          "type": "string",
          "x-go-name": "ContainerName"
        },
        "desc": {
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 0,
          "x-go-name": "Desc",
          "x-go-validate": "@string[0,500]"
        },
        "disableAuth": {
          "type": "boolean",
          "x-go-name": "DisableAuth"
        },
        "dockerIaasId": {
          "description": "Docker iaas info",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DockerIaasId"
        },
        "entrypoint": {
          "type": "string",
          "default": "",
          "x-go-name": "Entrypoint"
        },
        "environments": {
          "description": "RestartPolicy string            `json:\"restartPolicy,omitempty\"`\nEnvironment",
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "Environments"
        },
        "image": {
          "description": "image pull secret",
          "type": "string",
          "x-go-name": "Image"
        },
        "ports": {
          "description": "port",
          "type": "object",
          "default": "",
          "additionalProperties": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "Ports",
          "properties": {}
        },
        "registryPassword": {
          "type": "string",
          "default": "",
          "x-go-name": "RegistryPassword"
        },
        "registryUsername": {
          "type": "string",
          "default": "",
          "x-go-name": "RegistryUsername"
        },
        "serviceName": {
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "shell": {
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "Shell"
        },
        "tag": {
          "type": "string",
          "default": "",
          "x-go-name": "Tag"
        },
        "volumes": {
          "type": "object",
          "default": "",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Volumes",
          "properties": {}
        }
      }
    },
    "CreateOrgRequestData": {
      "type": "object",
      "required": [
        "name",
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        }
      }
    },
    "CreateOrgResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "CreateProjectRequestData": {
      "type": "object",
      "required": [
        "name",
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        }
      }
    },
    "CreateProjectResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "CreateResp": {
      "type": "object",
      "required": [
        "batchId"
      ],
      "properties": {
        "batchId": {
          "type": "string",
          "x-go-name": "BatchId"
        }
      }
    },
    "CreateTagRequestData": {
      "type": "object",
      "required": [
        "name",
        "serviceIds"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeServiceIDs"
        }
      }
    },
    "CreateTagResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "tagged",
        "failedServiceNames",
        "createdAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "failedServiceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FailedEdgeServiceNames"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "tagged": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TaggedCount"
        }
      }
    },
    "CreateTaskInfo": {
      "type": "object",
      "required": [
        "deploy_id",
        "user_id",
        "type"
      ],
      "properties": {
        "deploy_id": {
          "type": "string",
          "x-go-name": "DeployID"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Type"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      }
    },
    "CreateTaskResp": {
      "type": "object",
      "required": [
        "task_id"
      ],
      "properties": {
        "task_id": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "CreateUserRequestData": {
      "type": "object",
      "required": [
        "name",
        "email",
        "admin",
        "password"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "IsAdmin"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      }
    },
    "CreateUserResponse": {
      "type": "object",
      "required": [
        "id",
        "email",
        "name",
        "admin",
        "createdAt"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "DataBody": {
      "type": "object",
      "required": [
        "data",
        "total"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DockerIaasData"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "DeleteBackupTaskResp": {
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "string",
          "x-go-name": "Error"
        }
      }
    },
    "DeleteBody": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "DeleteKubeConfigResp": {
      "type": "object",
      "properties": {}
    },
    "DeleteOptions": {
      "type": "object",
      "required": [
        "serviceId"
      ],
      "properties": {
        "serviceId": {
          "type": "string",
          "x-go-name": "ServiceId"
        }
      }
    },
    "DeleteResp": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "DeliverBody": {
      "type": "object",
      "required": [
        "title",
        "defaultValue",
        "value",
        "type",
        "function"
      ],
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Default"
        },
        "function": {
          "description": "1-ekuiper,2-neuron",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Function"
        },
        "title": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Title"
        },
        "type": {
          "description": "0-all,1-partial",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Typ"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Value"
        }
      }
    },
    "DeliverResultItem": {
      "allOf": [
        {
          "$ref": "#/definitions/EdgeService"
        },
        {
          "type": "object",
          "required": [
            "tags",
            "taskId",
            "taskStatus",
            "failureError",
            "failureReason"
          ],
          "properties": {
            "failureError": {
              "type": "string",
              "x-go-name": "FailureError"
            },
            "failureReason": {
              "type": "string",
              "x-go-name": "FailureReason"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "Tags"
            },
            "taskId": {
              "type": "string",
              "x-go-name": "TaskID"
            },
            "taskStatus": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "TaskStatus"
            }
          }
        }
      ]
    },
    "DeliverResultResp": {
      "type": "object",
      "required": [
        "data",
        "successCount",
        "failureCount"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliverResultItem"
          },
          "x-go-name": "Data"
        },
        "failureCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailureCount"
        },
        "successCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SuccessCount"
        }
      }
    },
    "DeployData": {
      "type": "object",
      "required": [
        "id",
        "type",
        "deployName",
        "orgId",
        "projectId",
        "status",
        "creator",
        "desc",
        "upTime",
        "createdAt",
        "updatedAt",
        "expectReplicas",
        "replicas",
        "taskId",
        "image",
        "network",
        "namespace",
        "resourceLimit",
        "connectLimit",
        "version",
        "registrationToken",
        "dashboardEnabled"
      ],
      "properties": {
        "connectLimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectLimit"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "creator": {
          "type": "string",
          "x-go-name": "Creator"
        },
        "dashboardEnabled": {
          "type": "boolean",
          "x-go-name": "DashboardEnabled"
        },
        "deployName": {
          "type": "string",
          "x-go-name": "DeployName"
        },
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "expectReplicas": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ExpectReplicas"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "network": {
          "type": "string",
          "x-go-name": "Network"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "registrationToken": {
          "type": "string",
          "x-go-name": "RegistrationToken"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas"
        },
        "resourceLimit": {
          "type": "string",
          "x-go-name": "ResourceLimit"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        },
        "taskId": {
          "description": "BC创建的集群",
          "type": "string",
          "x-go-name": "TaskID"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Type"
        },
        "upTime": {
          "$ref": "#/definitions/Time"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        },
        "version": {
          "description": "纳管集群",
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "DockerIaas": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseModel"
        },
        {
          "type": "object",
          "required": [
            "orgId",
            "projectId",
            "dockerHost",
            "name",
            "desc"
          ],
          "properties": {
            "desc": {
              "type": "string",
              "x-go-name": "Desc"
            },
            "dockerHost": {
              "description": "Tls        bool   `json:\"tls\"`\n//cacertPath, certPath, keyPath\nCacertPath string `json:\"cacertPath\"`\nCertPath   string `json:\"certPath\"`\nKeyPath    string `json:\"keyPath\"`",
              "type": "string",
              "x-go-name": "DockerHost"
            },
            "name": {
              "type": "string",
              "x-go-name": "Name"
            },
            "orgId": {
              "description": "docker properties",
              "type": "string",
              "x-go-name": "OrgID"
            },
            "projectId": {
              "type": "string",
              "x-go-name": "ProjectID"
            }
          }
        }
      ]
    },
    "DockerIaasData": {
      "allOf": [
        {
          "$ref": "#/definitions/DockerIaas"
        },
        {
          "type": "object",
          "required": [
            "edgeserviceNum"
          ],
          "properties": {
            "edgeserviceNum": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "EdgeserviceNum"
            }
          }
        }
      ]
    },
    "DockerInfo": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "cacertBytes": {
          "description": "cacertPath, certPath, keyPath",
          "type": "array",
          "default": "",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "CacertBytes"
        },
        "certBytes": {
          "type": "array",
          "default": "",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "CertBytes"
        },
        "keyBytes": {
          "type": "array",
          "default": "",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "KeyBytes"
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "tls": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "Tls"
        }
      }
    },
    "DockerInfoResponse": {
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/DockerInfo"
        }
      }
    },
    "DockerRegistryConfigItemDTO": {
      "type": "object",
      "required": [
        "url",
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      }
    },
    "EMQXEENode": {
      "type": "object",
      "required": [
        "node",
        "version",
        "status",
        "uptime"
      ],
      "properties": {
        "node": {
          "type": "string",
          "x-go-name": "NodeID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "uptime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpTime"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "EcpVersion": {
      "type": "object",
      "required": [
        "version",
        "commit",
        "created"
      ],
      "properties": {
        "commit": {
          "type": "string",
          "x-go-name": "Commit"
        },
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "EdgeCreateReq": {
      "type": "object",
      "required": [
        "edgeName",
        "tag"
      ],
      "properties": {
        "desc": {
          "type": "string",
          "default": "",
          "x-go-name": "Desc"
        },
        "disableAuth": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "DisableAuth"
        },
        "edgeName": {
          "type": "string",
          "default": "",
          "x-go-name": "EdgeName",
          "x-go-validate": "@regexp[^[一-龥_a-zA-Z0-9 -]{1,200}$]"
        },
        "kuiperImage": {
          "type": "string",
          "default": "",
          "x-go-name": "KuiperImage"
        },
        "neuronImage": {
          "type": "string",
          "default": "",
          "x-go-name": "NeuronImage"
        },
        "tag": {
          "type": "string",
          "x-go-name": "Tag"
        }
      }
    },
    "EdgeInfo": {
      "type": "object",
      "required": [
        "id",
        "edgeName",
        "orgId",
        "projectId",
        "namespace",
        "neuronImage",
        "kuiperImage",
        "taskId",
        "batch_id",
        "type",
        "desc",
        "creator",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "batch_id": {
          "description": "用于批量安装时， 表示批次",
          "type": "string",
          "x-go-name": "BatchID"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "creator": {
          "type": "string",
          "x-go-name": "Creator"
        },
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "edgeName": {
          "type": "string",
          "x-go-name": "EdgeName"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "kuiperImage": {
          "type": "string",
          "x-go-name": "KuiperImage"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "neuronImage": {
          "type": "string",
          "x-go-name": "NeuronImage"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "taskId": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Type",
          "x-go-named": "github.com/emqx/EMQX-Business-Critical/model/entity.EdgeType"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "EdgeLicenseItem": {
      "type": "object",
      "required": [
        "orgId",
        "projectId",
        "serviceId",
        "category",
        "name",
        "status",
        "tags",
        "createdAt",
        "updatedAt",
        "tagLimit"
      ],
      "properties": {
        "category": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "Category"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "serviceId": {
          "type": "string",
          "x-go-name": "ServiceID"
        },
        "status": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "Status"
        },
        "tagLimit": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TagLimit"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "EdgeListInfo": {
      "type": "object",
      "required": [
        "total",
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeLicenseItem"
          },
          "x-go-name": "List"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "EdgeService": {
      "type": "object",
      "required": [
        "orgId",
        "projectId",
        "serviceId",
        "category",
        "name",
        "desc",
        "nodeType",
        "endpoint",
        "status",
        "broker",
        "autoRecover",
        "autoStart",
        "apiVersion",
        "auth",
        "key",
        "secret",
        "createdAt",
        "updatedAt",
        "scheme",
        "agentId",
        "edgeInfoId",
        "dockerDeployId",
        "allocatedTag"
      ],
      "properties": {
        "agentId": {
          "type": "string",
          "x-go-name": "AgentID"
        },
        "allocatedTag": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "AllocatedTag"
        },
        "apiVersion": {
          "description": "边缘服务版本",
          "type": "string",
          "x-go-name": "ApiVersion"
        },
        "auth": {
          "description": "认证类型(0:无认证; 1:basic; 2:jwt)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "Auth"
        },
        "autoRecover": {
          "description": "是否支持自动恢复(1:支持；2:不支持)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "AutoRecover"
        },
        "autoStart": {
          "description": "是否支持自动启动(1:支持；2:不支持)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "AutoStart"
        },
        "broker": {
          "description": "broker",
          "type": "string",
          "x-go-name": "Broker"
        },
        "category": {
          "description": "服务类别(1:ekuiper；2:neuron; 3:nanomq; 99:customize)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "Category"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "dockerDeployId": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DockerDeployId"
        },
        "edgeInfoId": {
          "type": "string",
          "x-go-name": "EdgeInfoId"
        },
        "endpoint": {
          "description": "边缘地址(不带协议头)",
          "type": "string",
          "x-go-name": "EndPoint"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nodeType": {
          "description": "节点类型(3:proxy; 4:direct)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "NodeType"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "scheme": {
          "type": "string",
          "x-go-name": "Scheme"
        },
        "secret": {
          "description": "经aes-cbc及base64加密后入库",
          "type": "string",
          "x-go-name": "Secret"
        },
        "serviceId": {
          "type": "string",
          "x-go-name": "ServiceID"
        },
        "status": {
          "description": "状态(1:运行；2:停止；3:冻结状态更新)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "Status"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "EdgeServiceInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/EdgeService"
        },
        {
          "type": "object",
          "required": [
            "tags"
          ],
          "properties": {
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "Tags"
            }
          }
        }
      ]
    },
    "EdgeServiceItem": {
      "allOf": [
        {
          "$ref": "#/definitions/EdgeService"
        },
        {
          "type": "object",
          "required": [
            "tags"
          ],
          "properties": {
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "Tags"
            }
          }
        }
      ]
    },
    "EdgeServiceLicenseConfigData": {
      "type": "object",
      "properties": {
        "maxUnmanagedDays": {
          "type": "integer",
          "format": "int64",
          "default": "7",
          "x-go-name": "MaxUnmanagedDays"
        }
      }
    },
    "EdgeStats": {
      "type": "object",
      "required": [
        "neuron",
        "ekuiper"
      ],
      "properties": {
        "ekuiper": {
          "$ref": "#/definitions/EkuiperStats"
        },
        "neuron": {
          "$ref": "#/definitions/NeuronStats"
        }
      }
    },
    "EdgeUpdateReq": {
      "type": "object",
      "required": [
        "edgeId"
      ],
      "properties": {
        "edgeId": {
          "type": "string",
          "x-go-name": "EdgeId"
        },
        "kuiperImage": {
          "type": "string",
          "default": "",
          "x-go-name": "KuiperImage"
        },
        "neuronImage": {
          "type": "string",
          "default": "",
          "x-go-name": "NeuronImage"
        }
      }
    },
    "EdgeserviceDefaultConfigData": {
      "type": "object",
      "required": [
        "catagory"
      ],
      "properties": {
        "catagory": {
          "type": "integer",
          "format": "uint8",
          "default": "",
          "x-go-name": "Catagory",
          "x-go-validate": "uniqueIndex"
        },
        "environments": {
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "Environments"
        },
        "ports": {
          "type": "object",
          "default": "",
          "additionalProperties": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "Ports",
          "properties": {}
        },
        "volumes": {
          "type": "object",
          "default": "",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Volumes",
          "properties": {}
        }
      }
    },
    "EdgeserviceDefaultConfigResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeserviceDefaultConfigData"
          },
          "x-go-name": "Data"
        }
      }
    },
    "EdgeserviceQuota": {
      "type": "object",
      "required": [
        "neuronCPURequest",
        "kuiperCPURequest",
        "neuronMEMRequest",
        "kuiperMEMRequest"
      ],
      "properties": {
        "kuiperCPULimit": {
          "type": "string",
          "default": "",
          "x-go-name": "KuiperCPULimit"
        },
        "kuiperCPURequest": {
          "type": "string",
          "x-go-name": "KuiperCPURequest"
        },
        "kuiperMEMLimit": {
          "type": "string",
          "default": "",
          "x-go-name": "KuiperMEMLimit"
        },
        "kuiperMEMRequest": {
          "type": "string",
          "x-go-name": "KuiperMEMRequest"
        },
        "neuronCPULimit": {
          "type": "string",
          "default": "",
          "x-go-name": "NeuronCPULimit"
        },
        "neuronCPURequest": {
          "type": "string",
          "x-go-name": "NeuronCPURequest"
        },
        "neuronMEMLimit": {
          "type": "string",
          "default": "",
          "x-go-name": "NeuronMEMLimit"
        },
        "neuronMEMRequest": {
          "type": "string",
          "x-go-name": "NeuronMEMRequest"
        }
      }
    },
    "EdgeserviceQuotaResponse": {
      "type": "object",
      "required": [
        "quota",
        "storageClass"
      ],
      "properties": {
        "quota": {
          "$ref": "#/definitions/EdgeserviceQuota"
        },
        "storageClass": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageClass"
          },
          "x-go-name": "StorageClass"
        }
      }
    },
    "EkuiperIOStats": {
      "type": "object",
      "required": [
        "total",
        "tps"
      ],
      "properties": {
        "total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        },
        "tps": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Tps"
        }
      }
    },
    "EkuiperStats": {
      "type": "object",
      "required": [
        "total",
        "watched",
        "rules",
        "in",
        "out"
      ],
      "properties": {
        "in": {
          "$ref": "#/definitions/EkuiperIOStats"
        },
        "out": {
          "$ref": "#/definitions/EkuiperIOStats"
        },
        "rules": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Rules"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        },
        "watched": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Watched"
        }
      }
    },
    "ElasticsearchConfig": {
      "type": "object",
      "required": [
        "urls",
        "username",
        "password",
        "indexName"
      ],
      "properties": {
        "indexName": {
          "type": "string",
          "x-go-name": "IndexName"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "URLs"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      }
    },
    "EmqxCreateResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DeployData"
        }
      }
    },
    "EmqxCrtUpdateResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxCrtUpdateRespData"
        }
      }
    },
    "EmqxCrtUpdateRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxDeleteResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxDeleteRespData"
        }
      }
    },
    "EmqxDeleteRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxLicUpdateResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxLicUpdateRespData"
        }
      }
    },
    "EmqxLicUpdateRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxNetUpdateResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxNetUpdateRespData"
        }
      }
    },
    "EmqxNetUpdateRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxProxyReqBody": {
      "type": "object",
      "required": [
        "endPoint"
      ],
      "properties": {
        "endPoint": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "EndPoint",
          "x-go-validate": "@string[1,]"
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "default": "300",
          "minimum": 1,
          "x-go-name": "Timeout",
          "x-go-validate": "@int[1,]"
        }
      }
    },
    "EmqxProxyResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxProxyRespData"
        }
      }
    },
    "EmqxProxyRespData": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        }
      }
    },
    "EmqxQuota": {
      "type": "object",
      "required": [
        "name",
        "quota"
      ],
      "properties": {
        "default": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "Default"
        },
        "description": {
          "type": "string",
          "default": "",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "uniqueIndex"
        },
        "quota": {
          "$ref": "#/definitions/KubeQuotaList"
        }
      }
    },
    "EmqxQuotaReq": {
      "type": "object",
      "required": [
        "quotas",
        "storageClass"
      ],
      "properties": {
        "quotas": {
          "$ref": "#/definitions/EmqxQuotas"
        },
        "storageClass": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageClass"
          },
          "x-go-name": "StorageClass"
        }
      }
    },
    "EmqxQuotaResp": {
      "type": "object",
      "required": [
        "quotas",
        "storage_class_name"
      ],
      "properties": {
        "quotas": {
          "$ref": "#/definitions/EmqxQuotas"
        },
        "storage_class_name": {
          "type": "string",
          "x-go-name": "StorageClassName"
        },
        "storage_class_size": {
          "type": "string",
          "default": "2048",
          "x-go-name": "StorageClassSize"
        }
      }
    },
    "EmqxQuotas": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EmqxQuota"
      }
    },
    "EmqxRepairResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DeployData"
        }
      }
    },
    "EmqxScaleResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxScaleRespData"
        }
      }
    },
    "EmqxScaleRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxStartResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DeployData"
        }
      }
    },
    "EmqxStatusData": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        }
      }
    },
    "EmqxStatusResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxStatusData"
        }
      }
    },
    "EmqxStopResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxStopRespData"
        }
      }
    },
    "EmqxStopRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxTotalQuota": {
      "type": "object",
      "required": [
        "total_cpu_quota",
        "total_memory_quota"
      ],
      "properties": {
        "total_cpu_quota": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalCpuQuota"
        },
        "total_memory_quota": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalMemQuota"
        }
      }
    },
    "EmqxUpdateDynamicLicenseReqBody": {
      "type": "object",
      "required": [
        "connectLimit"
      ],
      "properties": {
        "connectLimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectLimit"
        }
      }
    },
    "EmqxUpdateDynamicLicenseResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxUpdateDynamicLicenseRespData"
        }
      }
    },
    "EmqxUpdateDynamicLicenseRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxUpdateImageReqBody": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Image",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "EmqxUpdateImageResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxUpdateImageRespData"
        }
      }
    },
    "EmqxUpdateImageRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EmqxVerticalScaleResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EmqxVerticalScaleRespData"
        }
      }
    },
    "EmqxVerticalScaleRespData": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "EnableUserRequestData": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        }
      }
    },
    "EsTargetData": {
      "type": "object",
      "properties": {
        "password": {
          "description": "Index    string `json:\"index\"`",
          "type": "string",
          "default": "",
          "x-go-name": "Password"
        },
        "type": {
          "description": "Type value:  \"external\" or \"internal\", internal equals close this function.",
          "type": "string",
          "default": "internal",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "default": "",
          "x-go-name": "Url"
        },
        "username": {
          "type": "string",
          "default": "",
          "x-go-name": "Username"
        }
      }
    },
    "GetAlarmStatusResponse": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        }
      }
    },
    "GetAlarmsByPageItem": {
      "type": "object",
      "required": [
        "id",
        "name",
        "message",
        "resourceId",
        "resourceName",
        "resourceType",
        "severity",
        "startsAt",
        "endsAt"
      ],
      "properties": {
        "endsAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceId": {
          "type": "string",
          "x-go-name": "ResourceID"
        },
        "resourceName": {
          "type": "string",
          "x-go-name": "ResourceName"
        },
        "resourceType": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "ResourceType"
        },
        "severity": {
          "type": "integer",
          "format": "int8",
          "x-go-name": "Severity"
        },
        "startsAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "GetAlarmsByPageResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetAlarmsByPageItem"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetAntaresLogListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/PageResponse"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StandardLog"
              },
              "x-go-name": "Data"
            }
          }
        }
      ]
    },
    "GetClusterAgentSetupInstructionsResponse": {
      "type": "object",
      "required": [
        "architectures"
      ],
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterAgentArchitectureSetupInstructions"
          },
          "x-go-name": "Architectures"
        }
      }
    },
    "GetClusterAgentsResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterAgent"
          },
          "x-go-name": "Data"
        }
      }
    },
    "GetClusterLicMonitorDataResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ClusterListInfo"
        }
      }
    },
    "GetCurrentAlarmsCountResponse": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        }
      }
    },
    "GetDeployListResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/InfoList"
        }
      }
    },
    "GetDeployMonitorDataResp": {
      "type": "object",
      "required": [
        "status",
        "nodeCount",
        "connectCount",
        "connectQuota",
        "topicCount",
        "in",
        "out",
        "progress",
        "image",
        "expectReplicas",
        "resourceLimit",
        "version"
      ],
      "properties": {
        "connectCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectCount"
        },
        "connectQuota": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectQuota"
        },
        "expectReplicas": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ExpectReplicas"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "in": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "In"
        },
        "nodeCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "NodeCount"
        },
        "out": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Out"
        },
        "progress": {
          "description": "BC 集群",
          "type": "string",
          "x-go-name": "Progress"
        },
        "resourceLimit": {
          "type": "string",
          "x-go-name": "ResourceLimit"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        },
        "topicCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TopicCount"
        },
        "version": {
          "description": "纳管集群",
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "GetDeployResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DeployData"
        }
      }
    },
    "GetEdgeLicMonitorDataResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeListInfo"
        }
      }
    },
    "GetEdgeLogListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/PageResponse"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StandardLog"
              },
              "x-go-name": "Data"
            }
          }
        }
      ]
    },
    "GetEdgeServiceListResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ListInfo"
        }
      }
    },
    "GetEdgeServiceNamesItem": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "GetEdgeServiceNamesResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetEdgeServiceNamesItem"
          },
          "x-go-name": "Data"
        }
      }
    },
    "GetEdgeServiceResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeServiceInfo"
        }
      }
    },
    "GetGlobalConfigurationResponse": {
      "type": "object",
      "required": [
        "name",
        "level",
        "configuration"
      ],
      "properties": {
        "configuration": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Configuration",
          "properties": {}
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "GetIdentityProvidersResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderItem"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetKubeConfigResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigData"
        }
      }
    },
    "GetLicenseMonitorDataResp": {
      "type": "object",
      "required": [
        "connectionQuota",
        "connectionConsumption",
        "clusterQuota",
        "clusterConsumptions",
        "edgeServiceQuota",
        "edgeServiceConsumption",
        "maxSingleClusterConnectionCount",
        "tagQuota",
        "tagConsumption"
      ],
      "properties": {
        "clusterConsumptions": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ClusterConsumptions"
        },
        "clusterQuota": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ClusterQuota"
        },
        "connectionConsumption": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ConnectionConsumption"
        },
        "connectionQuota": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ConnectionQuota"
        },
        "edgeServiceConsumption": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "EdgeServiceConsumption"
        },
        "edgeServiceQuota": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "EdgeServiceQuota"
        },
        "maxSingleClusterConnectionCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxSingleClusterConnectionCount"
        },
        "tagConsumption": {
          "description": "MinSingleEdgeServiceTagLimit    uint32 `json:\"minSingleEdgeServiceTagCount\"`",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TagConsumption"
        },
        "tagQuota": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TagQuota"
        }
      }
    },
    "GetLicenseResponse": {
      "type": "object",
      "required": [
        "type",
        "customerName",
        "customerContact",
        "startDate",
        "expiredDate",
        "expired",
        "totalClusterConnectionCount",
        "maxSingleClusterConnectionCount",
        "maxEmqxClusterCount",
        "maxEdgeServiceCount",
        "maxTagCount"
      ],
      "properties": {
        "customerContact": {
          "type": "string",
          "x-go-name": "CustomerContact"
        },
        "customerName": {
          "type": "string",
          "x-go-name": "CustomerName"
        },
        "expired": {
          "type": "boolean",
          "x-go-name": "Expired"
        },
        "expiredDate": {
          "type": "string",
          "x-go-name": "ExpiredDate"
        },
        "maxEdgeServiceCount": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxEdgeServiceCount"
        },
        "maxEmqxClusterCount": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxEMQXClusterCount"
        },
        "maxSingleClusterConnectionCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxSingleClusterConnectionCount"
        },
        "maxTagCount": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxTagCount"
        },
        "startDate": {
          "type": "string",
          "x-go-name": "StartDate"
        },
        "totalClusterConnectionCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalClusterConnectionCount"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "GetListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/PageResponse"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StandardLog"
              },
              "x-go-name": "Data"
            }
          }
        }
      ]
    },
    "GetLogListResp": {
      "allOf": [
        {
          "$ref": "#/definitions/PageResponse"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StandardLog"
              },
              "x-go-name": "Data"
            }
          }
        }
      ]
    },
    "GetNameIdMapResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-go-name": "Data",
          "properties": {}
        }
      }
    },
    "GetNodeServicesResponse": {
      "type": "object",
      "required": [
        "data",
        "total"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeServiceItem"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetOperationListResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationLog"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetOrgConfigurationResponse": {
      "type": "object",
      "required": [
        "name",
        "level",
        "configuration"
      ],
      "properties": {
        "configuration": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Configuration",
          "properties": {}
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "GetOrgNamesResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgName"
          },
          "x-go-name": "Data"
        }
      }
    },
    "GetOrgProjectsByPageResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetOrgResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberInfo"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "GetOrganizationsByPageResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetProfileResponse": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "mobile",
        "admin",
        "avatar"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "avatar": {
          "type": "string",
          "x-go-name": "Avatar"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        }
      }
    },
    "GetProjectConfigurationResponse": {
      "type": "object",
      "required": [
        "name",
        "level",
        "configuration"
      ],
      "properties": {
        "configuration": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Configuration",
          "properties": {}
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "GetProjectMonitorDataResp": {
      "allOf": [
        {
          "$ref": "#/definitions/PageResponse"
        },
        {
          "type": "object",
          "required": [
            "clusterCount",
            "userCount",
            "instance"
          ],
          "properties": {
            "clusterCount": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "ClusterCount"
            },
            "instance": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instance"
              },
              "x-go-name": "Instances"
            },
            "userCount": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "UserCount"
            }
          }
        }
      ]
    },
    "GetProjectNamesResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectName"
          },
          "x-go-name": "Data"
        }
      }
    },
    "GetProjectResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "creator",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "creator": {
          "type": "string",
          "x-go-name": "Creator"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "GetProjectsByPageResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgProjectInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeInfo"
        }
      }
    },
    "GetSAMLLoginRequestResponse": {
      "type": "object",
      "required": [
        "method",
        "data"
      ],
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data"
        },
        "method": {
          "type": "string",
          "x-go-name": "Method"
        }
      }
    },
    "GetSSOProvidersResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SSOProvider"
          },
          "x-go-name": "Data"
        }
      }
    },
    "GetSupportedLanguagesResponse": {
      "type": "object",
      "required": [
        "languages"
      ],
      "properties": {
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedLanguageItem"
          },
          "x-go-name": "Languages"
        }
      }
    },
    "GetTagUsedResp": {
      "type": "object",
      "required": [
        "tagUsed"
      ],
      "properties": {
        "tagUsed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TagUsed"
        }
      }
    },
    "GetTaggedEdgeServiceItem": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "GetTaggedEdgeServicesResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetTaggedEdgeServiceItem"
          },
          "x-go-name": "Data"
        }
      }
    },
    "GetTagsByPageResponse": {
      "type": "object",
      "required": [
        "data",
        "total"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetTagsByPageTagItem"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetTagsByPageTagItem": {
      "type": "object",
      "required": [
        "id",
        "name",
        "tagged",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "tagged": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Tagged"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "GetUserByUserIDResponse": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "mobile",
        "verified",
        "enabled",
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "IsAdministrator"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        },
        "verified": {
          "type": "boolean",
          "x-go-name": "Verified"
        }
      }
    },
    "GetUserListResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "GetUserRolesResponse": {
      "type": "object",
      "required": [
        "roles",
        "orgs"
      ],
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserOrgRole"
          },
          "x-go-name": "Orgs"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        }
      }
    },
    "GlobalAlarmConfigResponse": {
      "type": "object",
      "required": [
        "webhook"
      ],
      "properties": {
        "webhook": {
          "$ref": "#/definitions/GlobalAlarmConfigWebhookData"
        }
      }
    },
    "GlobalAlarmConfigWebhookData": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "x-go-name": "Template"
        }
      }
    },
    "H": {
      "type": "object",
      "additionalProperties": {},
      "properties": {}
    },
    "IaasConfigData": {
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "name",
        "config"
      ],
      "properties": {
        "config": {
          "description": "注意 Config 的类型， []byte -> string",
          "type": "string",
          "x-go-name": "Config"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "IdentityProviderDetail": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "enabled",
        "createdAt",
        "updatedAt",
        "idpSsoUrl",
        "idpSloUrl",
        "spEntityId",
        "spAcsUrl",
        "spSloUrl",
        "signAuthn",
        "forceAuthn",
        "validateSignature",
        "validatingCertificate"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "forceAuthn": {
          "type": "boolean",
          "x-go-name": "ForceAuthenticate"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "idpSloUrl": {
          "type": "string",
          "x-go-name": "IdPSLOURL"
        },
        "idpSsoUrl": {
          "description": "saml config",
          "type": "string",
          "x-go-name": "IdPSSOURL"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "signAuthn": {
          "type": "boolean",
          "x-go-name": "SignAuthnRequests"
        },
        "spAcsUrl": {
          "type": "string",
          "x-go-name": "SPACSURL"
        },
        "spEntityId": {
          "type": "string",
          "x-go-name": "SPEntityID"
        },
        "spSloUrl": {
          "type": "string",
          "x-go-name": "SPSLOURL"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        },
        "validateSignature": {
          "type": "boolean",
          "x-go-name": "ValidateSignature"
        },
        "validatingCertificate": {
          "type": "string",
          "x-go-name": "ValidatingCertificate"
        }
      }
    },
    "IdentityProviderItem": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "enabled",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "ImageVersion": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "default": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "IsDefault"
        },
        "image": {
          "type": "string",
          "default": "",
          "x-go-name": "Image",
          "x-go-validate": "uniqueIndex"
        }
      }
    },
    "ImportEdgeResp": {
      "type": "object",
      "required": [
        "fails"
      ],
      "properties": {
        "fails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/failVal"
          },
          "x-go-name": "Fails"
        }
      }
    },
    "ImportParamResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Data"
        }
      }
    },
    "ImportResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Data"
        }
      }
    },
    "ImportTemplate": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "x-go-name": "Template"
        }
      }
    },
    "InfoList": {
      "type": "object",
      "required": [
        "total",
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployData"
          },
          "x-go-name": "List"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "Instance": {
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "name",
        "type",
        "upTime",
        "nodeCount",
        "status",
        "progress",
        "network",
        "image",
        "in",
        "out",
        "connectCount",
        "connectQuota",
        "topicCount",
        "expectReplicas",
        "resourceLimit",
        "version",
        "agent"
      ],
      "properties": {
        "agent": {
          "$ref": "#/definitions/AgentInfo"
        },
        "connectCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectCount"
        },
        "connectQuota": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectQuota"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "expectReplicas": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ExpectReplicas"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "in": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "In"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "network": {
          "type": "string",
          "x-go-name": "Network"
        },
        "nodeCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "NodeCount"
        },
        "out": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Out"
        },
        "progress": {
          "type": "string",
          "x-go-name": "Progress"
        },
        "resourceLimit": {
          "type": "string",
          "x-go-name": "ResourceLimit"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        },
        "topicCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TopicCount"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Type"
        },
        "upTime": {
          "$ref": "#/definitions/Time"
        },
        "version": {
          "description": "集群纳管",
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "InviteUserByEmailRequestData": {
      "type": "object",
      "required": [
        "emails",
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "IsAdministrator"
        },
        "emails": {
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails",
          "x-go-validate": "@array[1,]:@email"
        }
      }
    },
    "IsEmailAlreadyInvitedResponse": {
      "type": "object",
      "required": [
        "invited"
      ],
      "properties": {
        "invited": {
          "type": "boolean",
          "x-go-name": "Invited"
        }
      }
    },
    "JwtResp": {
      "type": "object",
      "required": [
        "keyFileName",
        "data"
      ],
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data"
        },
        "keyFileName": {
          "type": "string",
          "x-go-name": "KeyFileName"
        }
      }
    },
    "KV": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "properties": {}
    },
    "KubeQuota": {
      "type": "object",
      "required": [
        "cpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "$ref": "#/definitions/KubeQuotaValue"
        },
        "memory": {
          "$ref": "#/definitions/KubeQuotaValue"
        }
      }
    },
    "KubeQuotaList": {
      "type": "object",
      "required": [
        "emqx",
        "telegraf"
      ],
      "properties": {
        "emqx": {
          "$ref": "#/definitions/KubeQuota"
        },
        "telegraf": {
          "$ref": "#/definitions/KubeQuota"
        }
      }
    },
    "KubeQuotaValue": {
      "type": "object",
      "required": [
        "request",
        "limit"
      ],
      "properties": {
        "limit": {
          "type": "string",
          "x-go-name": "Limit"
        },
        "request": {
          "type": "string",
          "x-go-name": "Request"
        }
      }
    },
    "KuiperQuota": {
      "type": "object",
      "required": [
        "kuiperCPURequest",
        "kuiperMEMRequest",
        "storageClass"
      ],
      "properties": {
        "kuiperCPULimit": {
          "type": "string",
          "default": "",
          "x-go-name": "KuiperCPULimit"
        },
        "kuiperCPURequest": {
          "type": "string",
          "x-go-name": "KuiperCPURequest"
        },
        "kuiperMEMLimit": {
          "type": "string",
          "default": "",
          "x-go-name": "KuiperMEMLimit"
        },
        "kuiperMEMRequest": {
          "type": "string",
          "x-go-name": "KuiperMEMRequest"
        },
        "storageClass": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageClass"
          },
          "x-go-name": "StorageClass"
        }
      }
    },
    "KuiperVersion": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "default": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "IsDefault"
        },
        "image": {
          "type": "string",
          "default": "",
          "x-go-name": "Image",
          "x-go-validate": "uniqueIndex"
        }
      }
    },
    "LbAnnotation": {
      "type": "object",
      "required": [
        "name",
        "max_connection"
      ],
      "properties": {
        "annotations": {
          "type": "string",
          "default": "{}",
          "x-go-name": "Annotations"
        },
        "desc": {
          "type": "string",
          "default": "",
          "x-go-name": "Desc"
        },
        "is_enabled": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "IsEnabled"
        },
        "max_connection": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxConnection"
        },
        "min_connection": {
          "type": "integer",
          "format": "uint64",
          "default": "1",
          "x-go-name": "MinConnection"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "uniqueIndex"
        }
      }
    },
    "ListAgentResp": {
      "allOf": [
        {
          "$ref": "#/definitions/PageResponse"
        },
        {
          "type": "object",
          "required": [
            "agents"
          ],
          "properties": {
            "agents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent"
              },
              "x-go-name": "Agents"
            }
          }
        }
      ]
    },
    "ListBackupResponse": {
      "type": "object",
      "required": [
        "code",
        "data"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Backup"
          },
          "x-go-name": "Data"
        }
      }
    },
    "ListData": {
      "type": "object",
      "required": [
        "total",
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeInfo"
          },
          "x-go-name": "List"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "ListInfo": {
      "type": "object",
      "required": [
        "total",
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeServiceItem"
          },
          "x-go-name": "List"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "ListKubeConfigResp": {
      "type": "object",
      "required": [
        "total",
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigData"
          },
          "x-go-name": "List"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "ListNodeResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DataBody"
        }
      }
    },
    "ListResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ListData"
        }
      }
    },
    "LoginRequestData": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Password",
          "x-go-validate": "@string[1,]"
        },
        "username": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Username",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "MQTTConfig": {
      "type": "object",
      "required": [
        "server",
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "server": {
          "type": "string",
          "x-go-name": "Server"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      }
    },
    "ManifestLicense": {
      "type": "object",
      "required": [
        "type",
        "expired",
        "expiredAt"
      ],
      "properties": {
        "expired": {
          "type": "boolean",
          "x-go-name": "Expired"
        },
        "expiredAt": {
          "type": "string",
          "x-go-name": "ExpiredAt"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "ManifestModuleCluster": {
      "type": "object",
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean",
          "x-go-name": "Enable"
        }
      }
    },
    "ManifestModuleEdgeService": {
      "type": "object",
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean",
          "x-go-name": "Enable"
        }
      }
    },
    "ManifestModules": {
      "type": "object",
      "required": [
        "cluster",
        "edgeservice"
      ],
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ManifestModuleCluster"
        },
        "edgeservice": {
          "$ref": "#/definitions/ManifestModuleEdgeService"
        }
      }
    },
    "ManifestResponse": {
      "type": "object",
      "required": [
        "version",
        "modules",
        "license",
        "userManagement",
        "uiCustomization",
        "system"
      ],
      "properties": {
        "license": {
          "$ref": "#/definitions/ManifestLicense"
        },
        "modules": {
          "$ref": "#/definitions/ManifestModules"
        },
        "system": {
          "$ref": "#/definitions/ManifestSystem"
        },
        "uiCustomization": {
          "$ref": "#/definitions/ManifestUICustomization"
        },
        "userManagement": {
          "$ref": "#/definitions/ManifestUserManagement"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      }
    },
    "ManifestSystem": {
      "type": "object",
      "required": [
        "language",
        "mode"
      ],
      "properties": {
        "language": {
          "type": "string",
          "x-go-name": "Language"
        },
        "mode": {
          "type": "string",
          "x-go-name": "Mode"
        }
      }
    },
    "ManifestUICustomization": {
      "type": "object",
      "required": [
        "name",
        "logo",
        "loginBg"
      ],
      "properties": {
        "loginBg": {
          "type": "string",
          "x-go-name": "LoginBackgroundImage"
        },
        "logo": {
          "type": "string",
          "x-go-name": "Logo"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "ManifestUserManagement": {
      "type": "object",
      "required": [
        "verificationMode"
      ],
      "properties": {
        "verificationMode": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VerificationMode"
        }
      }
    },
    "MemberInfo": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "roleIds",
        "enabled"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "x-go-name": "Roles"
        },
        "userId": {
          "type": "string",
          "x-go-name": "ID"
        }
      }
    },
    "MetricGatewayData": {
      "type": "object",
      "required": [
        "url",
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "type": {
          "type": "string",
          "default": "bc",
          "x-go-name": "Type",
          "x-go-validate": "uniqueIndex"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      }
    },
    "MonitorScraperConfig": {
      "type": "object",
      "required": [
        "emqx",
        "neuron",
        "neuronProxy",
        "ekuiper",
        "ekuiperProxy",
        "healthCheckInterval"
      ],
      "properties": {
        "ekuiper": {
          "$ref": "#/definitions/ScraperConfig"
        },
        "ekuiperProxy": {
          "$ref": "#/definitions/ScraperConfig"
        },
        "emqx": {
          "$ref": "#/definitions/ScraperConfig"
        },
        "healthCheckInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HealthCheckInterval",
          "x-go-named": "github.com/emqx/EMQX-Business-Critical/internal/pkg/marshaltype.Duration"
        },
        "neuron": {
          "$ref": "#/definitions/ScraperConfig"
        },
        "neuronProxy": {
          "$ref": "#/definitions/ScraperConfig"
        }
      }
    },
    "NeuronEXVersion": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "default": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "IsDefault"
        },
        "image": {
          "type": "string",
          "default": "",
          "x-go-name": "Image",
          "x-go-validate": "uniqueIndex"
        }
      }
    },
    "NeuronQuota": {
      "type": "object",
      "required": [
        "neuronCPURequest",
        "neuronMEMRequest",
        "storageClass"
      ],
      "properties": {
        "neuronCPULimit": {
          "type": "string",
          "default": "",
          "x-go-name": "NeuronCPULimit"
        },
        "neuronCPURequest": {
          "type": "string",
          "x-go-name": "NeuronCPURequest"
        },
        "neuronMEMLimit": {
          "type": "string",
          "default": "",
          "x-go-name": "NeuronMEMLimit"
        },
        "neuronMEMRequest": {
          "type": "string",
          "x-go-name": "NeuronMEMRequest"
        },
        "storageClass": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageClass"
          },
          "x-go-name": "StorageClass"
        }
      }
    },
    "NeuronStats": {
      "type": "object",
      "required": [
        "total",
        "watched",
        "south",
        "north"
      ],
      "properties": {
        "north": {
          "$ref": "#/definitions/NodeStats"
        },
        "south": {
          "$ref": "#/definitions/NodeStats"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        },
        "watched": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Watched"
        }
      }
    },
    "NeuronVersion": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "default": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "IsDefault"
        },
        "image": {
          "type": "string",
          "default": "",
          "x-go-name": "Image",
          "x-go-validate": "uniqueIndex"
        }
      }
    },
    "NodeStats": {
      "type": "object",
      "required": [
        "total",
        "running",
        "disconnected"
      ],
      "properties": {
        "disconnected": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Disconnected"
        },
        "running": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Running"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      }
    },
    "OperationLog": {
      "type": "object",
      "required": [
        "id",
        "resource",
        "operation",
        "operatorId",
        "operatorName",
        "userId",
        "userName",
        "orgId",
        "orgName",
        "projectId",
        "projectName",
        "clusterId",
        "clusterName",
        "edgeServiceId",
        "edgeServiceName",
        "metadata",
        "createdAt"
      ],
      "properties": {
        "clusterId": {
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "clusterName": {
          "type": "string",
          "x-go-name": "ClusterName"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "edgeServiceId": {
          "type": "string",
          "x-go-name": "EdgeServiceID"
        },
        "edgeServiceName": {
          "type": "string",
          "x-go-name": "EdgeServiceName"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "metadata": {
          "type": "string",
          "x-go-name": "Metadata"
        },
        "operation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Operation"
        },
        "operatorId": {
          "type": "string",
          "x-go-name": "OperatorID"
        },
        "operatorName": {
          "type": "string",
          "x-go-name": "OperatorName"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "orgName": {
          "type": "string",
          "x-go-name": "OrgName"
        },
        "projectId": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "projectName": {
          "type": "string",
          "x-go-name": "ProjectName"
        },
        "resource": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Resource"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        },
        "userName": {
          "type": "string",
          "x-go-name": "UserName"
        }
      }
    },
    "OrgInfo": {
      "type": "object",
      "required": [
        "id",
        "name",
        "projects",
        "members",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Projects"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "OrgMember": {
      "type": "object",
      "required": [
        "userId",
        "roleIds"
      ],
      "properties": {
        "roleIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "x-go-name": "RoleIDs"
        },
        "userId": {
          "type": "string",
          "default": "",
          "x-go-name": "UserID",
          "x-go-validate": "required"
        }
      }
    },
    "OrgName": {
      "type": "object",
      "required": [
        "id",
        "name",
        "projectCount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "projectCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectCount"
        }
      }
    },
    "OrgProjectInfo": {
      "type": "object",
      "required": [
        "id",
        "orgId",
        "orgName",
        "name",
        "members",
        "clusterCount",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "clusterCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClusterCount"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberInfo"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orgId": {
          "type": "string",
          "x-go-name": "OrgID"
        },
        "orgName": {
          "type": "string",
          "x-go-name": "OrgName"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "PageResponse": {
      "type": "object",
      "required": [
        "total",
        "size",
        "offset"
      ],
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Offset"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "PortInfo": {
      "type": "object",
      "required": [
        "name",
        "external",
        "internal"
      ],
      "properties": {
        "external": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "External"
        },
        "internal": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Internal"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "PortInfos": {
      "type": "object",
      "required": [
        "type",
        "ports",
        "annotations",
        "load_balancer_class"
      ],
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations",
          "properties": {}
        },
        "load_balancer_class": {
          "type": "string",
          "x-go-name": "LoadBalancerClass"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortInfo"
          },
          "x-go-name": "Ports"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "PreviewAlarmConfigurationNotificationWebhookResponse": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "x-go-name": "Tempalte"
        }
      }
    },
    "ProjectInfo": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "clusterCount",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "clusterCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClusterCount"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberInfo"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "ProjectMember": {
      "type": "object",
      "required": [
        "userId",
        "roleIds"
      ],
      "properties": {
        "roleIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "x-go-name": "RoleIDs"
        },
        "userId": {
          "type": "string",
          "default": "",
          "x-go-name": "UserID",
          "x-go-validate": "required"
        }
      }
    },
    "ProjectName": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "QueryClusterMetadataResponse": {
      "type": "object",
      "required": [
        "clusterId",
        "elasticsearch",
        "mqtt",
        "tunnel"
      ],
      "properties": {
        "clusterId": {
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "elasticsearch": {
          "$ref": "#/definitions/ElasticsearchConfig"
        },
        "mqtt": {
          "$ref": "#/definitions/MQTTConfig"
        },
        "tunnel": {
          "$ref": "#/definitions/TunnelConfig"
        }
      }
    },
    "QueryGlobalConfigUserManagementResponse": {
      "type": "object",
      "required": [
        "verification",
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/AuthTokenConfig"
        },
        "verification": {
          "$ref": "#/definitions/UserManagementVerificationConfig"
        }
      }
    },
    "RefreshTokenRequestData": {
      "type": "object",
      "required": [
        "refreshToken"
      ],
      "properties": {
        "refreshToken": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "RefreshToken",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "RefreshTokenResponse": {
      "type": "object",
      "required": [
        "accessToken",
        "expiresIn",
        "refreshExpiresIn",
        "refreshToken",
        "tokenType"
      ],
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresIn"
        },
        "refreshExpiresIn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RefreshExpiresIn"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "tokenType": {
          "type": "string",
          "x-go-name": "TokenType"
        }
      }
    },
    "RegisterClusterAgentData": {
      "type": "object",
      "required": [
        "nodeId",
        "registrationToken"
      ],
      "properties": {
        "nodeId": {
          "type": "string",
          "default": "",
          "x-go-name": "NodeID",
          "x-go-validate": "required"
        },
        "registrationToken": {
          "type": "string",
          "default": "",
          "x-go-name": "RegistrationToken",
          "x-go-validate": "required"
        }
      }
    },
    "RegisterClusterAgentResponse": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      }
    },
    "ReloaderVersion": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "default": "",
          "x-go-name": "Image"
        }
      }
    },
    "ReportClusterAgentInfoData": {
      "type": "object",
      "required": [
        "nodeId",
        "agentVersion",
        "nodeConnectError",
        "clusterFetchError",
        "metricsFetchError",
        "logsFetchError",
        "dashboardEnabled",
        "mqttConnectError",
        "clusterNodes"
      ],
      "properties": {
        "agentVersion": {
          "type": "string",
          "default": "",
          "x-go-name": "AgentVersion",
          "x-go-validate": "required"
        },
        "clusterFetchError": {
          "type": "string",
          "x-go-name": "ClusterFetchError"
        },
        "clusterNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EMQXEENode"
          },
          "x-go-name": "ClusterNodes"
        },
        "dashboardEnabled": {
          "type": "boolean",
          "x-go-name": "DashboardEnabled"
        },
        "logsFetchError": {
          "type": "string",
          "x-go-name": "LogsFetchError"
        },
        "metricsFetchError": {
          "type": "string",
          "x-go-name": "MetricsFetchError"
        },
        "mqttConnectError": {
          "type": "string",
          "x-go-name": "MQTTConnectError"
        },
        "nodeConnectError": {
          "type": "string",
          "x-go-name": "NodeConnectError"
        },
        "nodeId": {
          "type": "string",
          "default": "",
          "x-go-name": "NodeID",
          "x-go-validate": "required"
        }
      }
    },
    "ResetPasswordRequestData": {
      "type": "object",
      "required": [
        "token",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "token": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Token",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "ResetUserPasswordRequestData": {
      "type": "object",
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      }
    },
    "SMTPConfigData": {
      "type": "object",
      "required": [
        "host",
        "username",
        "password"
      ],
      "properties": {
        "encryption": {
          "description": "tls(default) / starttls",
          "type": "string",
          "default": "tls",
          "x-go-name": "Encryption"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "port": {
          "type": "integer",
          "format": "uint16",
          "default": "25",
          "x-go-name": "Port"
        },
        "username": {
          "description": "From string `json:\"from\"`",
          "type": "string",
          "x-go-name": "Username"
        }
      }
    },
    "SSOProvider": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "ScraperConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "Enabled"
        },
        "interval": {
          "type": "string",
          "default": "15s",
          "x-go-name": "Interval"
        },
        "timeout": {
          "type": "string",
          "default": "15s",
          "x-go-name": "Timeout"
        }
      }
    },
    "SearchUsersResponse": {
      "type": "object",
      "required": [
        "total",
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchedUserInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      }
    },
    "SearchedUserInfo": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        }
      }
    },
    "SendResetPasswordEmailRequestData": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "default": "",
          "x-go-name": "Email",
          "x-go-validate": "email"
        }
      }
    },
    "SetKubeConfigResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/IaasConfigData"
        }
      }
    },
    "SetupAccountRequestData": {
      "type": "object",
      "required": [
        "token",
        "name",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        },
        "password": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Password",
          "x-go-validate": "@string[1,]"
        },
        "token": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Token",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "SetupInitSuperAdminRequestData": {
      "type": "object",
      "required": [
        "name",
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "default": "",
          "x-go-name": "Email",
          "x-go-validate": "@email"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        },
        "password": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Password",
          "x-go-validate": "@string[1,]"
        }
      }
    },
    "SingleEkuiperStats": {
      "type": "object",
      "required": [
        "status",
        "uptime",
        "rules",
        "in",
        "out",
        "version",
        "os",
        "arch"
      ],
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "in": {
          "$ref": "#/definitions/EkuiperIOStats"
        },
        "os": {
          "type": "string",
          "x-go-name": "OS"
        },
        "out": {
          "$ref": "#/definitions/EkuiperIOStats"
        },
        "rules": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Rules"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        },
        "uptime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Uptime"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "SingleNeuronStats": {
      "type": "object",
      "required": [
        "status",
        "uptime",
        "north",
        "south",
        "version",
        "buildDate",
        "memTotal",
        "memUsed",
        "hardware"
      ],
      "properties": {
        "buildDate": {
          "type": "string",
          "x-go-name": "BuildDate"
        },
        "hardware": {
          "type": "string",
          "x-go-name": "Hardware"
        },
        "memTotal": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MemTotal"
        },
        "memUsed": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MemUsed"
        },
        "north": {
          "$ref": "#/definitions/NodeStats"
        },
        "south": {
          "$ref": "#/definitions/NodeStats"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        },
        "uptime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Uptime"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      }
    },
    "StandardLog": {
      "type": "object",
      "required": [
        "time",
        "level",
        "msg",
        "id",
        "category"
      ],
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "level": {
          "type": "string",
          "x-go-name": "Level"
        },
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        }
      }
    },
    "StaticConfig": {
      "type": "object",
      "required": [
        "targets",
        "labels"
      ],
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels",
          "properties": {}
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Targets"
        }
      }
    },
    "StatusError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "description": "错误信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      }
    },
    "StatusResp": {
      "type": "object",
      "required": [
        "status",
        "msg"
      ],
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        }
      }
    },
    "StorageClass": {
      "type": "object",
      "required": [
        "storage_class_name"
      ],
      "properties": {
        "storage_class_name": {
          "type": "string",
          "x-go-name": "StorageClassName"
        },
        "storage_class_size": {
          "description": "StorageClassPVSize 默认单位 Mi",
          "type": "string",
          "default": "1024Mi",
          "x-go-name": "StorageClassSize"
        },
        "type": {
          "type": "integer",
          "format": "uint8",
          "default": "1",
          "x-go-name": "Type"
        }
      }
    },
    "SupportedLanguageItem": {
      "type": "object",
      "required": [
        "name",
        "key"
      ],
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "SyslogInfo": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string",
          "default": "",
          "x-go-name": "Addr"
        },
        "enabled": {
          "type": "boolean",
          "default": "false",
          "x-go-name": "Enabled"
        },
        "network": {
          "type": "string",
          "default": "",
          "x-go-name": "Network"
        },
        "priority": {
          "type": "integer",
          "format": "int64",
          "default": "3",
          "x-go-name": "Priority"
        },
        "tag": {
          "type": "string",
          "default": "",
          "x-go-name": "Tag"
        }
      }
    },
    "TagLimitBody": {
      "type": "object",
      "required": [
        "tagLimit"
      ],
      "properties": {
        "tagLimit": {
          "description": "use pointer to avoid value 0 being treated as if the field not present",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TagLimit"
        }
      }
    },
    "TaskInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseModelUUID"
        },
        {
          "description": " task、batch 状态对照表\nconst (\n\tBC_TASK_STATUS_NOCHANGE = 0\n\tBC_TASK_STATUS_PENDING  = iota\n\tBC_TASK_STATUS_RUNNING\n\tBC_TASK_STATUS_FINISHED\n\tBC_TASK_STATUS_ERROR\n\n\t// internal panic for specific error reason\n\tBC_TASK_STATUS_PANIC_FOR_NOT_CREATED = 30\n\tBC_TASK_STATUS_PANIC_FOR_HEALTH      = 31\n\tBC_TASK_STATUS_PANIC_FOR_NOT_HEALTH  = 32\n)",
          "type": "object",
          "required": [
            "deploy_id",
            "type",
            "status",
            "progress",
            "user_id"
          ],
          "properties": {
            "deploy_id": {
              "type": "string",
              "x-go-name": "DeployID"
            },
            "progress": {
              "type": "string",
              "x-go-name": "Progress"
            },
            "status": {
              "type": "integer",
              "format": "uint8",
              "x-go-name": "Status"
            },
            "type": {
              "type": "integer",
              "format": "uint8",
              "x-go-name": "Type"
            },
            "user_id": {
              "type": "string",
              "x-go-name": "UserID"
            }
          }
        }
      ]
    },
    "TelegrafImage": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "x-go-name": "Image"
        }
      }
    },
    "TestAlarmConfigurationNotificationWebhookURLRequestData": {
      "type": "object",
      "required": [
        "url",
        "headers"
      ],
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Headers",
          "properties": {}
        },
        "url": {
          "type": "string",
          "default": "",
          "x-go-name": "URL",
          "x-go-validate": "@httpUrl"
        }
      }
    },
    "TestConnectivityData": {
      "type": "object",
      "required": [
        "url",
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      }
    },
    "Time": {
      "description": "A Time represents an instant in time with nanosecond precision.\n\nPrograms using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading.",
      "type": "object",
      "properties": {}
    },
    "TokenResponse": {
      "type": "object",
      "required": [
        "tokenType",
        "accessToken",
        "expiresIn",
        "refreshToken",
        "refreshExpiresIn",
        "admin"
      ],
      "properties": {
        "accessToken": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "admin": {
          "type": "boolean",
          "x-go-name": "IsAdministrator"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresIn"
        },
        "refreshExpiresIn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RefreshExpiresIn"
        },
        "refreshToken": {
          "type": "string",
          "x-go-name": "RefreshToken"
        },
        "tokenType": {
          "type": "string",
          "x-go-name": "TokenType"
        }
      }
    },
    "TransferBody": {
      "type": "object",
      "required": [
        "agentIds",
        "targetOrgId",
        "targetProjectId"
      ],
      "properties": {
        "agentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AgentIDs"
        },
        "targetOrgId": {
          "type": "string",
          "x-go-name": "TargetOrgID"
        },
        "targetProjectId": {
          "type": "string",
          "x-go-name": "TargetProjectID"
        }
      }
    },
    "TransferClusterRequestData": {
      "type": "object",
      "required": [
        "projectId"
      ],
      "properties": {
        "projectId": {
          "type": "string",
          "default": "",
          "minLength": 8,
          "x-go-name": "ProjectID",
          "x-go-validate": "@string[8,]"
        }
      }
    },
    "TunnelConfig": {
      "type": "object",
      "required": [
        "requestTopic",
        "replyTopic"
      ],
      "properties": {
        "replyTopic": {
          "type": "string",
          "x-go-name": "ReplyTopic"
        },
        "requestTopic": {
          "type": "string",
          "x-go-name": "RequestTopic"
        }
      }
    },
    "UpdateAgentData": {
      "type": "object",
      "required": [
        "name",
        "desc"
      ],
      "properties": {
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "UpdateAlarmConfigurationNotificationEmailRequestData": {
      "type": "object",
      "required": [
        "enabled",
        "receivers"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "receivers": {
          "type": "array",
          "default": "",
          "items": {
            "type": "string"
          },
          "x-go-name": "Receivers",
          "x-go-validate": "@array[0,10]:@email"
        }
      }
    },
    "UpdateAlarmConfigurationNotificationRequestData": {
      "type": "object",
      "required": [
        "onlyCritical",
        "silenceInterval"
      ],
      "properties": {
        "onlyCritical": {
          "type": "boolean",
          "x-go-name": "OnlyCritical"
        },
        "silenceInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SilenceInterval"
        }
      }
    },
    "UpdateAlarmConfigurationNotificationWebhookRequestData": {
      "type": "object",
      "required": [
        "enabled",
        "url",
        "headers"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Headers",
          "properties": {}
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      }
    },
    "UpdateAlarmEnabledRequestData": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        }
      }
    },
    "UpdateDeployData": {
      "type": "object",
      "properties": {
        "deployName": {
          "type": "string",
          "default": "",
          "x-go-name": "DeployName",
          "x-go-validate": "@regexp[^[一-龥_a-zA-Z0-9 -]{0,200}$]"
        },
        "desc": {
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 0,
          "x-go-name": "Desc",
          "x-go-validate": "@string[0,500]"
        }
      }
    },
    "UpdateDeployResp": {
      "type": "object",
      "properties": {}
    },
    "UpdateEdgeResp": {
      "type": "object",
      "required": [
        "data",
        "tip"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeService"
        },
        "tip": {
          "type": "string",
          "x-go-name": "Tip"
        }
      }
    },
    "UpdateEdgeServiceData": {
      "type": "object",
      "required": [
        "category",
        "name",
        "endpoint"
      ],
      "properties": {
        "agentId": {
          "type": "string",
          "default": "",
          "x-go-name": "AgentID"
        },
        "auth": {
          "description": "认证类型(0:无认证; 1:basic; 2:jwt)",
          "type": "integer",
          "format": "int8",
          "default": "0",
          "x-go-name": "Auth"
        },
        "broker": {
          "type": "string",
          "default": "",
          "x-go-name": "Broker"
        },
        "category": {
          "description": "服务类别(1:ekuiper；2:neuron; 3:nanomq)",
          "type": "integer",
          "format": "int8",
          "x-go-name": "Category"
        },
        "desc": {
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 0,
          "x-go-name": "Desc",
          "x-go-validate": "@string[0,500]"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "key": {
          "type": "string",
          "default": "",
          "x-go-name": "Key"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@regexp[^[一-龥a-zA-Z0-9 -]{1,200}$]"
        },
        "nodeType": {
          "description": "节点类型(3:proxy; 4:direct)",
          "type": "integer",
          "format": "int8",
          "default": "4",
          "x-go-name": "NodeType"
        },
        "scheme": {
          "type": "string",
          "default": "http",
          "x-go-name": "Scheme"
        },
        "secret": {
          "type": "string",
          "default": "",
          "x-go-name": "Secret"
        }
      }
    },
    "UpdateGlobalAlarmConfigRequestData": {
      "type": "object",
      "required": [
        "webhook"
      ],
      "properties": {
        "webhook": {
          "$ref": "#/definitions/GlobalAlarmConfigWebhookData"
        }
      }
    },
    "UpdateGlobalConfigUserManagementRequestData": {
      "type": "object",
      "required": [
        "verification",
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/AuthTokenConfig"
        },
        "verification": {
          "$ref": "#/definitions/UserManagementVerificationConfig"
        }
      }
    },
    "UpdateIdentityProviderRequestData": {
      "type": "object",
      "required": [
        "name",
        "type",
        "enabled",
        "idPSsoUrl",
        "idpSloUrl",
        "spEntityId",
        "spAcsUrl",
        "spSloUrl",
        "signAuthn",
        "forceAuthn",
        "validateSignature",
        "validatingCertificate"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "forceAuthn": {
          "type": "boolean",
          "x-go-name": "ForceAuthenticate"
        },
        "idPSsoUrl": {
          "description": "saml config",
          "type": "string",
          "default": "",
          "x-go-name": "IdPSSOURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "idpSloUrl": {
          "type": "string",
          "default": "",
          "x-go-name": "IdPSLOURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "name": {
          "type": "string",
          "default": "",
          "maxLength": 50,
          "minLength": 1,
          "x-go-name": "Name",
          "x-go-validate": "@string[1,50]"
        },
        "signAuthn": {
          "type": "boolean",
          "x-go-name": "SignAuthnRequests"
        },
        "spAcsUrl": {
          "type": "string",
          "default": "",
          "x-go-name": "SPACSURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "spEntityId": {
          "type": "string",
          "x-go-name": "SPEntityID"
        },
        "spSloUrl": {
          "type": "string",
          "default": "",
          "x-go-name": "SPSLOURL",
          "x-go-validate": "@httpUrlOrEmpty"
        },
        "type": {
          "type": "string",
          "default": "",
          "minLength": 1,
          "x-go-name": "Type",
          "x-go-validate": "@string[1,]"
        },
        "validateSignature": {
          "type": "boolean",
          "x-go-name": "ValidateSignature"
        },
        "validatingCertificate": {
          "type": "string",
          "x-go-name": "ValidatingCertificate"
        }
      }
    },
    "UpdateIdentityProviderResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "UpdateNodeBody": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "cacertPath": {
          "description": "cacertPath, certPath, keyPath",
          "type": "string",
          "default": "",
          "x-go-name": "CacertPath"
        },
        "certPath": {
          "type": "string",
          "default": "",
          "x-go-name": "CertPath"
        },
        "desc": {
          "type": "string",
          "default": "",
          "x-go-name": "Desc"
        },
        "keyPath": {
          "type": "string",
          "default": "",
          "x-go-name": "KeyPath"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "tls": {
          "description": "DockerHost string `json:\"dockerHost\"`",
          "type": "boolean",
          "default": "false",
          "x-go-name": "Tls"
        }
      }
    },
    "UpdateOptions": {
      "type": "object",
      "required": [
        "serviceId",
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "serviceId": {
          "type": "string",
          "x-go-name": "ServiceId"
        }
      }
    },
    "UpdateOrgRequestData": {
      "type": "object",
      "required": [
        "name",
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        }
      }
    },
    "UpdateOrgResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "UpdatePasswordRequestData": {
      "type": "object",
      "required": [
        "newPassword",
        "originPassword"
      ],
      "properties": {
        "newPassword": {
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "originPassword": {
          "type": "string",
          "x-go-name": "OriginPassword"
        }
      }
    },
    "UpdateProfileRequestData": {
      "type": "object",
      "required": [
        "name",
        "mobile"
      ],
      "properties": {
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        },
        "newPassword": {
          "type": "string",
          "default": "",
          "x-go-name": "NewPassword"
        },
        "originPassword": {
          "type": "string",
          "default": "",
          "x-go-name": "OriginPassword"
        }
      }
    },
    "UpdateProfileResponse": {
      "type": "object",
      "required": [
        "email",
        "name",
        "mobile"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "UpdateProjectRequestData": {
      "type": "object",
      "required": [
        "name",
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMember"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "default": "",
          "x-go-name": "Name",
          "x-go-validate": "@char[1,50]"
        }
      }
    },
    "UpdateProjectResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "members",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Members"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "UpdateResp": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      }
    },
    "UpdateSystemLanguageRequestData": {
      "type": "object",
      "required": [
        "language"
      ],
      "properties": {
        "language": {
          "type": "string",
          "default": "",
          "x-go-name": "Language",
          "x-go-validate": "required"
        }
      }
    },
    "UpdateTagRequestData": {
      "type": "object",
      "required": [
        "name",
        "serviceIDs"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "serviceIDs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EdgeServiceIDs"
        }
      }
    },
    "UpdateTagResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "tagged",
        "failedServiceNames",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "failedServiceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FailedEdgeServiceNames"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "tagged": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TaggedCount"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "UpdateTaskInfo": {
      "type": "object",
      "required": [
        "status",
        "progress"
      ],
      "properties": {
        "progress": {
          "type": "string",
          "x-go-name": "Progress"
        },
        "status": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Status"
        }
      }
    },
    "UpdateUICustomizationConfigResponse": {
      "type": "object",
      "required": [
        "name",
        "logo",
        "loginBg"
      ],
      "properties": {
        "loginBg": {
          "type": "string",
          "x-go-name": "LoginBackgroundImage"
        },
        "logo": {
          "type": "string",
          "x-go-name": "Logo"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "UpdateUserRequestData": {
      "type": "object",
      "required": [
        "email",
        "name",
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      }
    },
    "UpdateUserResponse": {
      "type": "object",
      "required": [
        "id",
        "email",
        "name",
        "admin",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "Admin"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "UploadAvatarResponse": {
      "type": "object",
      "required": [
        "avatar"
      ],
      "properties": {
        "avatar": {
          "type": "string",
          "x-go-name": "Avatar"
        }
      }
    },
    "UploadLicenseResponse": {
      "type": "object",
      "required": [
        "type",
        "customerName",
        "customerContact",
        "startDate",
        "expiredDate",
        "expired",
        "totalClusterConnectionCount",
        "maxSingleClusterConnectionCount",
        "maxEmqxClusterCount",
        "maxEdgeServiceCount",
        "maxTagCount"
      ],
      "properties": {
        "customerContact": {
          "type": "string",
          "x-go-name": "CustomerContact"
        },
        "customerName": {
          "type": "string",
          "x-go-name": "CustomerName"
        },
        "expired": {
          "type": "boolean",
          "x-go-name": "Expired"
        },
        "expiredDate": {
          "type": "string",
          "x-go-name": "ExpiredDate"
        },
        "maxEdgeServiceCount": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxEdgeServiceCount"
        },
        "maxEmqxClusterCount": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxEMQXClusterCount"
        },
        "maxSingleClusterConnectionCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxSingleClusterConnectionCount"
        },
        "maxTagCount": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxTagCount"
        },
        "startDate": {
          "type": "string",
          "x-go-name": "StartDate"
        },
        "totalClusterConnectionCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalClusterConnectionCount"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "mobile",
        "verified",
        "enabled",
        "admin",
        "lastLoginTime",
        "createdAt"
      ],
      "properties": {
        "admin": {
          "type": "boolean",
          "x-go-name": "IsAdministrator"
        },
        "createdAt": {
          "$ref": "#/definitions/Time"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "lastLoginTime": {
          "$ref": "#/definitions/Time"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        },
        "verified": {
          "type": "boolean",
          "x-go-name": "Verified"
        }
      }
    },
    "UserManagementEmailVerificationConfig": {
      "type": "object",
      "required": [
        "invitationEmailDuration",
        "passwordResetEmailDuration"
      ],
      "properties": {
        "invitationEmailDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InvitationEmailDuration"
        },
        "passwordResetEmailDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PasswordResetEmailDuration"
        }
      }
    },
    "UserManagementVerificationConfig": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "$ref": "#/definitions/UserManagementEmailVerificationConfig"
        },
        "mode": {
          "type": "integer",
          "format": "int8",
          "default": "0",
          "x-go-name": "Mode",
          "x-go-validate": "@int8{0,1}"
        },
        "passwordManagementPolicy": {
          "type": "integer"
        },
        "passwordUpdatePolicy": {
          "type": "integer"
        }
      }
    },
    "UserOrgRole": {
      "type": "object",
      "required": [
        "id",
        "roles",
        "projects"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserProjectRole"
          },
          "x-go-name": "Projects"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        }
      }
    },
    "UserProjectRole": {
      "type": "object",
      "required": [
        "id",
        "roles"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        }
      }
    },
    "ValidateBody": {
      "type": "object",
      "required": [
        "title",
        "serviceNames"
      ],
      "properties": {
        "serviceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceNames"
        },
        "title": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Title"
        }
      }
    },
    "ValidateInfo": {
      "type": "object",
      "required": [
        "success",
        "messages"
      ],
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Messages"
        },
        "success": {
          "type": "boolean",
          "x-go-name": "Success"
        }
      }
    },
    "ValidateResp": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ValidateInfo"
        }
      }
    },
    "ViewBody": {
      "type": "object",
      "required": [
        "title",
        "defaultValue",
        "value"
      ],
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Default"
        },
        "title": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Title"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Value"
        }
      }
    },
    "failVal": {
      "type": "object",
      "required": [
        "line",
        "reason"
      ],
      "properties": {
        "line": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Line"
        },
        "reason": {
          "type": "string",
          "x-go-name": "Reason"
        }
      }
    },
    "DockerRegistryConfigItemDTOArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DockerRegistryConfigItemDTO"
      }
    },
    "CreateGlobalConfigBody": {
      "type": "object",
      "additionalProperties": {},
      "properties": {}
    },
    "BatchDeleteBody": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "securityDefinitions": {},
  "x-components": {}
}