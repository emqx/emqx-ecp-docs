{
    "openapi": "3.1.0",
    "info": {
      "title": "ECP API",
      "description": "",
      "version": "1.0.0"
    },
    "tags": [
      {
        "name": "ECP API"
      }
    ],
    "paths": {
      "/api/account/activate": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "验证邮箱邀请",
          "operationId": "ActivateAccount",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Token",
              "x-go-validate": "@string[1,];",
              "name": "token",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "302": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/avatar": {
        "post": {
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "上传头像",
          "operationId": "UploadAvatar",
          "parameters": [
            {
              "type": "file",
              "x-go-name": "File",
              "x-go-named": "*mime/multipart.FileHeader",
              "name": "file",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UploadAvatarResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/init": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "设置初始账号名称及初始密码",
          "operationId": "SetupInitSuperAdmin",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SetupInitSuperAdminRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/login": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "登录",
          "operationId": "Login",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/LoginRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/TokenResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/logout": {
        "get": {
          "tags": [
            "account"
          ],
          "summary": "退出登录",
          "operationId": "Logout",
          "responses": {
            "204": {
              "description": ""
            }
          }
        }
      },
      "/api/account/password": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "设置密码",
          "operationId": "UpdatePassword",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdatePasswordRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/password/reset": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "重置密码",
          "operationId": "ResetPassword",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ResetPasswordRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/password/send-reset-email": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "发送密码重置邮件",
          "operationId": "SendResetPasswordEmail",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SendResetPasswordEmailRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/password/verify-reset-email": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "验证重置邮件",
          "operationId": "VerifyResetPasswordEmail",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Token",
              "x-go-validate": "@string[1,];",
              "name": "token",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "302": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/profile": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "个人信息",
          "operationId": "GetProfile",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetProfileResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "修改个人信息",
          "operationId": "UpdateProfile",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateProfileRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateProfileResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/roles": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "查询用户角色",
          "operationId": "GetUserRoles",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetUserRolesResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/setup": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "设置账号名称及初始密码",
          "operationId": "SetupAccount",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SetupAccountRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/TokenResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/account/token/refresh": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account"
          ],
          "summary": "刷新token",
          "operationId": "RefreshToken",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/RefreshTokenRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/RefreshTokenResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/alarm/webhook/alertmanager/v1": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "提供给AlertManager调用的Webhook",
          "operationId": "AlertManagerWebhook",
          "parameters": [
            {
              "x-go-name": "TruncatedAlerts",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "integer",
                "format": "uint64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/H"
              }
            },
            "400": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/clusters/agents/emqxee/metadata": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "用于EMQX集群Agent同步配置信息",
          "operationId": "QueryClusterAgentMetadata",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/QueryClusterMetadataResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/clusters/agents/emqxee/register": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "注册EMQX集群Agent",
          "operationId": "RegisterClusterAgent",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/RegisterClusterAgentData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/RegisterClusterAgentResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/clusters/agents/emqxee/report": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "上报EMQX集群Agent信息",
          "operationId": "ReportClusterAgentInfo",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ReportClusterAgentInfoData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/clusters/agents/emqxee/unregister": {
        "post": {
          "tags": [
            "emqxcluster"
          ],
          "summary": "移除EMQX集群Agent",
          "operationId": "UnregisterClusterAgent",
          "responses": {
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/alarm": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询告警配置",
          "operationId": "GetGlobalAlarmConfig",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GlobalAlarmConfigResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新告警配置",
          "operationId": "UpdateGlobalAlarmConfig",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateGlobalAlarmConfigRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GlobalAlarmConfigResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/common/{name}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询全局配置",
          "operationId": "QueryGlobalConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetGlobalConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "创建全局配置",
          "operationId": "CreateGlobalConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "additionalProperties": {}
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "删除全局配置",
          "operationId": "DeleteGlobalConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/common/{name}/org/{orgId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询组织配置",
          "operationId": "QueryOrgConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetOrgConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "创建组织配置",
          "operationId": "CreateOrgConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "删除组织配置",
          "operationId": "DeleteOrgConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/common/{name}/org/{orgId}/project/{projectId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询项目配置",
          "operationId": "QueryProjectConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetProjectConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "创建项目配置",
          "operationId": "CreateProjectConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "删除项目配置",
          "operationId": "DeleteProjectConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/docker-info": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询Docker 节点配置",
          "operationId": "QueryGlobalConfigDockerInfo",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/DockerInfoResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新Docker 节点配置",
          "operationId": "CreateGlobalConfigDockerInfo",
          "parameters": [
            {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "x-go-name": "Port",
              "x-go-validate": "@int[1,65535]",
              "name": "port",
              "in": "formData",
              "required": true
            },
            {
              "type": "boolean",
              "default": "false",
              "x-go-name": "Tls",
              "name": "tls",
              "in": "formData"
            },
            {
              "minLength": 0,
              "type": "string",
              "default": "",
              "x-go-name": "CacertFile",
              "x-go-validate": "@string[0,]",
              "description": "cacertPath, certPath, keyPath",
              "name": "cacertFile",
              "in": "formData"
            },
            {
              "minLength": 0,
              "type": "string",
              "default": "",
              "x-go-name": "CertFile",
              "x-go-validate": "@string[0,]",
              "name": "certFile",
              "in": "formData"
            },
            {
              "minLength": 0,
              "type": "string",
              "default": "",
              "x-go-name": "KeyFile",
              "x-go-validate": "@string[0,]",
              "name": "keyFile",
              "in": "formData"
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/edgeservice-default": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "QueryGlobalConfigEdgeserviceDefaultConfig 查询边缘服务 Docker 部署的默认配置信息",
          "operationId": "QueryGlobalConfigEdgeserviceDefaultConfig",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EdgeserviceDefaultConfigResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "CreateGlobalConfigEdgeserviceDefaultConfig 更新边缘服务 Docker 部署的默认配置信息",
          "operationId": "CreateGlobalConfigEdgeserviceDefaultConfig",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EdgeserviceDefaultConfigData"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/edgeservice-license": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "operationId": "GetEdgeServiceLicConfig",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EdgeServiceLicenseConfigData"
              }
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "operationId": "UpdateEdgeServiceLicConfig",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EdgeServiceLicenseConfigData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/edgeservice-quota": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询边缘服务配额配置",
          "operationId": "QueryGlobalConfigEdgeserviceQuota",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EdgeserviceQuotaResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新边缘服务配额配置",
          "operationId": "CreateGlobalConfigEdgeserviceQuota",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EdgeserviceQuota"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/emqx-quota-list": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询EMQX集群配额配置",
          "operationId": "QueryGlobalConfigEmqxQuotaList",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmqxQuotaResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新EMQX配额配置",
          "operationId": "CreateGlobalConfigEmqxQuotaList",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EmqxQuotaReq"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/emqx-total-quota": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询EMQX总配额配置",
          "operationId": "QueryGlobalConfigEmqxTotalQuota",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmqxTotalQuota"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新EMQX总配额配置",
          "operationId": "CreateGlobalConfigEmqxTotalQuota",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EmqxTotalQuota"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/es-target": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询ES配置",
          "operationId": "QueryGlobalConfigEsTarget",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EsTargetData"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新ES配置",
          "operationId": "CreateGlobalConfigEsTarget",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EsTargetData"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/image-pull-secret": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询镜像服务配置",
          "operationId": "QueryGlobalConfigImagePullSecret",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DockerRegistryConfigItemDTO"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新镜像服务配置",
          "operationId": "CreateGlobalConfigImagePullSecret",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DockerRegistryConfigItemDTO"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/image-pull-secret/test": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "CheckImageRegistry 测试容器镜像库连通性",
          "operationId": "CheckImageRegistry",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DockerRegistryConfigItemDTO"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/image-version-list": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询EMQX镜像",
          "operationId": "QueryGlobalConfigEmqxImageVersion",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImageVersion"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新EMQX镜像",
          "operationId": "CreateGlobalConfigEmqxImageVersion",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImageVersion"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/kuiper-quota": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新eKuiper配额配置",
          "operationId": "CreateGlobalConfigKuiperQuota",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/KuiperQuota"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/kuiper-version-list": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询eKuiper镜像配置",
          "operationId": "QueryGlobalConfigKuiperVersion",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/KuiperVersion"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新eKuiper镜像配置",
          "operationId": "CreateGlobalConfigKuiperVersion",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/KuiperVersion"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/language": {
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新系统语言",
          "operationId": "UpdateSystemLanguage",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateSystemLanguageRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/languages": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询支持的语言列表",
          "operationId": "GetSupportedLanguages",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetSupportedLanguagesResponse"
              }
            }
          }
        }
      },
      "/api/configuration/lb-annotations": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询负载均衡注解配置",
          "operationId": "QueryGlobalConfigEmqxLbAnnotation",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LbAnnotation"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新负载均衡注解配置",
          "operationId": "CreateGlobalConfigEmqxLbAnnotation",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LbAnnotation"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/metric-gateway": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "QueryGlobalConfigMetricGateway 查询指标网关",
          "operationId": "QueryGlobalConfigMetricGateway",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MetricGatewayData"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "CreateGlobalConfigMetricGateway 配置指标网关",
          "operationId": "CreateGlobalConfigMetricGateway",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MetricGatewayData"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/monitor-scraper": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询监控配置",
          "operationId": "QueryGlobalConfigMonitorScraper",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/MonitorScraperConfig"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新监控配置",
          "operationId": "CreateGlobalConfigMonitorScraper",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/MonitorScraperConfig"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/neuron-quota": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新Neuron配额配置",
          "operationId": "CreateGlobalConfigNeuronQuota",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/NeuronQuota"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/neuron-version-list": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询Neuron版本配置",
          "operationId": "QueryGlobalConfigNeuronVersion",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NeuronVersion"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新Neuron版本配置",
          "operationId": "CreateGlobalConfigNeuronVersion",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NeuronVersion"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/neuronex-version-list": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询NeuronEX版本配置",
          "operationId": "QueryGlobalConfigNeuronEXVersion",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NeuronEXVersion"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新NeuronEX版本配置",
          "operationId": "CreateGlobalConfigNeuronEXVersion",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NeuronEXVersion"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/reloader-version": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询 emqx 的 reloader 镜像",
          "operationId": "QueryGlobalConfigReloaderVersion",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ReloaderVersion"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新 emqx 的 reloader 镜像",
          "operationId": "CreateGlobalConfigReloaderVersion",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ReloaderVersion"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/server-access-name": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询访问域名配置",
          "operationId": "QueryGlobalConfigBCServer",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BCServerData"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新访问域名配置",
          "operationId": "CreateGlobalConfigBCServer",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/BCServerData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/server-access-name/testing": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "测试访问域名",
          "operationId": "TestGlobalConfigBCServer",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/BCServerData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/smtp": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询邮件配置",
          "operationId": "QueryGlobalConfigSMTP",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SMTPConfigData"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新邮件配置",
          "operationId": "CreateGlobalConfigSMTP",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SMTPConfigData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/smtp/testing": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "测试邮件配置",
          "operationId": "TestGlobalConfigSMTP",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SMTPConfigData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/storage-class": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询EMQX集群存储类名",
          "operationId": "QueryGlobalConfigEmqxStorageClass",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StorageClass"
                }
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新EMQX集群存储类名",
          "operationId": "CreateGlobalConfigEmqxStorageClass",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StorageClass"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/syslog-info": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "QueryGlobalConfigSyslogInfo query syslog server configration",
          "operationId": "QueryGlobalConfigSyslogInfo",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SyslogInfo"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "CreateGlobalConfigSyslogInfo update syslog server configration",
          "operationId": "CreateGlobalConfigSyslogInfo",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SyslogInfo"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/syslog-info/test": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "CheckSyslogServer check the syslog server is right",
          "operationId": "CheckSyslogServer",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/SyslogInfo"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/telegraf-image": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询Telegraf镜像配置",
          "operationId": "QueryGlobalConfigTelegrafImage",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TelegrafImage"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新Telegraf镜像配置",
          "operationId": "CreateGlobalConfigTelegrafImage",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TelegrafImage"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/ui-customization": {
        "post": {
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新自定义页面配置",
          "operationId": "UpdateUICustomzationConfig",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "formData",
              "required": true
            },
            {
              "type": "file",
              "x-go-name": "Logo",
              "x-go-named": "*mime/multipart.FileHeader",
              "name": "logo",
              "in": "formData",
              "required": true
            },
            {
              "type": "file",
              "x-go-name": "LoginBackgroundImage",
              "x-go-named": "*mime/multipart.FileHeader",
              "name": "loginBg",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateUICustomizationConfigResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/configuration/user-management": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "查询用户管理配置",
          "operationId": "QueryGlobalConfigUserManagement",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/QueryGlobalConfigUserManagementResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "configuration"
          ],
          "summary": "更新用户管理配置",
          "operationId": "UpdateGlobalConfigUserManagement",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateGlobalConfigUserManagementRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/identityproviders": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "identityprovider"
          ],
          "summary": "获取认证服务列表",
          "operationId": "GetIdentityProviders",
          "parameters": [
            {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "uint32",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@uint32[1,50]",
              "name": "size",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "uint32",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@uint32[0,]",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetIdentityProvidersResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "identityprovider"
          ],
          "summary": "创建认证服务",
          "operationId": "CreateIdentityProvider",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateIdentityProviderRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/CreateIdentityProviderResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/identityproviders/{id}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "identityprovider"
          ],
          "summary": "获取认证服务信息",
          "operationId": "GetIdentityProvider",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[1,]",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/IdentityProviderDetail"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "identityprovider"
          ],
          "summary": "更新认证服务",
          "operationId": "UpdateIdentityProvider",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[1,]",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateIdentityProviderRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateIdentityProviderResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "identityprovider"
          ],
          "summary": "删除认证服务",
          "operationId": "DeleteIdentityProvider",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[1,]",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/jwt/pubkey/download": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "DownloadJwtPublicKey 下载边缘服务 jwt 鉴权需要的jwt公钥",
          "operationId": "DownloadJwtPublicKey",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/JwtResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/license": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "license"
          ],
          "summary": "查询许可证信息",
          "operationId": "GetLicenseInfo",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetLicenseResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "license"
          ],
          "summary": "更新上传许可证",
          "operationId": "UploadLicense",
          "parameters": [
            {
              "type": "file",
              "x-go-name": "File",
              "x-go-named": "*mime/multipart.FileHeader",
              "name": "file",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UploadLicenseResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "org"
          ],
          "summary": "查询组织列表",
          "operationId": "GetOrgsByPage",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "query",
              "required": true
            },
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,100]",
              "name": "size",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "x-go-name": "Offset",
              "x-go-validate": "@int32[0,]",
              "name": "offset",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetOrganizationsByPageResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "org"
          ],
          "summary": "创建组织",
          "operationId": "CreateOrg",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateOrgRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CreateOrgResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/names": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "org"
          ],
          "summary": "查询组织名称",
          "operationId": "GetOrgNames",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetOrgNamesResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "org"
          ],
          "summary": "查询组织",
          "operationId": "GetOrgByID",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetOrgResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "org"
          ],
          "summary": "更新组织信息",
          "operationId": "UpdateOrg",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateOrgRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/UpdateOrgResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "org"
          ],
          "summary": "删除组织",
          "operationId": "DeleteOrg",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "查询组织项目列表",
          "operationId": "GetOrgProjectsByPage",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "query",
              "required": true
            },
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,100]",
              "name": "size",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int32[0,]",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetOrgProjectsByPageResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "创建项目",
          "operationId": "CreateProject",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateProjectRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CreateProjectResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/names": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "查询项目名称",
          "operationId": "GetProjectNames",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetProjectNamesResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "查询项目",
          "operationId": "GetProjectByID",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetProjectResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "更新项目",
          "operationId": "UpdateProject",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateProjectRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/UpdateProjectResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "删除项目",
          "operationId": "DeleteProject",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "查询项目告警配置",
          "operationId": "GetAlarmConfiguration",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/AlarmConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "修改项目告警通知配置",
          "operationId": "UpdateAlarmConfigurationNotification",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateAlarmConfigurationNotificationRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/AlarmConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/email": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "修改项目告警通知中邮件的设置",
          "operationId": "UpdateAlarmConfigurationNotificationEmail",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateAlarmConfigurationNotificationEmailRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/AlarmConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/webhook": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "修改项目告警通知中Webhook的配置",
          "operationId": "UpdateAlarmConfigurationNotificationWebhook",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateAlarmConfigurationNotificationWebhookRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/AlarmConfigurationResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/webhook/preview": {
        "post": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "预览项目告警Webhook模板",
          "operationId": "PreviewAlarmConfigurationNotificationWebhook",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PreviewAlarmConfigurationNotificationWebhookResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/configuration/notification/webhook/testing": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "测试项目告警Webhook URL是否有效",
          "operationId": "TestAlarmConfigurationNotificationWebhookURL",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TestAlarmConfigurationNotificationWebhookURLRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/current": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "查询项目当前告警",
          "operationId": "GetCurrentAlarmsByPage",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "FuzzyName",
              "name": "fuzzyName",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int8",
              "x-go-name": "Severity",
              "name": "severity",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "StartsAt",
              "name": "startsAt",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "EndsAt",
              "name": "endsAt",
              "in": "query",
              "required": true
            },
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,100]",
              "name": "size",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int32",
              "x-go-name": "Offset",
              "name": "offset",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetAlarmsByPageResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/current/count": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "查询项目当前告警数量",
          "operationId": "GetCurrentAlarmsCount",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetCurrentAlarmsCountResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/enabled": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "启用/禁用项目告警",
          "operationId": "UpdateAlarmEnabled",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateAlarmEnabledRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/history": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "查询项目历史告警",
          "operationId": "GetHistoryAlarmsByPage",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "FuzzyName",
              "name": "fuzzyName",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int8",
              "x-go-name": "Severity",
              "name": "severity",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "StartsAt",
              "name": "startsAt",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "EndsAt",
              "name": "endsAt",
              "in": "query",
              "required": true
            },
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,100]",
              "name": "size",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int32",
              "x-go-name": "Offset",
              "name": "offset",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetAlarmsByPageResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/alarms/status": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "alarm"
          ],
          "summary": "查询项目告警状态：启用/禁用",
          "operationId": "GetAlarmStatus",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetAlarmStatusResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/clusters/add-existing-cluster": {
        "post": {
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "添加现有集群",
          "operationId": "AddExistingCluster",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "x-go-name": "Name",
              "x-go-validate": "@string[1,200]",
              "name": "name",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AddExistingClusterResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/agents": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "查询EMQX集群Agents",
          "operationId": "GetClusterAgents",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ClusterID",
              "x-go-validate": "@string[8,]",
              "name": "clusterId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetClusterAgentsResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/agents/{agentId}": {
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "删除EMQX集群Agent",
          "operationId": "DeleteClusterAgent",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ClusterID",
              "x-go-validate": "@string[8,]",
              "name": "clusterId",
              "in": "path",
              "required": true
            },
            {
              "minimum": 1,
              "type": "integer",
              "format": "uint64",
              "x-go-name": "AgentID",
              "x-go-validate": "@uint64[1,]",
              "name": "agentId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/setupInstructions": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "获取EMQX集群Agent安装向导信息",
          "operationId": "GetClusterAgentSetupInstructions",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ClusterID",
              "x-go-validate": "@string[8,]",
              "name": "clusterId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "Platform",
              "x-go-validate": "@string{Linux}",
              "name": "platform",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetClusterAgentSetupInstructionsResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/clusters/{clusterId}/transfer": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "emqxcluster"
          ],
          "summary": "转移集群",
          "operationId": "TransferCluster",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ClusterID",
              "x-go-validate": "@string[1,]",
              "name": "clusterId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TransferClusterRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy": {
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "Update 批量更新部署在 docker 上的边缘服务",
          "operationId": "Update",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateOptions"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "Create 批量部署 docker 上的边缘服务",
          "operationId": "Create",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateOptions"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CreateResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "Delete 批量删除部署在 docker 上的边缘服务",
          "operationId": "Delete",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeleteOptions"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "CreateNode 创建 docker 节点信息",
          "operationId": "CreateNode",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateNodeBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "type": "integer",
                "format": "uint64"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node/list": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": " ListNode 列表查询 docker 节点信息",
          "operationId": "ListNode",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "Name",
              "name": "name",
              "in": "query"
            },
            {
              "maximum": 50,
              "minimum": -1,
              "type": "integer",
              "format": "int64",
              "default": "10",
              "x-go-name": "Limit",
              "x-go-validate": "@int[-1,50]",
              "description": "分页数",
              "name": "limit",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int[0,]",
              "description": "分页偏移",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ListNodeResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node/{id}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "GetNode 查询 docker 节点信息",
          "operationId": "GetNode",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "integer",
              "format": "uint64",
              "x-go-name": "Id",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/DockerIaas"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "UpdateNode 更新 docker 节点信息",
          "operationId": "UpdateNode",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "uint64",
              "x-go-name": "Id",
              "x-go-validate": "@uint64[0,]",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateNodeBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "DeleteNode 删除 docker 节点信息",
          "operationId": "DeleteNode",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "integer",
              "format": "uint64",
              "x-go-name": "Id",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/dockerdeploy/node/{id}/services": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "dockerdeploy"
          ],
          "summary": "GetNodeServices 查询 docker 节点上的边缘服务列表",
          "operationId": "GetNodeServices",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "uint64",
              "x-go-name": "Id",
              "x-go-validate": "@uint64[0,]",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "maximum": 50,
              "minimum": -1,
              "type": "integer",
              "format": "int64",
              "default": "10",
              "x-go-name": "Limit",
              "x-go-validate": "@int[-1,50]",
              "description": "分页数",
              "name": "limit",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int[0,]",
              "description": "分页偏移",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetNodeServicesResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeagents": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeagent"
          ],
          "summary": "List 获取边缘网关列表",
          "operationId": "List",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "AgentID",
              "name": "agentId",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "Type",
              "name": "type",
              "in": "query",
              "required": true
            },
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": "100",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,100]",
              "name": "size",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int32[0,]",
              "name": "offset",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "Sort",
              "description": "字段名",
              "name": "sort",
              "in": "query"
            },
            {
              "type": "string",
              "default": "desc",
              "x-go-name": "Order",
              "description": "asc/desc",
              "name": "order",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ListAgentResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeagent"
          ],
          "summary": "Create 创建边缘网关",
          "operationId": "Create",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateAgentBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeagents/transfer": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeagent"
          ],
          "summary": "Transfer 转移边缘网关",
          "operationId": "Transfer",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TransferBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeagents/{agentId}": {
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeagent"
          ],
          "summary": "Update 更新边缘网关",
          "operationId": "Update",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "AgentID",
              "name": "agentId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateAgentData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeagent"
          ],
          "summary": "Delete 删除边缘网关",
          "operationId": "Delete",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "AgentID",
              "name": "agentId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "List 托管边缘服务列表接口",
          "operationId": "List",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "maximum": 50,
              "minimum": -1,
              "type": "integer",
              "format": "int64",
              "default": "10",
              "x-go-name": "Limit",
              "x-go-validate": "@int[-1,50]",
              "description": "分页数",
              "name": "limit",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int[0,]",
              "description": "分页偏移",
              "name": "offset",
              "in": "query"
            },
            {
              "minLength": 0,
              "type": "string",
              "default": "",
              "x-go-name": "EdgeName",
              "x-go-validate": "@string[0,]",
              "description": "部署名",
              "name": "edgeName",
              "in": "query"
            },
            {
              "minLength": 0,
              "type": "string",
              "default": "",
              "x-go-name": "Creator",
              "x-go-validate": "@string[0,]",
              "description": "部署创建人",
              "name": "creator",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/ListResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "Update 更新某个边缘服务的版本",
          "operationId": "Update",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EdgeUpdateReq"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "Create 创建一个托管的边缘服务",
          "operationId": "Create",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EdgeCreateReq"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BatchCreateResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batch": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchCreate 批量创建托管的边缘服务",
          "operationId": "BatchCreate",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EdgeCreateReq"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/BatchCreateResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batch/info": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchInfo 查询某批量（除更新之外）、或者指定edgeIds的任务执行状态",
          "operationId": "BatchInfo",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/BatchReqBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/BatchInfoResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchDelete": {
        "delete": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchDelete 批量删除边缘服务， 包括托管的和纳管的",
          "operationId": "BatchDelete",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "EdgeIds",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/BatchDeleteResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchRestart": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchRestart 批量重启托管的边缘服务",
          "operationId": "BatchRestart",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "EdgeIds",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BatchRestartResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchStart": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchStart 批量启动托管的边缘服务",
          "operationId": "BatchStart",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "EdgeIds",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BatchStartResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchStop": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchStop 批量停止托管的边缘服务",
          "operationId": "BatchStop",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "EdgeIds",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/BatchStopResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchUpdate": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchUpdate 批量更新托管的边缘服务",
          "operationId": "BatchUpdate",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "boolean",
              "default": "false",
              "x-go-name": "Parallel",
              "name": "parallel",
              "in": "query"
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EdgeUpdateReq"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BatchUpdateResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/batchUpdate/{batchId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "BatchUpdateInfo 查询某批量更新任务的状态",
          "operationId": "BatchUpdateInfo",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "BatchId",
              "x-go-validate": "@string[1,]",
              "name": "batchId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/BatchUpdateInfoResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/{edgeId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "Get 查询指定的某个边缘服务",
          "operationId": "Get",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "EdgeId",
              "x-go-validate": "@string[8,]",
              "name": "edgeId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "Delete 删除一个托管的边缘服务",
          "operationId": "Delete",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeId",
              "name": "edgeId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/DeleteResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgedeploy/{edgeId}/status": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgedeploy"
          ],
          "summary": "Status 查询某个边缘服务的状态",
          "operationId": "Status",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgId",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectId",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "EdgeId",
              "x-go-validate": "@string[8,]",
              "name": "edgeId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/StatusResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "ListServices 获取边缘服务列表",
          "operationId": "ListServices",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "description": "orgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "description": "projectID",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "maximum": 50,
              "minimum": -1,
              "type": "integer",
              "format": "int64",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@int[-1,50]",
              "description": "分页数",
              "name": "size",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int[0,]",
              "description": "分页偏移",
              "name": "offset",
              "in": "query"
            },
            {
              "type": "integer",
              "format": "int64",
              "default": "0",
              "x-go-name": "Type",
              "description": "0-all, 1-online, 2-offline",
              "name": "type",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int8"
              },
              "collectionFormat": "csv",
              "x-go-name": "Category",
              "description": "1-ekuiper, 2-neuron, 3-nanomq",
              "name": "category",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int8",
              "default": "0",
              "x-go-name": "NodeType",
              "description": "0-all, 3-proxy, 4-direct",
              "name": "nodeType",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "Name",
              "name": "name",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "AgentNameFuzzy",
              "name": "agentName",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "UnionFuzzy",
              "description": "多字段联合模糊搜索，包含name、endpoint、version、desc，此时不返回normal数量",
              "name": "unionFuzzy",
              "in": "query"
            },
            {
              "type": "boolean",
              "x-go-name": "HasNoTags",
              "name": "noTags",
              "in": "query",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64"
              },
              "collectionFormat": "csv",
              "x-go-name": "TagIDs",
              "name": "tagIds",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "x-go-name": "ToClone",
              "description": "toClone = true 时，ekuiper version \u003e= 1.8.0，neuron version \u003e= 2.4.0",
              "name": "toClone",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "x-go-name": "IsPartial",
              "description": "toClone = true 时有效，isPartial = true 时，ekuiper version \u003e= 1.9.0, neuron 暂不支持",
              "name": "isPartial",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "default": "false",
              "x-go-name": "IsEcpInstalled",
              "name": "isEcpInstalled",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "DockerName",
              "name": "dockerName",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetEdgeServiceListResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "Create 纳管边缘服务",
          "operationId": "Create",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateEdgeBody"
              }
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/CreateEdgeResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/export": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "Export 导出纳管的边缘服务",
          "operationId": "Export",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "x-go-name": "EdgeServiceIDs",
              "name": "serviceIds",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/import": {
        "post": {
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "Import 导入纳管边缘服务",
          "operationId": "Import",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "file",
              "x-go-name": "File",
              "x-go-named": "*mime/multipart.FileHeader",
              "name": "file",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ImportEdgeResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/names": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "GetEdgeServiceNames 获取项目下边缘服务名称",
          "operationId": "GetEdgeServiceNames",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetEdgeServiceNamesResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/tag": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "BatchTag 为多个边缘服务添加标签",
          "operationId": "BatchTag",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/BatchTagRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BatchAddTagResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "operationId": "GetService",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ServiceID",
              "x-go-validate": "@string[1,]",
              "name": "edgeServiceId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetEdgeServiceResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "Update 更新边缘服务",
          "operationId": "Update",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ServiceID",
              "x-go-validate": "@string[1,]",
              "name": "edgeServiceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateEdgeServiceData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/UpdateEdgeResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "Delete 解除纳管边缘服务",
          "operationId": "Delete",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ServiceID",
              "x-go-validate": "@string[1,]",
              "name": "edgeServiceId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}/tag": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "AddTag 为单个边缘服务添加标签",
          "operationId": "AddTag",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ServiceID",
              "x-go-validate": "@string[1,]",
              "name": "edgeServiceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/AddTagRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/AddTagResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}/taglimit": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "allocate tag to NeuronEX",
          "operationId": "AllocateTagLimit",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ServiceID",
              "x-go-validate": "@string[1,]",
              "name": "edgeServiceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/TagLimitBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgeservices/{edgeServiceId}/tagused": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgeservice"
          ],
          "summary": "get used tag from NeuronEX",
          "operationId": "GetTagUsed",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ServiceID",
              "x-go-validate": "@string[1,]",
              "name": "edgeServiceId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetTagUsedResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/deliver": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "Deliver 下发边缘服务配置",
          "operationId": "Deliver",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/DeliverBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/deliver/result": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "DeliverResult 获取边缘服务配置下发结果",
          "operationId": "DeliverResult",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/DeliverResultResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/export": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "Export 导出边缘服务配置",
          "operationId": "Export",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "type": "boolean",
              "x-go-name": "File",
              "name": "file",
              "in": "query",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "x-go-name": "IDs",
              "description": "only related to export from edge directly, ekuiper version \u003e= 1.9.0, neuron 暂不支持",
              "name": "ids",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "Function",
              "description": "1-ekuiper,2-neuron",
              "name": "function",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/export/param": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "ExportParam 导出边缘服务配置模版中的参数",
          "operationId": "ExportParam",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "x-go-name": "EdgeServiceIDs",
              "name": "serviceIds",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "x-go-name": "Data",
              "name": "data",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/import": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "Import 导入边缘服务配置",
          "operationId": "Import",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ImportTemplate"
              }
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "Typ",
              "description": "0-all,1-partial",
              "name": "type",
              "in": "query",
              "required": true
            },
            {
              "type": "integer",
              "format": "int64",
              "x-go-name": "Function",
              "description": "1-ekuiper,2-neuron",
              "name": "function",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ImportResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/import/param": {
        "post": {
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "ImportParam 导入边缘服务配置模版参数对应的值",
          "operationId": "ImportParam",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "type": "file",
              "x-go-name": "File",
              "x-go-named": "*mime/multipart.FileHeader",
              "name": "file",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/ImportParamResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/validate": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "Validate 校验边缘服务配置",
          "operationId": "Validate",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ValidateBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ValidateResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/edgetemplates/{serviceId}/view": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "edgetemplate"
          ],
          "summary": "View 预览边缘服务配置",
          "operationId": "View",
          "parameters": [
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "OrgID",
              "x-go-validate": "@string[8,]",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "minLength": 8,
              "type": "string",
              "x-go-name": "ProjectID",
              "x-go-validate": "@string[8,]",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "EdgeServiceID",
              "name": "serviceId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ViewBody"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/tags": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "tag"
          ],
          "summary": "查询项目标签列表",
          "operationId": "GetTagsByPage",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "query",
              "required": true
            },
            {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "x-go-name": "Size",
              "x-go-validate": "@int32[0,100]",
              "name": "size",
              "in": "query",
              "required": true
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "x-go-name": "Offset",
              "x-go-validate": "@int32[0,]",
              "name": "offset",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetTagsByPageResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tag"
          ],
          "summary": "创建项目标签",
          "operationId": "CreateTag",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateTagRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/CreateTagResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/tags/{tagId}": {
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tag"
          ],
          "summary": "更新项目标签",
          "operationId": "UpdateTag",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "integer",
              "format": "uint64",
              "x-go-name": "TagID",
              "name": "tagId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateTagRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateTagResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "tag"
          ],
          "summary": "删除项目标签",
          "operationId": "DeleteTag",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "integer",
              "format": "uint64",
              "x-go-name": "TagID",
              "name": "tagId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/orgs/{orgId}/projects/{projectId}/tags/{tagId}/edgeservices": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "tag"
          ],
          "summary": "查询项目标签下的边缘服务",
          "operationId": "GetTaggedEdgeServices",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "ProjectID",
              "name": "projectId",
              "in": "path",
              "required": true
            },
            {
              "type": "integer",
              "format": "uint64",
              "x-go-name": "TagID",
              "name": "tagId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetTaggedEdgeServicesResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/projects": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "project"
          ],
          "summary": "查询项目列表",
          "operationId": "GetProjectsByPage",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Name",
              "name": "name",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "query",
              "required": true
            },
            {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,50]",
              "name": "size",
              "in": "query"
            },
            {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": "0",
              "x-go-name": "Offset",
              "x-go-validate": "@int32[0,]",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetProjectsByPageResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/sso/activate": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "单点登录激活账号",
          "operationId": "ActivateAccount",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ActivateAccountRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/ActivateSSOAccountResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/sso/idps": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "获取单点登录服务",
          "operationId": "GetProviders",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetSSOProvidersResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/sso/saml/0/slo": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "提供给认证服务的SAML SLO接口",
          "operationId": "SAMLSingleLogoutService",
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "302": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "提供给认证服务的SAML SLO接口",
          "operationId": "SAMLSingleLogoutService",
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "302": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/sso/saml/{id}/acs": {
        "post": {
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "提供给认证服务的SAML ACS接口",
          "operationId": "SAMLAssertionConsumerService",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[1,]",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "RelayState",
              "name": "RelayState",
              "in": "formData",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "SAMLResponse",
              "name": "SAMLResponse",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "302": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/sso/saml/{id}/login/request": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "用于单点登录请求",
          "operationId": "GetSAMLLoginRequest",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[1,]",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "x-go-name": "RelayState",
              "name": "relayState",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetSAMLLoginRequestResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/sso/saml/{id}/metadata": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "sso"
          ],
          "summary": "下载SP元数据XML",
          "operationId": "SAMLServiceProviderMetadata",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "ID",
              "x-go-validate": "@string[1,]",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/tasks": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "task"
          ],
          "summary": "CreateTask 创建一个任务",
          "operationId": "CreateTask",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateTaskInfo"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/CreateTaskResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/tasks/{id}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "task"
          ],
          "summary": "GetTaskByTaskID 查询指定的任务",
          "operationId": "GetTaskByTaskID",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "TaskID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/TaskInfo"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "task"
          ],
          "summary": "UpdateTask 修改某个任务",
          "operationId": "UpdateTask",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateTaskInfo"
              }
            },
            {
              "type": "string",
              "x-go-name": "TaskID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/CreateTaskResp"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "查询用户列表",
          "operationId": "GetUserList",
          "parameters": [
            {
              "maxLength": 200,
              "minLength": 0,
              "type": "string",
              "default": "",
              "x-go-name": "NameOrEmail",
              "x-go-validate": "@string[0,200]",
              "name": "nameOrEmail",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "query"
            },
            {
              "type": "boolean",
              "default": "",
              "x-go-name": "IsAdministrator",
              "name": "admin",
              "in": "query"
            },
            {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@int32[1,50]",
              "name": "size",
              "in": "query"
            },
            {
              "type": "integer",
              "format": "int32",
              "default": "0",
              "x-go-name": "Offset",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/GetUserListResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "创建用户",
          "operationId": "CreateUser",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/CreateUserRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CreateUserResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/email/invite": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "通过邮箱邀请新用户",
          "operationId": "SendUserInvitationEmail",
          "parameters": [
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/InviteUserByEmailRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/email/invited": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "邮箱是否已邀请",
          "operationId": "IsEmailAlreadyInvited",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "Email",
              "x-go-validate": "@email",
              "name": "email",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/IsEmailAlreadyInvitedResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/search": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "通过姓名搜索用户",
          "operationId": "SearchUsers",
          "parameters": [
            {
              "type": "string",
              "default": "",
              "x-go-name": "Name",
              "x-go-validate": "@char[0,50]",
              "name": "name",
              "in": "query"
            },
            {
              "type": "string",
              "default": "",
              "x-go-name": "OrgID",
              "name": "orgId",
              "in": "query"
            },
            {
              "type": "boolean",
              "default": "",
              "x-go-name": "Verified",
              "name": "verified",
              "in": "query"
            },
            {
              "type": "boolean",
              "default": "",
              "x-go-name": "Enabled",
              "name": "enabled",
              "in": "query"
            },
            {
              "maximum": 100,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "x-go-name": "Size",
              "x-go-validate": "@int32[-1,100]",
              "name": "size",
              "in": "query"
            },
            {
              "type": "integer",
              "format": "int32",
              "default": "0",
              "x-go-name": "Offset",
              "name": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SearchUsersResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/{userId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "查询用户信息",
          "operationId": "GetUserByUserID",
          "parameters": [
            {
              "type": "string",
              "x-go-name": "UserID",
              "name": "userId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/GetUserByUserIDResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "更新用户",
          "operationId": "UpdateUser",
          "parameters": [
            {
              "maxLength": 40,
              "minLength": 1,
              "type": "string",
              "x-go-name": "UserID",
              "x-go-validate": "@string[1,40]",
              "name": "userId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/UpdateUserRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/UpdateUserResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        },
        "delete": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "删除用户",
          "operationId": "DeleteUser",
          "parameters": [
            {
              "minLength": 1,
              "type": "string",
              "x-go-name": "UserID",
              "x-go-validate": "@string[1,]",
              "name": "userId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/{userId}/add-to-orgs": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "将用户添加到组织",
          "operationId": "AddToOrgs",
          "parameters": [
            {
              "maxLength": 40,
              "minLength": 1,
              "type": "string",
              "x-go-name": "UserID",
              "x-go-validate": "@string[1,40]",
              "name": "userId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/AddToOrgsRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/AddToOrgsResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/{userId}/enabled": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "启用/禁用用户",
          "operationId": "UpdateEnabled",
          "parameters": [
            {
              "maxLength": 40,
              "minLength": 1,
              "type": "string",
              "x-go-name": "UserID",
              "x-go-validate": "@string[1,40]",
              "name": "userId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/EnableUserRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ActivateUserResponse"
              }
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/{userId}/password/reset": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "重置用户密码",
          "operationId": "ResetUserPassword",
          "parameters": [
            {
              "maxLength": 40,
              "minLength": 1,
              "type": "string",
              "x-go-name": "UserID",
              "x-go-validate": "@string[1,40]",
              "name": "userId",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Body",
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/ResetUserPasswordRequestData"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/users/{userId}/reinvite": {
        "post": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "user"
          ],
          "summary": "重新发送邀请邮件",
          "operationId": "ResendUserInvitationEmail",
          "parameters": [
            {
              "maxLength": 40,
              "minLength": 1,
              "type": "string",
              "x-go-name": "UserID",
              "x-go-validate": "@string[1,40]",
              "name": "userId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "@ErrorInfo(10001,\"unknown error\")\n@ErrorInfo(10003,\"Read failed\")\n@ErrorInfo(10041,\"invalid json\")\n@ErrorInfo(10043,\"no match field\")\n@ErrorInfo(10045,\"read form file failed\")",
              "schema": {
                "$ref": "#/definitions/StatusError"
              }
            },
            "204": {
              "description": ""
            },
            "default": {
              "description": ""
            }
          }
        }
      },
      "/api/version": {
        "get": {
          "produces": [
            "application/json"
          ],
          "tags": [
            "version"
          ],
          "summary": "查询版本信息",
          "operationId": "GetEcpVersion",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EcpVersion"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "AbnormalServiceListItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "version"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "ActivateAccountRequestData": {
        "type": "object",
        "required": [
          "token",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "default": "",
            "x-go-name": "Email",
            "x-go-validate": "@email"
          },
          "name": {
            "type": "string",
            "default": "",
            "maxLength": 50,
            "minLength": 1,
            "x-go-name": "Name",
            "x-go-validate": "@string[1,50]"
          },
          "password": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Password",
            "x-go-validate": "@string[1,]"
          },
          "token": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Token",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "ActivateSSOAccountResponse": {
        "type": "object",
        "required": [
          "tokenType",
          "accessToken",
          "expiresIn",
          "refreshToken",
          "refreshExpiresIn",
          "admin"
        ],
        "properties": {
          "accessToken": {
            "type": "string",
            "x-go-name": "AccessToken"
          },
          "admin": {
            "type": "boolean",
            "x-go-name": "IsAdministrator"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ExpiresIn"
          },
          "refreshExpiresIn": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RefreshExpiresIn"
          },
          "refreshToken": {
            "type": "string",
            "x-go-name": "RefreshToken"
          },
          "tokenType": {
            "type": "string",
            "x-go-name": "TokenType"
          }
        }
      },
      "ActivateUserResponse": {
        "type": "object",
        "required": [
          "user"
        ],
        "properties": {
          "user": {
            "type": "string",
            "x-go-name": "User"
          }
        }
      },
      "AddExistingClusterResponse": {
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Type"
          }
        }
      },
      "AddTagRequestData": {
        "type": "object",
        "required": [
          "tag"
        ],
        "properties": {
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        }
      },
      "AddTagResponse": {
        "type": "object",
        "required": [
          "tags"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Tags"
          }
        }
      },
      "AddToOrgsRequestData": {
        "type": "object",
        "required": [
          "orgIds"
        ],
        "properties": {
          "orgIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrgIDs"
          }
        }
      },
      "AddToOrgsResponse": {
        "type": "object",
        "required": [
          "orgIds"
        ],
        "properties": {
          "orgIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "OrgIDs"
          }
        }
      },
      "Agent": {
        "allOf": [
          {
            "$ref": "#/definitions/BaseModelUUID"
          },
          {
            "type": "object",
            "required": [
              "agentId",
              "orgId",
              "projectId",
              "name",
              "desc",
              "timestamp",
              "status"
            ],
            "properties": {
              "agentId": {
                "description": "agentID",
                "type": "string",
                "x-go-name": "AgentID"
              },
              "desc": {
                "description": "desc",
                "type": "string",
                "x-go-name": "Desc"
              },
              "name": {
                "description": "name",
                "type": "string",
                "x-go-name": "Name"
              },
              "orgId": {
                "description": "orgID",
                "type": "string",
                "x-go-name": "OrgID"
              },
              "projectId": {
                "description": "projectID",
                "type": "string",
                "x-go-name": "ProjectID"
              },
              "status": {
                "description": "agent状态 0-off, 1-on",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Status"
              },
              "timestamp": {
                "description": "记录时间",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Timestamp"
              }
            }
          }
        ]
      },
      "AgentInfo": {
        "type": "object",
        "required": [
          "totalCount",
          "activeCount"
        ],
        "properties": {
          "activeCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ActiveCount"
          },
          "totalCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "TotalCount"
          }
        }
      },
      "AlarmConfigurationResponse": {
        "type": "object",
        "required": [
          "enabled",
          "email",
          "webhook",
          "onlyCritical",
          "silenceInterval",
          "resolveInterval",
          "stormInterval",
          "stormMaxAlarms"
        ],
        "properties": {
          "email": {
            "x-go-name": "Email",
            "$ref": "#/definitions/AlarmNotificationEmailConfiguration"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "onlyCritical": {
            "type": "boolean",
            "x-go-name": "NotifyOnlyCritical"
          },
          "resolveInterval": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ResolveInterval"
          },
          "silenceInterval": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SilenceInterval"
          },
          "stormInterval": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "StormInterval"
          },
          "stormMaxAlarms": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "StormMaxAlarms"
          },
          "webhook": {
            "x-go-name": "Webhook",
            "$ref": "#/definitions/AlarmNotificationWebhookConfiguration"
          }
        }
      },
      "AlarmNotificationEmailConfiguration": {
        "type": "object",
        "required": [
          "enabled",
          "receivers"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "receivers": {
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "Receivers",
            "x-go-validate": "@array[0,10]:@email"
          }
        }
      },
      "AlarmNotificationWebhookConfiguration": {
        "type": "object",
        "required": [
          "enabled",
          "url",
          "headers"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Headers"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        }
      },
      "Alert": {
        "description": "Alert holds one alert for notification templates.",
        "type": "object",
        "required": [
          "status",
          "labels",
          "annotations",
          "startsAt",
          "endsAt",
          "generatorURL",
          "fingerprint"
        ],
        "properties": {
          "annotations": {
            "x-go-name": "Annotations",
            "$ref": "#/definitions/KV"
          },
          "endsAt": {
            "x-go-name": "EndsAt",
            "$ref": "#/definitions/Time"
          },
          "fingerprint": {
            "type": "string",
            "x-go-name": "Fingerprint"
          },
          "generatorURL": {
            "type": "string",
            "x-go-name": "GeneratorURL"
          },
          "labels": {
            "x-go-name": "Labels",
            "$ref": "#/definitions/KV"
          },
          "startsAt": {
            "x-go-name": "StartsAt",
            "$ref": "#/definitions/Time"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      },
      "Alerts": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Alert"
        }
      },
      "AuthTokenConfig": {
        "type": "object",
        "required": [
          "accessTokenDuration",
          "refreshTokenDuration"
        ],
        "properties": {
          "accessTokenDuration": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "AccessTokenDuration"
          },
          "refreshTokenDuration": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RefreshTokenDuration"
          }
        }
      },
      "BCServerData": {
        "type": "object",
        "required": [
          "server_name",
          "scheme"
        ],
        "properties": {
          "scheme": {
            "type": "string",
            "x-go-name": "Scheme"
          },
          "server_name": {
            "type": "string",
            "x-go-name": "ServerName"
          }
        }
      },
      "Backup": {
        "type": "object",
        "required": [
          "created_at",
          "filename",
          "node",
          "size"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "filename": {
            "type": "string",
            "x-go-name": "Filename"
          },
          "node": {
            "type": "string",
            "x-go-name": "Node"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          }
        }
      },
      "BackupDeleteResp": {
        "type": "object",
        "required": [
          "msg"
        ],
        "properties": {
          "msg": {
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      },
      "BackupFileUploadReqData": {
        "type": "object",
        "required": [
          "filename",
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "x-go-name": "File"
          },
          "filename": {
            "type": "string",
            "x-go-name": "FileName"
          }
        }
      },
      "BackupFileUploadResp": {
        "type": "object",
        "required": [
          "msg"
        ],
        "properties": {
          "msg": {
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      },
      "BackupImmediatelyResp": {
        "type": "object",
        "required": [
          "msg"
        ],
        "properties": {
          "msg": {
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      },
      "BackupImportReqData": {
        "type": "object",
        "required": [
          "filename",
          "node"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "x-go-name": "FileName"
          },
          "node": {
            "type": "string",
            "x-go-name": "Node"
          }
        }
      },
      "BackupImportResp": {
        "type": "object",
        "required": [
          "msg"
        ],
        "properties": {
          "msg": {
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      },
      "BackupListReqData": {
        "type": "object",
        "required": [
          "deploy_ids"
        ],
        "properties": {
          "deploy_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "DeployIds"
          }
        }
      },
      "BackupListResp": {
        "type": "object",
        "required": [
          "data",
          "deploy_id_name_map",
          "errors"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ListBackupResponse"
            },
            "x-go-name": "Data"
          },
          "deploy_id_name_map": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "DeployIdNameMap"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Errors"
          }
        }
      },
      "BackupTask": {
        "allOf": [
          {
            "$ref": "#/definitions/BaseModel"
          },
          {
            "type": "object",
            "required": [
              "deploy_id",
              "up_time"
            ],
            "properties": {
              "deploy_id": {
                "type": "string",
                "x-go-name": "DeployID"
              },
              "schedule_type": {
                "description": "周期任务类型类别，值参见 internal/pkg/backup/constants.go",
                "type": "integer",
                "format": "uint8",
                "default": "0",
                "x-go-name": "ScheduleType"
              },
              "status": {
                "description": "执行状态，值参见 internal/pkg/backup/constants.go",
                "type": "integer",
                "format": "uint8",
                "default": "",
                "x-go-name": "Status"
              },
              "type": {
                "description": "任务类型，值参见 internal/pkg/backup/constants.go",
                "type": "integer",
                "format": "uint8",
                "default": "0",
                "x-go-name": "Type"
              },
              "up_time": {
                "description": "启动时间",
                "x-go-name": "UpTime",
                "$ref": "#/definitions/Time"
              }
            }
          }
        ]
      },
      "BackupTaskListResp": {
        "type": "object",
        "required": [
          "data",
          "deploy_id_name_map"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BackupTask"
              }
            },
            "x-go-name": "Data"
          },
          "deploy_id_name_map": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "DeployIdNameMap"
          }
        }
      },
      "BaseModel": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "updated_at": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "BaseModelUUID": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "BatchAddTagResponse": {
        "type": "object",
        "required": [
          "failedServiceNames"
        ],
        "properties": {
          "failedServiceNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "FailedEdgeServiceNames"
          }
        }
      },
      "BatchCreateResp": {
        "type": "object",
        "required": [
          "batchId",
          "errMap"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          },
          "errMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "ErrMap"
          }
        }
      },
      "BatchDeleteResp": {
        "type": "object",
        "required": [
          "batchId"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          }
        }
      },
      "BatchInfo": {
        "type": "object",
        "required": [
          "edgeInfoId",
          "taskId",
          "edgeName",
          "taskProgress",
          "taskStatus"
        ],
        "properties": {
          "edgeInfoId": {
            "type": "string",
            "x-go-name": "EdgeInfoId"
          },
          "edgeName": {
            "type": "string",
            "x-go-name": "EdgeName"
          },
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          },
          "taskProgress": {
            "type": "string",
            "x-go-name": "TaskProgress"
          },
          "taskStatus": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "TaskStatus"
          }
        }
      },
      "BatchInfoResp": {
        "type": "object",
        "required": [
          "data",
          "success",
          "failed",
          "running"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BatchInfo"
            },
            "x-go-name": "Data"
          },
          "failed": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Failed"
          },
          "running": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Running"
          },
          "success": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Success"
          }
        }
      },
      "BatchReqBody": {
        "type": "object",
        "properties": {
          "batchId": {
            "description": "查询某批次，就只填 batchId",
            "type": "string",
            "default": "",
            "x-go-name": "BatchId"
          },
          "edgeIds": {
            "description": "查询指定EdgeId的安装信息， 就将其填入 edgeIds 列表中",
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "EdgeIds"
          }
        }
      },
      "BatchRestartResp": {
        "type": "object",
        "required": [
          "batchId"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          }
        }
      },
      "BatchResult": {
        "type": "object",
        "required": [
          "edgeServiceId",
          "edgeServiceName",
          "status",
          "failureReason"
        ],
        "properties": {
          "edgeServiceId": {
            "type": "string",
            "x-go-name": "EdgeServiceID"
          },
          "edgeServiceName": {
            "type": "string",
            "x-go-name": "EdgeServiceName"
          },
          "failureReason": {
            "type": "string",
            "x-go-name": "FailureReason"
          },
          "status": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Status"
          }
        }
      },
      "BatchStartResp": {
        "type": "object",
        "required": [
          "batchId"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          }
        }
      },
      "BatchStopResp": {
        "type": "object",
        "required": [
          "batchId"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          }
        }
      },
      "BatchTagRequestData": {
        "type": "object",
        "required": [
          "serviceIds",
          "tag"
        ],
        "properties": {
          "serviceIds": {
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "EdgeServiceIDs",
            "x-go-validate": "@array[1,]"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        }
      },
      "BatchUpdateInfoResp": {
        "type": "object",
        "required": [
          "data",
          "success",
          "failed",
          "running"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BatchResult"
            },
            "x-go-name": "Data"
          },
          "failed": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Failed"
          },
          "running": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Running"
          },
          "success": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Success"
          }
        }
      },
      "BatchUpdateResp": {
        "type": "object",
        "required": [
          "batchId"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          }
        }
      },
      "ClusterAgent": {
        "type": "object",
        "required": [
          "id",
          "state",
          "nodeId",
          "version",
          "dashboard",
          "err",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "dashboard": {
            "type": "boolean",
            "x-go-name": "Dashboard"
          },
          "err": {
            "type": "string",
            "x-go-name": "Error"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "nodeId": {
            "type": "string",
            "x-go-name": "NodeID"
          },
          "state": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "State"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "ClusterAgentArchitectureSetupInstructions": {
        "type": "object",
        "required": [
          "architecture",
          "installInstructions",
          "registerInstructions"
        ],
        "properties": {
          "architecture": {
            "type": "string",
            "x-go-name": "Architecture"
          },
          "installInstructions": {
            "type": "string",
            "x-go-name": "InstallInstructions"
          },
          "registerInstructions": {
            "type": "string",
            "x-go-name": "RegisterInstructions"
          }
        }
      },
      "ClusterLicenseItem": {
        "type": "object",
        "required": [
          "orgId",
          "projectId",
          "deployId",
          "name",
          "status",
          "createdAt",
          "updatedAt",
          "connectLimit"
        ],
        "properties": {
          "connectLimit": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "ConnectLimit"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "deployId": {
            "type": "string",
            "x-go-name": "DeployID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "projectId": {
            "type": "string",
            "x-go-name": "ProjectID"
          },
          "status": {
            "type": "integer",
            "format": "int8",
            "x-go-name": "Status"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "ClusterListInfo": {
        "type": "object",
        "required": [
          "total",
          "list"
        ],
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterLicenseItem"
            },
            "x-go-name": "List"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "ConfigData": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "config"
        ],
        "properties": {
          "config": {
            "description": "注意 Config 的类型",
            "type": "string",
            "x-go-name": "Config"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "CreateAgentBody": {
        "type": "object",
        "required": [
          "agentId",
          "name"
        ],
        "properties": {
          "agentId": {
            "type": "string",
            "x-go-name": "AgentID"
          },
          "desc": {
            "type": "string",
            "default": "",
            "x-go-name": "Desc"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "CreateBackupTaskReqData": {
        "type": "object",
        "required": [
          "deploy_id_list",
          "up_time"
        ],
        "properties": {
          "deploy_id_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "DeployIdList"
          },
          "schedule_type": {
            "type": "integer",
            "format": "uint8",
            "default": "0",
            "x-go-name": "ScheduleType"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "default": "0",
            "x-go-name": "Status"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "default": "0",
            "x-go-name": "Type"
          },
          "up_time": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "UpTime"
          }
        }
      },
      "CreateBackupTaskResp": {
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Error"
          }
        }
      },
      "CreateEdgeBody": {
        "type": "object",
        "required": [
          "category",
          "name",
          "endpoint",
          "tag"
        ],
        "properties": {
          "agentId": {
            "type": "string",
            "default": "",
            "x-go-name": "AgentID"
          },
          "auth": {
            "description": "认证类型(0:无认证; 1:basic; 2:jwt)",
            "type": "integer",
            "format": "int8",
            "default": "0",
            "x-go-name": "Auth"
          },
          "broker": {
            "type": "string",
            "default": "",
            "maxLength": 100,
            "minLength": 0,
            "x-go-name": "Broker",
            "x-go-validate": "@string[0,100]"
          },
          "category": {
            "description": "服务类别(1:ekuiper；2:neuron; 3:nanomq; 4:neuronex 99:customize)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "Category"
          },
          "desc": {
            "type": "string",
            "default": "",
            "maxLength": 500,
            "minLength": 0,
            "x-go-name": "Desc",
            "x-go-validate": "@string[0,500]"
          },
          "endpoint": {
            "type": "string",
            "x-go-name": "Endpoint"
          },
          "key": {
            "type": "string",
            "default": "",
            "maxLength": 500,
            "minLength": 0,
            "x-go-name": "Key",
            "x-go-validate": "@string[0,500]"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@regexp[^[一-龥a-zA-Z0-9 -]{1,200}$]"
          },
          "nodeType": {
            "description": "节点类型(3:proxy; 4:direct)",
            "type": "integer",
            "format": "int8",
            "default": "4",
            "x-go-name": "NodeType"
          },
          "scheme": {
            "type": "string",
            "default": "http",
            "x-go-name": "Scheme"
          },
          "secret": {
            "description": "经aes-cbc及base64加密",
            "type": "string",
            "default": "",
            "maxLength": 500,
            "minLength": 0,
            "x-go-name": "Secret",
            "x-go-validate": "@string[0,500]"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        }
      },
      "CreateEdgeResp": {
        "type": "object",
        "required": [
          "data",
          "tip"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EdgeService"
          },
          "tip": {
            "type": "string",
            "x-go-name": "Tip"
          }
        }
      },
      "CreateIdentityProviderRequestData": {
        "type": "object",
        "required": [
          "type",
          "name",
          "enabled",
          "idPSsoUrl",
          "idpSloUrl",
          "spEntityId",
          "spAcsUrl",
          "spSloUrl",
          "signAuthn",
          "forceAuthn",
          "validateSignature",
          "validatingCertificate"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "forceAuthn": {
            "type": "boolean",
            "x-go-name": "ForceAuthenticate"
          },
          "idPSsoUrl": {
            "description": "saml config",
            "type": "string",
            "default": "",
            "x-go-name": "IdPSSOURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "idpSloUrl": {
            "type": "string",
            "default": "",
            "x-go-name": "IdPSLOURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "name": {
            "type": "string",
            "default": "",
            "maxLength": 50,
            "minLength": 1,
            "x-go-name": "Name",
            "x-go-validate": "@string[1,50]"
          },
          "signAuthn": {
            "type": "boolean",
            "x-go-name": "SignAuthnRequests"
          },
          "spAcsUrl": {
            "type": "string",
            "default": "",
            "x-go-name": "SPACSURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "spEntityId": {
            "type": "string",
            "x-go-name": "SPEntityID"
          },
          "spSloUrl": {
            "type": "string",
            "default": "",
            "x-go-name": "SPSLOURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "type": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Type",
            "x-go-validate": "@string[1,]"
          },
          "validateSignature": {
            "type": "boolean",
            "x-go-name": "ValidateSignature"
          },
          "validatingCertificate": {
            "type": "string",
            "x-go-name": "ValidatingCertificate"
          }
        }
      },
      "CreateIdentityProviderResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "CreateNodeBody": {
        "type": "object",
        "required": [
          "dockerHost",
          "name"
        ],
        "properties": {
          "desc": {
            "type": "string",
            "default": "",
            "x-go-name": "Desc"
          },
          "dockerHost": {
            "description": "Tls        bool   `json:\"tls\"  default:\"false\" `\n//cacertPath, certPath, keyPath\nCacertPath string `json:\"cacertPath\" default:\"\"`\nCertPath   string `json:\"certPath\" default:\"\"`\nKeyPath    string `json:\"keyPath\" default:\"\"`",
            "type": "string",
            "x-go-name": "DockerHost"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "CreateOptions": {
        "type": "object",
        "required": [
          "dockerIaasId",
          "category",
          "serviceName",
          "containerName",
          "disableAuth",
          "image"
        ],
        "properties": {
          "category": {
            "description": "edge service properties\n(1:kuiper；2:neuron; 3:edge; 4:neuronex; 99:customize)",
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Category"
          },
          "cmd": {
            "description": "CMD \u0026 Entrypoint",
            "type": "string",
            "default": "",
            "x-go-name": "Cmd"
          },
          "containerName": {
            "type": "string",
            "x-go-name": "ContainerName"
          },
          "desc": {
            "type": "string",
            "default": "",
            "maxLength": 500,
            "minLength": 0,
            "x-go-name": "Desc",
            "x-go-validate": "@string[0,500]"
          },
          "disableAuth": {
            "type": "boolean",
            "x-go-name": "DisableAuth"
          },
          "dockerIaasId": {
            "description": "Docker iaas info",
            "type": "integer",
            "format": "uint64",
            "x-go-name": "DockerIaasId"
          },
          "entrypoint": {
            "type": "string",
            "default": "",
            "x-go-name": "Entrypoint"
          },
          "environments": {
            "description": "RestartPolicy string            `json:\"restartPolicy,omitempty\"`\nEnvironment",
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "Environments"
          },
          "image": {
            "description": "image pull secret",
            "type": "string",
            "x-go-name": "Image"
          },
          "ports": {
            "description": "port",
            "type": "object",
            "default": "",
            "additionalProperties": {
              "type": "integer",
              "format": "uint64"
            },
            "x-go-name": "Ports"
          },
          "registryPassword": {
            "type": "string",
            "default": "",
            "x-go-name": "RegistryPassword"
          },
          "registryUsername": {
            "type": "string",
            "default": "",
            "x-go-name": "RegistryUsername"
          },
          "serviceName": {
            "type": "string",
            "x-go-name": "ServiceName"
          },
          "shell": {
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "Shell"
          },
          "tag": {
            "type": "string",
            "default": "",
            "x-go-name": "Tag"
          },
          "volumes": {
            "type": "object",
            "default": "",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Volumes"
          }
        }
      },
      "CreateOrgRequestData": {
        "type": "object",
        "required": [
          "name",
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          }
        }
      },
      "CreateOrgResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "CreateProjectRequestData": {
        "type": "object",
        "required": [
          "name",
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProjectMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          }
        }
      },
      "CreateProjectResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProjectMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "CreateResp": {
        "type": "object",
        "required": [
          "batchId"
        ],
        "properties": {
          "batchId": {
            "type": "string",
            "x-go-name": "BatchId"
          }
        }
      },
      "CreateTagRequestData": {
        "type": "object",
        "required": [
          "name",
          "serviceIds"
        ],
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "serviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "EdgeServiceIDs"
          }
        }
      },
      "CreateTagResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "tagged",
          "failedServiceNames",
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "failedServiceNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "FailedEdgeServiceNames"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "tagged": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TaggedCount"
          }
        }
      },
      "CreateTaskInfo": {
        "type": "object",
        "required": [
          "deploy_id",
          "user_id",
          "type"
        ],
        "properties": {
          "deploy_id": {
            "type": "string",
            "x-go-name": "DeployID"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Type"
          },
          "user_id": {
            "type": "string",
            "x-go-name": "UserID"
          }
        }
      },
      "CreateTaskResp": {
        "type": "object",
        "required": [
          "task_id"
        ],
        "properties": {
          "task_id": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "CreateUserRequestData": {
        "type": "object",
        "required": [
          "name",
          "email",
          "admin",
          "password"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "IsAdmin"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          }
        }
      },
      "CreateUserResponse": {
        "type": "object",
        "required": [
          "id",
          "email",
          "name",
          "admin",
          "createdAt"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "DataBody": {
        "type": "object",
        "required": [
          "data",
          "total"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DockerIaasData"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "DeleteBackupTaskResp": {
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      },
      "DeleteBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "DeleteKubeConfigResp": {
        "type": "object"
      },
      "DeleteOptions": {
        "type": "object",
        "required": [
          "serviceId"
        ],
        "properties": {
          "serviceId": {
            "type": "string",
            "x-go-name": "ServiceId"
          }
        }
      },
      "DeleteResp": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "DeliverBody": {
        "type": "object",
        "required": [
          "title",
          "defaultValue",
          "value",
          "type",
          "function"
        ],
        "properties": {
          "defaultValue": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Default"
          },
          "function": {
            "description": "1-ekuiper,2-neuron",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Function"
          },
          "title": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Title"
          },
          "type": {
            "description": "0-all,1-partial",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Typ"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-go-name": "Value"
          }
        }
      },
      "DeliverResultItem": {
        "allOf": [
          {
            "$ref": "#/definitions/EdgeService"
          },
          {
            "type": "object",
            "required": [
              "tags",
              "taskId",
              "taskStatus",
              "failureError",
              "failureReason"
            ],
            "properties": {
              "failureError": {
                "type": "string",
                "x-go-name": "FailureError"
              },
              "failureReason": {
                "type": "string",
                "x-go-name": "FailureReason"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-go-name": "Tags"
              },
              "taskId": {
                "type": "string",
                "x-go-name": "TaskID"
              },
              "taskStatus": {
                "type": "integer",
                "format": "int64",
                "x-go-name": "TaskStatus"
              }
            }
          }
        ]
      },
      "DeliverResultResp": {
        "type": "object",
        "required": [
          "data",
          "successCount",
          "failureCount"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeliverResultItem"
            },
            "x-go-name": "Data"
          },
          "failureCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "FailureCount"
          },
          "successCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SuccessCount"
          }
        }
      },
      "DeployData": {
        "type": "object",
        "required": [
          "id",
          "type",
          "deployName",
          "orgId",
          "projectId",
          "status",
          "creator",
          "desc",
          "upTime",
          "createdAt",
          "updatedAt",
          "expectReplicas",
          "replicas",
          "taskId",
          "image",
          "network",
          "namespace",
          "resourceLimit",
          "connectLimit",
          "version",
          "registrationToken",
          "dashboardEnabled"
        ],
        "properties": {
          "connectLimit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectLimit"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "creator": {
            "type": "string",
            "x-go-name": "Creator"
          },
          "dashboardEnabled": {
            "type": "boolean",
            "x-go-name": "DashboardEnabled"
          },
          "deployName": {
            "type": "string",
            "x-go-name": "DeployName"
          },
          "desc": {
            "type": "string",
            "x-go-name": "Desc"
          },
          "expectReplicas": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "ExpectReplicas"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "image": {
            "type": "string",
            "x-go-name": "Image"
          },
          "namespace": {
            "type": "string",
            "x-go-name": "Namespace"
          },
          "network": {
            "type": "string",
            "x-go-name": "Network"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "projectId": {
            "type": "string",
            "x-go-name": "ProjectID"
          },
          "registrationToken": {
            "type": "string",
            "x-go-name": "RegistrationToken"
          },
          "replicas": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Replicas"
          },
          "resourceLimit": {
            "type": "string",
            "x-go-name": "ResourceLimit"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          },
          "taskId": {
            "description": "BC创建的集群",
            "type": "string",
            "x-go-name": "TaskID"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Type"
          },
          "upTime": {
            "x-go-name": "UpTime",
            "$ref": "#/definitions/Time"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          },
          "version": {
            "description": "纳管集群",
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "DockerIaas": {
        "allOf": [
          {
            "$ref": "#/definitions/BaseModel"
          },
          {
            "type": "object",
            "required": [
              "orgId",
              "projectId",
              "dockerHost",
              "name",
              "desc"
            ],
            "properties": {
              "desc": {
                "type": "string",
                "x-go-name": "Desc"
              },
              "dockerHost": {
                "description": "Tls        bool   `json:\"tls\"`\n//cacertPath, certPath, keyPath\nCacertPath string `json:\"cacertPath\"`\nCertPath   string `json:\"certPath\"`\nKeyPath    string `json:\"keyPath\"`",
                "type": "string",
                "x-go-name": "DockerHost"
              },
              "name": {
                "type": "string",
                "x-go-name": "Name"
              },
              "orgId": {
                "description": "docker properties",
                "type": "string",
                "x-go-name": "OrgID"
              },
              "projectId": {
                "type": "string",
                "x-go-name": "ProjectID"
              }
            }
          }
        ]
      },
      "DockerIaasData": {
        "allOf": [
          {
            "$ref": "#/definitions/DockerIaas"
          },
          {
            "type": "object",
            "required": [
              "edgeserviceNum"
            ],
            "properties": {
              "edgeserviceNum": {
                "type": "integer",
                "format": "int64",
                "x-go-name": "EdgeserviceNum"
              }
            }
          }
        ]
      },
      "DockerInfo": {
        "type": "object",
        "required": [
          "port"
        ],
        "properties": {
          "cacertBytes": {
            "description": "cacertPath, certPath, keyPath",
            "type": "array",
            "default": "",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "CacertBytes"
          },
          "certBytes": {
            "type": "array",
            "default": "",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "CertBytes"
          },
          "keyBytes": {
            "type": "array",
            "default": "",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "KeyBytes"
          },
          "port": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Port"
          },
          "tls": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "Tls"
          }
        }
      },
      "DockerInfoResponse": {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "x-go-name": "Config",
            "$ref": "#/definitions/DockerInfo"
          }
        }
      },
      "DockerRegistryConfigItemDTO": {
        "type": "object",
        "required": [
          "url",
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "url": {
            "type": "string",
            "x-go-name": "Url"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      },
      "EMQXEENode": {
        "type": "object",
        "required": [
          "node",
          "version",
          "status",
          "uptime"
        ],
        "properties": {
          "node": {
            "type": "string",
            "x-go-name": "NodeID"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "uptime": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "UpTime"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "EcpVersion": {
        "type": "object",
        "required": [
          "version",
          "commit",
          "created"
        ],
        "properties": {
          "commit": {
            "type": "string",
            "x-go-name": "Commit"
          },
          "created": {
            "type": "string",
            "x-go-name": "Created"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "EdgeCreateReq": {
        "type": "object",
        "required": [
          "edgeName",
          "tag"
        ],
        "properties": {
          "desc": {
            "type": "string",
            "default": "",
            "x-go-name": "Desc"
          },
          "disableAuth": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "DisableAuth"
          },
          "edgeName": {
            "type": "string",
            "default": "",
            "x-go-name": "EdgeName",
            "x-go-validate": "@regexp[^[一-龥_a-zA-Z0-9 -]{1,200}$]"
          },
          "kuiperImage": {
            "type": "string",
            "default": "",
            "x-go-name": "KuiperImage"
          },
          "neuronImage": {
            "type": "string",
            "default": "",
            "x-go-name": "NeuronImage"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        }
      },
      "EdgeInfo": {
        "type": "object",
        "required": [
          "id",
          "edgeName",
          "orgId",
          "projectId",
          "namespace",
          "neuronImage",
          "kuiperImage",
          "taskId",
          "batch_id",
          "type",
          "desc",
          "creator",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "batch_id": {
            "description": "用于批量安装时， 表示批次",
            "type": "string",
            "x-go-name": "BatchID"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "creator": {
            "type": "string",
            "x-go-name": "Creator"
          },
          "desc": {
            "type": "string",
            "x-go-name": "Desc"
          },
          "edgeName": {
            "type": "string",
            "x-go-name": "EdgeName"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "kuiperImage": {
            "type": "string",
            "x-go-name": "KuiperImage"
          },
          "namespace": {
            "type": "string",
            "x-go-name": "Namespace"
          },
          "neuronImage": {
            "type": "string",
            "x-go-name": "NeuronImage"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "projectId": {
            "type": "string",
            "x-go-name": "ProjectID"
          },
          "taskId": {
            "type": "string",
            "x-go-name": "TaskID"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Type",
            "x-go-named": "github.com/emqx/EMQX-Business-Critical/model/entity.EdgeType"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "EdgeLicenseItem": {
        "type": "object",
        "required": [
          "orgId",
          "projectId",
          "serviceId",
          "category",
          "name",
          "status",
          "tags",
          "createdAt",
          "updatedAt",
          "tagLimit"
        ],
        "properties": {
          "category": {
            "type": "integer",
            "format": "int8",
            "x-go-name": "Category"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "projectId": {
            "type": "string",
            "x-go-name": "ProjectID"
          },
          "serviceId": {
            "type": "string",
            "x-go-name": "ServiceID"
          },
          "status": {
            "type": "integer",
            "format": "int8",
            "x-go-name": "Status"
          },
          "tagLimit": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "TagLimit"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Tags"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "EdgeListInfo": {
        "type": "object",
        "required": [
          "total",
          "list"
        ],
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EdgeLicenseItem"
            },
            "x-go-name": "List"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "EdgeService": {
        "type": "object",
        "required": [
          "orgId",
          "projectId",
          "serviceId",
          "category",
          "name",
          "desc",
          "nodeType",
          "endpoint",
          "status",
          "broker",
          "autoRecover",
          "autoStart",
          "apiVersion",
          "auth",
          "key",
          "secret",
          "createdAt",
          "updatedAt",
          "scheme",
          "agentId",
          "edgeInfoId",
          "dockerDeployId",
          "allocatedTag"
        ],
        "properties": {
          "agentId": {
            "type": "string",
            "x-go-name": "AgentID"
          },
          "allocatedTag": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "AllocatedTag"
          },
          "apiVersion": {
            "description": "边缘服务版本",
            "type": "string",
            "x-go-name": "ApiVersion"
          },
          "auth": {
            "description": "认证类型(0:无认证; 1:basic; 2:jwt)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "Auth"
          },
          "autoRecover": {
            "description": "是否支持自动恢复(1:支持；2:不支持)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "AutoRecover"
          },
          "autoStart": {
            "description": "是否支持自动启动(1:支持；2:不支持)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "AutoStart"
          },
          "broker": {
            "description": "broker",
            "type": "string",
            "x-go-name": "Broker"
          },
          "category": {
            "description": "服务类别(1:ekuiper；2:neuron; 3:nanomq; 99:customize)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "Category"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "desc": {
            "type": "string",
            "x-go-name": "Desc"
          },
          "dockerDeployId": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "DockerDeployId"
          },
          "edgeInfoId": {
            "type": "string",
            "x-go-name": "EdgeInfoId"
          },
          "endpoint": {
            "description": "边缘地址(不带协议头)",
            "type": "string",
            "x-go-name": "EndPoint"
          },
          "key": {
            "type": "string",
            "x-go-name": "Key"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "nodeType": {
            "description": "节点类型(3:proxy; 4:direct)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "NodeType"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "projectId": {
            "type": "string",
            "x-go-name": "ProjectID"
          },
          "scheme": {
            "type": "string",
            "x-go-name": "Scheme"
          },
          "secret": {
            "description": "经aes-cbc及base64加密后入库",
            "type": "string",
            "x-go-name": "Secret"
          },
          "serviceId": {
            "type": "string",
            "x-go-name": "ServiceID"
          },
          "status": {
            "description": "状态(1:运行；2:停止；3:冻结状态更新)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "Status"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "EdgeServiceInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/EdgeService"
          },
          {
            "type": "object",
            "required": [
              "tags"
            ],
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-go-name": "Tags"
              }
            }
          }
        ]
      },
      "EdgeServiceItem": {
        "allOf": [
          {
            "$ref": "#/definitions/EdgeService"
          },
          {
            "type": "object",
            "required": [
              "tags"
            ],
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-go-name": "Tags"
              }
            }
          }
        ]
      },
      "EdgeServiceLicenseConfigData": {
        "type": "object",
        "properties": {
          "maxUnmanagedDays": {
            "type": "integer",
            "format": "int64",
            "default": "7",
            "x-go-name": "MaxUnmanagedDays"
          }
        }
      },
      "EdgeStats": {
        "type": "object",
        "required": [
          "neuron",
          "ekuiper"
        ],
        "properties": {
          "ekuiper": {
            "x-go-name": "Ekuiper",
            "$ref": "#/definitions/EkuiperStats"
          },
          "neuron": {
            "x-go-name": "Neuron",
            "$ref": "#/definitions/NeuronStats"
          }
        }
      },
      "EdgeUpdateReq": {
        "type": "object",
        "required": [
          "edgeId"
        ],
        "properties": {
          "edgeId": {
            "type": "string",
            "x-go-name": "EdgeId"
          },
          "kuiperImage": {
            "type": "string",
            "default": "",
            "x-go-name": "KuiperImage"
          },
          "neuronImage": {
            "type": "string",
            "default": "",
            "x-go-name": "NeuronImage"
          }
        }
      },
      "EdgeserviceDefaultConfigData": {
        "type": "object",
        "required": [
          "catagory"
        ],
        "properties": {
          "catagory": {
            "type": "integer",
            "format": "uint8",
            "default": "",
            "x-go-name": "Catagory",
            "x-go-validate": "uniqueIndex"
          },
          "environments": {
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "Environments"
          },
          "ports": {
            "type": "object",
            "default": "",
            "additionalProperties": {
              "type": "integer",
              "format": "uint64"
            },
            "x-go-name": "Ports"
          },
          "volumes": {
            "type": "object",
            "default": "",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Volumes"
          }
        }
      },
      "EdgeserviceDefaultConfigResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EdgeserviceDefaultConfigData"
            },
            "x-go-name": "Data"
          }
        }
      },
      "EdgeserviceQuota": {
        "type": "object",
        "required": [
          "neuronCPURequest",
          "kuiperCPURequest",
          "neuronMEMRequest",
          "kuiperMEMRequest"
        ],
        "properties": {
          "kuiperCPULimit": {
            "type": "string",
            "default": "",
            "x-go-name": "KuiperCPULimit"
          },
          "kuiperCPURequest": {
            "type": "string",
            "x-go-name": "KuiperCPURequest"
          },
          "kuiperMEMLimit": {
            "type": "string",
            "default": "",
            "x-go-name": "KuiperMEMLimit"
          },
          "kuiperMEMRequest": {
            "type": "string",
            "x-go-name": "KuiperMEMRequest"
          },
          "neuronCPULimit": {
            "type": "string",
            "default": "",
            "x-go-name": "NeuronCPULimit"
          },
          "neuronCPURequest": {
            "type": "string",
            "x-go-name": "NeuronCPURequest"
          },
          "neuronMEMLimit": {
            "type": "string",
            "default": "",
            "x-go-name": "NeuronMEMLimit"
          },
          "neuronMEMRequest": {
            "type": "string",
            "x-go-name": "NeuronMEMRequest"
          }
        }
      },
      "EdgeserviceQuotaResponse": {
        "type": "object",
        "required": [
          "quota",
          "storageClass"
        ],
        "properties": {
          "quota": {
            "x-go-name": "Quota",
            "$ref": "#/definitions/EdgeserviceQuota"
          },
          "storageClass": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StorageClass"
            },
            "x-go-name": "StorageClass"
          }
        }
      },
      "EkuiperIOStats": {
        "type": "object",
        "required": [
          "total",
          "tps"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Total"
          },
          "tps": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Tps"
          }
        }
      },
      "EkuiperStats": {
        "type": "object",
        "required": [
          "total",
          "watched",
          "rules",
          "in",
          "out"
        ],
        "properties": {
          "in": {
            "x-go-name": "In",
            "$ref": "#/definitions/EkuiperIOStats"
          },
          "out": {
            "x-go-name": "Out",
            "$ref": "#/definitions/EkuiperIOStats"
          },
          "rules": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Rules"
          },
          "total": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Total"
          },
          "watched": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Watched"
          }
        }
      },
      "ElasticsearchConfig": {
        "type": "object",
        "required": [
          "urls",
          "username",
          "password",
          "indexName"
        ],
        "properties": {
          "indexName": {
            "type": "string",
            "x-go-name": "IndexName"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "URLs"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      },
      "EmqxCreateResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/DeployData"
          }
        }
      },
      "EmqxCrtUpdateResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxCrtUpdateRespData"
          }
        }
      },
      "EmqxCrtUpdateRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxDeleteResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxDeleteRespData"
          }
        }
      },
      "EmqxDeleteRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxLicUpdateResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxLicUpdateRespData"
          }
        }
      },
      "EmqxLicUpdateRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxNetUpdateResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxNetUpdateRespData"
          }
        }
      },
      "EmqxNetUpdateRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxProxyReqBody": {
        "type": "object",
        "required": [
          "endPoint"
        ],
        "properties": {
          "endPoint": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "EndPoint",
            "x-go-validate": "@string[1,]"
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "default": "300",
            "minimum": 1,
            "x-go-name": "Timeout",
            "x-go-validate": "@int[1,]"
          }
        }
      },
      "EmqxProxyResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxProxyRespData"
          }
        }
      },
      "EmqxProxyRespData": {
        "type": "object",
        "required": [
          "port"
        ],
        "properties": {
          "port": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Port"
          }
        }
      },
      "EmqxQuota": {
        "type": "object",
        "required": [
          "name",
          "quota"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "Default"
          },
          "description": {
            "type": "string",
            "default": "",
            "x-go-name": "Description"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "uniqueIndex"
          },
          "quota": {
            "x-go-name": "KubeQuotaList",
            "$ref": "#/definitions/KubeQuotaList"
          }
        }
      },
      "EmqxQuotaReq": {
        "type": "object",
        "required": [
          "quotas",
          "storageClass"
        ],
        "properties": {
          "quotas": {
            "x-go-name": "Quotas",
            "$ref": "#/definitions/EmqxQuotas"
          },
          "storageClass": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StorageClass"
            },
            "x-go-name": "StorageClass"
          }
        }
      },
      "EmqxQuotaResp": {
        "type": "object",
        "required": [
          "quotas",
          "storage_class_name"
        ],
        "properties": {
          "quotas": {
            "x-go-name": "Quotas",
            "$ref": "#/definitions/EmqxQuotas"
          },
          "storage_class_name": {
            "type": "string",
            "x-go-name": "StorageClassName"
          },
          "storage_class_size": {
            "type": "string",
            "default": "2048",
            "x-go-name": "StorageClassSize"
          }
        }
      },
      "EmqxQuotas": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EmqxQuota"
        }
      },
      "EmqxRepairResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/DeployData"
          }
        }
      },
      "EmqxScaleResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxScaleRespData"
          }
        }
      },
      "EmqxScaleRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxStartResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/DeployData"
          }
        }
      },
      "EmqxStatusData": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          }
        }
      },
      "EmqxStatusResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxStatusData"
          }
        }
      },
      "EmqxStopResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxStopRespData"
          }
        }
      },
      "EmqxStopRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxTotalQuota": {
        "type": "object",
        "required": [
          "total_cpu_quota",
          "total_memory_quota"
        ],
        "properties": {
          "total_cpu_quota": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "TotalCpuQuota"
          },
          "total_memory_quota": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "TotalMemQuota"
          }
        }
      },
      "EmqxUpdateDynamicLicenseReqBody": {
        "type": "object",
        "required": [
          "connectLimit"
        ],
        "properties": {
          "connectLimit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectLimit"
          }
        }
      },
      "EmqxUpdateDynamicLicenseResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxUpdateDynamicLicenseRespData"
          }
        }
      },
      "EmqxUpdateDynamicLicenseRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxUpdateImageReqBody": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Image",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "EmqxUpdateImageResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxUpdateImageRespData"
          }
        }
      },
      "EmqxUpdateImageRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EmqxVerticalScaleResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EmqxVerticalScaleRespData"
          }
        }
      },
      "EmqxVerticalScaleRespData": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "EnableUserRequestData": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          }
        }
      },
      "EsTargetData": {
        "type": "object",
        "properties": {
          "password": {
            "description": "Index    string `json:\"index\"`",
            "type": "string",
            "default": "",
            "x-go-name": "Password"
          },
          "type": {
            "description": "Type value:  \"external\" or \"internal\", internal equals close this function.",
            "type": "string",
            "default": "internal",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "default": "",
            "x-go-name": "Url"
          },
          "username": {
            "type": "string",
            "default": "",
            "x-go-name": "Username"
          }
        }
      },
      "GetAlarmStatusResponse": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          }
        }
      },
      "GetAlarmsByPageItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "message",
          "resourceId",
          "resourceName",
          "resourceType",
          "severity",
          "startsAt",
          "endsAt"
        ],
        "properties": {
          "endsAt": {
            "x-go-name": "EndsAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "resourceId": {
            "type": "string",
            "x-go-name": "ResourceID"
          },
          "resourceName": {
            "type": "string",
            "x-go-name": "ResourceName"
          },
          "resourceType": {
            "type": "integer",
            "format": "int8",
            "x-go-name": "ResourceType"
          },
          "severity": {
            "type": "integer",
            "format": "int8",
            "x-go-name": "Severity"
          },
          "startsAt": {
            "x-go-name": "StartsAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "GetAlarmsByPageResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GetAlarmsByPageItem"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetAntaresLogListResp": {
        "allOf": [
          {
            "$ref": "#/definitions/PageResponse"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StandardLog"
                },
                "x-go-name": "Data"
              }
            }
          }
        ]
      },
      "GetClusterAgentSetupInstructionsResponse": {
        "type": "object",
        "required": [
          "architectures"
        ],
        "properties": {
          "architectures": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterAgentArchitectureSetupInstructions"
            },
            "x-go-name": "Architectures"
          }
        }
      },
      "GetClusterAgentsResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterAgent"
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetClusterLicMonitorDataResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/ClusterListInfo"
          }
        }
      },
      "GetCurrentAlarmsCountResponse": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Count"
          }
        }
      },
      "GetDeployListResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/InfoList"
          }
        }
      },
      "GetDeployMonitorDataResp": {
        "type": "object",
        "required": [
          "status",
          "nodeCount",
          "connectCount",
          "connectQuota",
          "topicCount",
          "in",
          "out",
          "progress",
          "image",
          "expectReplicas",
          "resourceLimit",
          "version"
        ],
        "properties": {
          "connectCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectCount"
          },
          "connectQuota": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectQuota"
          },
          "expectReplicas": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "ExpectReplicas"
          },
          "image": {
            "type": "string",
            "x-go-name": "Image"
          },
          "in": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "In"
          },
          "nodeCount": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "NodeCount"
          },
          "out": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Out"
          },
          "progress": {
            "description": "BC 集群",
            "type": "string",
            "x-go-name": "Progress"
          },
          "resourceLimit": {
            "type": "string",
            "x-go-name": "ResourceLimit"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          },
          "topicCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TopicCount"
          },
          "version": {
            "description": "纳管集群",
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "GetDeployResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/DeployData"
          }
        }
      },
      "GetEdgeLicMonitorDataResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EdgeListInfo"
          }
        }
      },
      "GetEdgeLogListResp": {
        "allOf": [
          {
            "$ref": "#/definitions/PageResponse"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StandardLog"
                },
                "x-go-name": "Data"
              }
            }
          }
        ]
      },
      "GetEdgeServiceListResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/ListInfo"
          }
        }
      },
      "GetEdgeServiceNamesItem": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "GetEdgeServiceNamesResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GetEdgeServiceNamesItem"
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetEdgeServiceResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EdgeServiceInfo"
          }
        }
      },
      "GetGlobalConfigurationResponse": {
        "type": "object",
        "required": [
          "name",
          "level",
          "configuration"
        ],
        "properties": {
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "x-go-name": "Configuration"
          },
          "level": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Level"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "GetIdentityProvidersResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IdentityProviderItem"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetKubeConfigResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/ConfigData"
          }
        }
      },
      "GetLicenseMonitorDataResp": {
        "type": "object",
        "required": [
          "connectionQuota",
          "connectionConsumption",
          "clusterQuota",
          "clusterConsumptions",
          "edgeServiceQuota",
          "edgeServiceConsumption",
          "maxSingleClusterConnectionCount",
          "tagQuota",
          "tagConsumption"
        ],
        "properties": {
          "clusterConsumptions": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "ClusterConsumptions"
          },
          "clusterQuota": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "ClusterQuota"
          },
          "connectionConsumption": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ConnectionConsumption"
          },
          "connectionQuota": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ConnectionQuota"
          },
          "edgeServiceConsumption": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "EdgeServiceConsumption"
          },
          "edgeServiceQuota": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "EdgeServiceQuota"
          },
          "maxSingleClusterConnectionCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "MaxSingleClusterConnectionCount"
          },
          "tagConsumption": {
            "description": "MinSingleEdgeServiceTagLimit    uint32 `json:\"minSingleEdgeServiceTagCount\"`",
            "type": "integer",
            "format": "uint32",
            "x-go-name": "TagConsumption"
          },
          "tagQuota": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "TagQuota"
          }
        }
      },
      "GetLicenseResponse": {
        "type": "object",
        "required": [
          "type",
          "customerName",
          "customerContact",
          "startDate",
          "expiredDate",
          "expired",
          "totalClusterConnectionCount",
          "maxSingleClusterConnectionCount",
          "maxEmqxClusterCount",
          "maxEdgeServiceCount",
          "maxTagCount"
        ],
        "properties": {
          "customerContact": {
            "type": "string",
            "x-go-name": "CustomerContact"
          },
          "customerName": {
            "type": "string",
            "x-go-name": "CustomerName"
          },
          "expired": {
            "type": "boolean",
            "x-go-name": "Expired"
          },
          "expiredDate": {
            "type": "string",
            "x-go-name": "ExpiredDate"
          },
          "maxEdgeServiceCount": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MaxEdgeServiceCount"
          },
          "maxEmqxClusterCount": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MaxEMQXClusterCount"
          },
          "maxSingleClusterConnectionCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "MaxSingleClusterConnectionCount"
          },
          "maxTagCount": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MaxTagCount"
          },
          "startDate": {
            "type": "string",
            "x-go-name": "StartDate"
          },
          "totalClusterConnectionCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "TotalClusterConnectionCount"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "GetListResp": {
        "allOf": [
          {
            "$ref": "#/definitions/PageResponse"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StandardLog"
                },
                "x-go-name": "Data"
              }
            }
          }
        ]
      },
      "GetLogListResp": {
        "allOf": [
          {
            "$ref": "#/definitions/PageResponse"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StandardLog"
                },
                "x-go-name": "Data"
              }
            }
          }
        ]
      },
      "GetNameIdMapResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetNodeServicesResponse": {
        "type": "object",
        "required": [
          "data",
          "total"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EdgeServiceItem"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetOperationListResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OperationLog"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetOrgConfigurationResponse": {
        "type": "object",
        "required": [
          "name",
          "level",
          "configuration"
        ],
        "properties": {
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "x-go-name": "Configuration"
          },
          "level": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Level"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "GetOrgNamesResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgName"
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetOrgProjectsByPageResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProjectInfo"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetOrgResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MemberInfo"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "GetOrganizationsByPageResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgInfo"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetProfileResponse": {
        "type": "object",
        "required": [
          "userId",
          "name",
          "email",
          "mobile",
          "admin",
          "avatar"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "avatar": {
            "type": "string",
            "x-go-name": "Avatar"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "userId": {
            "type": "string",
            "x-go-name": "UserID"
          }
        }
      },
      "GetProjectConfigurationResponse": {
        "type": "object",
        "required": [
          "name",
          "level",
          "configuration"
        ],
        "properties": {
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "x-go-name": "Configuration"
          },
          "level": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Level"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "GetProjectMonitorDataResp": {
        "allOf": [
          {
            "$ref": "#/definitions/PageResponse"
          },
          {
            "type": "object",
            "required": [
              "clusterCount",
              "userCount",
              "instance"
            ],
            "properties": {
              "clusterCount": {
                "type": "integer",
                "format": "int64",
                "x-go-name": "ClusterCount"
              },
              "instance": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Instance"
                },
                "x-go-name": "Instances"
              },
              "userCount": {
                "type": "integer",
                "format": "int64",
                "x-go-name": "UserCount"
              }
            }
          }
        ]
      },
      "GetProjectNamesResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProjectName"
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetProjectResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "creator",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "creator": {
            "type": "string",
            "x-go-name": "Creator"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProjectMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "GetProjectsByPageResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgProjectInfo"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EdgeInfo"
          }
        }
      },
      "GetSAMLLoginRequestResponse": {
        "type": "object",
        "required": [
          "method",
          "data"
        ],
        "properties": {
          "data": {
            "type": "string",
            "x-go-name": "Data"
          },
          "method": {
            "type": "string",
            "x-go-name": "Method"
          }
        }
      },
      "GetSSOProvidersResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SSOProvider"
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetSupportedLanguagesResponse": {
        "type": "object",
        "required": [
          "languages"
        ],
        "properties": {
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SupportedLanguageItem"
            },
            "x-go-name": "Languages"
          }
        }
      },
      "GetTagUsedResp": {
        "type": "object",
        "required": [
          "tagUsed"
        ],
        "properties": {
          "tagUsed": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TagUsed"
          }
        }
      },
      "GetTaggedEdgeServiceItem": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "GetTaggedEdgeServicesResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GetTaggedEdgeServiceItem"
            },
            "x-go-name": "Data"
          }
        }
      },
      "GetTagsByPageResponse": {
        "type": "object",
        "required": [
          "data",
          "total"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GetTagsByPageTagItem"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetTagsByPageTagItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "tagged",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "tagged": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Tagged"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "GetUserByUserIDResponse": {
        "type": "object",
        "required": [
          "userId",
          "name",
          "email",
          "mobile",
          "verified",
          "enabled",
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "IsAdministrator"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "userId": {
            "type": "string",
            "x-go-name": "UserID"
          },
          "verified": {
            "type": "boolean",
            "x-go-name": "Verified"
          }
        }
      },
      "GetUserListResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserInfo"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "GetUserRolesResponse": {
        "type": "object",
        "required": [
          "roles",
          "orgs"
        ],
        "properties": {
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserOrgRole"
            },
            "x-go-name": "Orgs"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Roles"
          }
        }
      },
      "GlobalAlarmConfigResponse": {
        "type": "object",
        "required": [
          "webhook"
        ],
        "properties": {
          "webhook": {
            "x-go-name": "Webhook",
            "$ref": "#/definitions/GlobalAlarmConfigWebhookData"
          }
        }
      },
      "GlobalAlarmConfigWebhookData": {
        "type": "object",
        "required": [
          "template"
        ],
        "properties": {
          "template": {
            "type": "string",
            "x-go-name": "Template"
          }
        }
      },
      "H": {
        "type": "object",
        "additionalProperties": {}
      },
      "IaasConfigData": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "config"
        ],
        "properties": {
          "config": {
            "description": "注意 Config 的类型， []byte -\u003e string",
            "type": "string",
            "x-go-name": "Config"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "IdentityProviderDetail": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "enabled",
          "createdAt",
          "updatedAt",
          "idpSsoUrl",
          "idpSloUrl",
          "spEntityId",
          "spAcsUrl",
          "spSloUrl",
          "signAuthn",
          "forceAuthn",
          "validateSignature",
          "validatingCertificate"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "forceAuthn": {
            "type": "boolean",
            "x-go-name": "ForceAuthenticate"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "idpSloUrl": {
            "type": "string",
            "x-go-name": "IdPSLOURL"
          },
          "idpSsoUrl": {
            "description": "saml config",
            "type": "string",
            "x-go-name": "IdPSSOURL"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "signAuthn": {
            "type": "boolean",
            "x-go-name": "SignAuthnRequests"
          },
          "spAcsUrl": {
            "type": "string",
            "x-go-name": "SPACSURL"
          },
          "spEntityId": {
            "type": "string",
            "x-go-name": "SPEntityID"
          },
          "spSloUrl": {
            "type": "string",
            "x-go-name": "SPSLOURL"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          },
          "validateSignature": {
            "type": "boolean",
            "x-go-name": "ValidateSignature"
          },
          "validatingCertificate": {
            "type": "string",
            "x-go-name": "ValidatingCertificate"
          }
        }
      },
      "IdentityProviderItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "enabled",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "ImageVersion": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "IsDefault"
          },
          "image": {
            "type": "string",
            "default": "",
            "x-go-name": "Image",
            "x-go-validate": "uniqueIndex"
          }
        }
      },
      "ImportEdgeResp": {
        "type": "object",
        "required": [
          "fails"
        ],
        "properties": {
          "fails": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/failVal"
            },
            "x-go-name": "Fails"
          }
        }
      },
      "ImportParamResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-go-name": "Data"
          }
        }
      },
      "ImportResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Data"
          }
        }
      },
      "ImportTemplate": {
        "type": "object",
        "required": [
          "template"
        ],
        "properties": {
          "template": {
            "type": "string",
            "x-go-name": "Template"
          }
        }
      },
      "InfoList": {
        "type": "object",
        "required": [
          "total",
          "list"
        ],
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeployData"
            },
            "x-go-name": "List"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "Instance": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "name",
          "type",
          "upTime",
          "nodeCount",
          "status",
          "progress",
          "network",
          "image",
          "in",
          "out",
          "connectCount",
          "connectQuota",
          "topicCount",
          "expectReplicas",
          "resourceLimit",
          "version",
          "agent"
        ],
        "properties": {
          "agent": {
            "x-go-name": "Agent",
            "$ref": "#/definitions/AgentInfo"
          },
          "connectCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectCount"
          },
          "connectQuota": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectQuota"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "expectReplicas": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "ExpectReplicas"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "image": {
            "type": "string",
            "x-go-name": "Image"
          },
          "in": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "In"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "network": {
            "type": "string",
            "x-go-name": "Network"
          },
          "nodeCount": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "NodeCount"
          },
          "out": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Out"
          },
          "progress": {
            "type": "string",
            "x-go-name": "Progress"
          },
          "resourceLimit": {
            "type": "string",
            "x-go-name": "ResourceLimit"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          },
          "topicCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TopicCount"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Type"
          },
          "upTime": {
            "x-go-name": "UpTime",
            "$ref": "#/definitions/Time"
          },
          "version": {
            "description": "集群纳管",
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "InviteUserByEmailRequestData": {
        "type": "object",
        "required": [
          "emails",
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "IsAdministrator"
          },
          "emails": {
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "Emails",
            "x-go-validate": "@array[1,]:@email"
          }
        }
      },
      "IsEmailAlreadyInvitedResponse": {
        "type": "object",
        "required": [
          "invited"
        ],
        "properties": {
          "invited": {
            "type": "boolean",
            "x-go-name": "Invited"
          }
        }
      },
      "JwtResp": {
        "type": "object",
        "required": [
          "keyFileName",
          "data"
        ],
        "properties": {
          "data": {
            "type": "string",
            "x-go-name": "Data"
          },
          "keyFileName": {
            "type": "string",
            "x-go-name": "KeyFileName"
          }
        }
      },
      "KV": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "KubeQuota": {
        "type": "object",
        "required": [
          "cpu",
          "memory"
        ],
        "properties": {
          "cpu": {
            "x-go-name": "Cpu",
            "$ref": "#/definitions/KubeQuotaValue"
          },
          "memory": {
            "x-go-name": "Memory",
            "$ref": "#/definitions/KubeQuotaValue"
          }
        }
      },
      "KubeQuotaList": {
        "type": "object",
        "required": [
          "emqx",
          "telegraf"
        ],
        "properties": {
          "emqx": {
            "x-go-name": "Emqx",
            "$ref": "#/definitions/KubeQuota"
          },
          "telegraf": {
            "x-go-name": "Telegraf",
            "$ref": "#/definitions/KubeQuota"
          }
        }
      },
      "KubeQuotaValue": {
        "type": "object",
        "required": [
          "request",
          "limit"
        ],
        "properties": {
          "limit": {
            "type": "string",
            "x-go-name": "Limit"
          },
          "request": {
            "type": "string",
            "x-go-name": "Request"
          }
        }
      },
      "KuiperQuota": {
        "type": "object",
        "required": [
          "kuiperCPURequest",
          "kuiperMEMRequest",
          "storageClass"
        ],
        "properties": {
          "kuiperCPULimit": {
            "type": "string",
            "default": "",
            "x-go-name": "KuiperCPULimit"
          },
          "kuiperCPURequest": {
            "type": "string",
            "x-go-name": "KuiperCPURequest"
          },
          "kuiperMEMLimit": {
            "type": "string",
            "default": "",
            "x-go-name": "KuiperMEMLimit"
          },
          "kuiperMEMRequest": {
            "type": "string",
            "x-go-name": "KuiperMEMRequest"
          },
          "storageClass": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StorageClass"
            },
            "x-go-name": "StorageClass"
          }
        }
      },
      "KuiperVersion": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "IsDefault"
          },
          "image": {
            "type": "string",
            "default": "",
            "x-go-name": "Image",
            "x-go-validate": "uniqueIndex"
          }
        }
      },
      "LbAnnotation": {
        "type": "object",
        "required": [
          "name",
          "max_connection"
        ],
        "properties": {
          "annotations": {
            "type": "string",
            "default": "{}",
            "x-go-name": "Annotations"
          },
          "desc": {
            "type": "string",
            "default": "",
            "x-go-name": "Desc"
          },
          "is_enabled": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "IsEnabled"
          },
          "max_connection": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "MaxConnection"
          },
          "min_connection": {
            "type": "integer",
            "format": "uint64",
            "default": "1",
            "x-go-name": "MinConnection"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "uniqueIndex"
          }
        }
      },
      "ListAgentResp": {
        "allOf": [
          {
            "$ref": "#/definitions/PageResponse"
          },
          {
            "type": "object",
            "required": [
              "agents"
            ],
            "properties": {
              "agents": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Agent"
                },
                "x-go-name": "Agents"
              }
            }
          }
        ]
      },
      "ListBackupResponse": {
        "type": "object",
        "required": [
          "code",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Backup"
            },
            "x-go-name": "Data"
          }
        }
      },
      "ListData": {
        "type": "object",
        "required": [
          "total",
          "list"
        ],
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EdgeInfo"
            },
            "x-go-name": "List"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "ListInfo": {
        "type": "object",
        "required": [
          "total",
          "list"
        ],
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EdgeServiceItem"
            },
            "x-go-name": "List"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "ListKubeConfigResp": {
        "type": "object",
        "required": [
          "total",
          "list"
        ],
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConfigData"
            },
            "x-go-name": "List"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "ListNodeResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/DataBody"
          }
        }
      },
      "ListResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/ListData"
          }
        }
      },
      "LoginRequestData": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Password",
            "x-go-validate": "@string[1,]"
          },
          "username": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Username",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "MQTTConfig": {
        "type": "object",
        "required": [
          "server",
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "server": {
            "type": "string",
            "x-go-name": "Server"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      },
      "ManifestLicense": {
        "type": "object",
        "required": [
          "type",
          "expired",
          "expiredAt"
        ],
        "properties": {
          "expired": {
            "type": "boolean",
            "x-go-name": "Expired"
          },
          "expiredAt": {
            "type": "string",
            "x-go-name": "ExpiredAt"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "ManifestModuleCluster": {
        "type": "object",
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "type": "boolean",
            "x-go-name": "Enable"
          }
        }
      },
      "ManifestModuleEdgeService": {
        "type": "object",
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "type": "boolean",
            "x-go-name": "Enable"
          }
        }
      },
      "ManifestModules": {
        "type": "object",
        "required": [
          "cluster",
          "edgeservice"
        ],
        "properties": {
          "cluster": {
            "x-go-name": "Cluster",
            "$ref": "#/definitions/ManifestModuleCluster"
          },
          "edgeservice": {
            "x-go-name": "EdgeService",
            "$ref": "#/definitions/ManifestModuleEdgeService"
          }
        }
      },
      "ManifestResponse": {
        "type": "object",
        "required": [
          "version",
          "modules",
          "license",
          "userManagement",
          "uiCustomization",
          "system"
        ],
        "properties": {
          "license": {
            "x-go-name": "License",
            "$ref": "#/definitions/ManifestLicense"
          },
          "modules": {
            "x-go-name": "Modules",
            "$ref": "#/definitions/ManifestModules"
          },
          "system": {
            "x-go-name": "System",
            "$ref": "#/definitions/ManifestSystem"
          },
          "uiCustomization": {
            "x-go-name": "UICustomization",
            "$ref": "#/definitions/ManifestUICustomization"
          },
          "userManagement": {
            "x-go-name": "UserManagement",
            "$ref": "#/definitions/ManifestUserManagement"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version"
          }
        }
      },
      "ManifestSystem": {
        "type": "object",
        "required": [
          "language",
          "mode"
        ],
        "properties": {
          "language": {
            "type": "string",
            "x-go-name": "Language"
          },
          "mode": {
            "type": "string",
            "x-go-name": "Mode"
          }
        }
      },
      "ManifestUICustomization": {
        "type": "object",
        "required": [
          "name",
          "logo",
          "loginBg"
        ],
        "properties": {
          "loginBg": {
            "type": "string",
            "x-go-name": "LoginBackgroundImage"
          },
          "logo": {
            "type": "string",
            "x-go-name": "Logo"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "ManifestUserManagement": {
        "type": "object",
        "required": [
          "verificationMode"
        ],
        "properties": {
          "verificationMode": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "VerificationMode"
          }
        }
      },
      "MemberInfo": {
        "type": "object",
        "required": [
          "userId",
          "name",
          "email",
          "roleIds",
          "enabled"
        ],
        "properties": {
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "x-go-name": "Roles"
          },
          "userId": {
            "type": "string",
            "x-go-name": "ID"
          }
        }
      },
      "MetricGatewayData": {
        "type": "object",
        "required": [
          "url",
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "type": {
            "type": "string",
            "default": "bc",
            "x-go-name": "Type",
            "x-go-validate": "uniqueIndex"
          },
          "url": {
            "type": "string",
            "x-go-name": "Url"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      },
      "MonitorScraperConfig": {
        "type": "object",
        "required": [
          "emqx",
          "neuron",
          "neuronProxy",
          "ekuiper",
          "ekuiperProxy",
          "healthCheckInterval"
        ],
        "properties": {
          "ekuiper": {
            "x-go-name": "EkuiperDirect",
            "$ref": "#/definitions/ScraperConfig"
          },
          "ekuiperProxy": {
            "x-go-name": "EkuiperProxy",
            "$ref": "#/definitions/ScraperConfig"
          },
          "emqx": {
            "x-go-name": "EMQX",
            "$ref": "#/definitions/ScraperConfig"
          },
          "healthCheckInterval": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "HealthCheckInterval",
            "x-go-named": "github.com/emqx/EMQX-Business-Critical/internal/pkg/marshaltype.Duration"
          },
          "neuron": {
            "x-go-name": "NeuronDirect",
            "$ref": "#/definitions/ScraperConfig"
          },
          "neuronProxy": {
            "x-go-name": "NeuronProxy",
            "$ref": "#/definitions/ScraperConfig"
          }
        }
      },
      "NeuronEXVersion": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "IsDefault"
          },
          "image": {
            "type": "string",
            "default": "",
            "x-go-name": "Image",
            "x-go-validate": "uniqueIndex"
          }
        }
      },
      "NeuronQuota": {
        "type": "object",
        "required": [
          "neuronCPURequest",
          "neuronMEMRequest",
          "storageClass"
        ],
        "properties": {
          "neuronCPULimit": {
            "type": "string",
            "default": "",
            "x-go-name": "NeuronCPULimit"
          },
          "neuronCPURequest": {
            "type": "string",
            "x-go-name": "NeuronCPURequest"
          },
          "neuronMEMLimit": {
            "type": "string",
            "default": "",
            "x-go-name": "NeuronMEMLimit"
          },
          "neuronMEMRequest": {
            "type": "string",
            "x-go-name": "NeuronMEMRequest"
          },
          "storageClass": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StorageClass"
            },
            "x-go-name": "StorageClass"
          }
        }
      },
      "NeuronStats": {
        "type": "object",
        "required": [
          "total",
          "watched",
          "south",
          "north"
        ],
        "properties": {
          "north": {
            "x-go-name": "North",
            "$ref": "#/definitions/NodeStats"
          },
          "south": {
            "x-go-name": "South",
            "$ref": "#/definitions/NodeStats"
          },
          "total": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Total"
          },
          "watched": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Watched"
          }
        }
      },
      "NeuronVersion": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "IsDefault"
          },
          "image": {
            "type": "string",
            "default": "",
            "x-go-name": "Image",
            "x-go-validate": "uniqueIndex"
          }
        }
      },
      "NodeStats": {
        "type": "object",
        "required": [
          "total",
          "running",
          "disconnected"
        ],
        "properties": {
          "disconnected": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Disconnected"
          },
          "running": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Running"
          },
          "total": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Total"
          }
        }
      },
      "OperationLog": {
        "type": "object",
        "required": [
          "id",
          "resource",
          "operation",
          "operatorId",
          "operatorName",
          "userId",
          "userName",
          "orgId",
          "orgName",
          "projectId",
          "projectName",
          "clusterId",
          "clusterName",
          "edgeServiceId",
          "edgeServiceName",
          "metadata",
          "createdAt"
        ],
        "properties": {
          "clusterId": {
            "type": "string",
            "x-go-name": "ClusterID"
          },
          "clusterName": {
            "type": "string",
            "x-go-name": "ClusterName"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "edgeServiceId": {
            "type": "string",
            "x-go-name": "EdgeServiceID"
          },
          "edgeServiceName": {
            "type": "string",
            "x-go-name": "EdgeServiceName"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "metadata": {
            "type": "string",
            "x-go-name": "Metadata"
          },
          "operation": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Operation"
          },
          "operatorId": {
            "type": "string",
            "x-go-name": "OperatorID"
          },
          "operatorName": {
            "type": "string",
            "x-go-name": "OperatorName"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "orgName": {
            "type": "string",
            "x-go-name": "OrgName"
          },
          "projectId": {
            "type": "string",
            "x-go-name": "ProjectID"
          },
          "projectName": {
            "type": "string",
            "x-go-name": "ProjectName"
          },
          "resource": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Resource"
          },
          "userId": {
            "type": "string",
            "x-go-name": "UserID"
          },
          "userName": {
            "type": "string",
            "x-go-name": "UserName"
          }
        }
      },
      "OrgInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "projects",
          "members",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Projects"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "OrgMember": {
        "type": "object",
        "required": [
          "userId",
          "roleIds"
        ],
        "properties": {
          "roleIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "x-go-name": "RoleIDs"
          },
          "userId": {
            "type": "string",
            "default": "",
            "x-go-name": "UserID",
            "x-go-validate": "required"
          }
        }
      },
      "OrgName": {
        "type": "object",
        "required": [
          "id",
          "name",
          "projectCount"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "projectCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ProjectCount"
          }
        }
      },
      "OrgProjectInfo": {
        "type": "object",
        "required": [
          "id",
          "orgId",
          "orgName",
          "name",
          "members",
          "clusterCount",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "clusterCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ClusterCount"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MemberInfo"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "orgId": {
            "type": "string",
            "x-go-name": "OrgID"
          },
          "orgName": {
            "type": "string",
            "x-go-name": "OrgName"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "PageResponse": {
        "type": "object",
        "required": [
          "total",
          "size",
          "offset"
        ],
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Offset"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Size"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "PortInfo": {
        "type": "object",
        "required": [
          "name",
          "external",
          "internal"
        ],
        "properties": {
          "external": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "External"
          },
          "internal": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Internal"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "PortInfos": {
        "type": "object",
        "required": [
          "type",
          "ports",
          "annotations",
          "load_balancer_class"
        ],
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Annotations"
          },
          "load_balancer_class": {
            "type": "string",
            "x-go-name": "LoadBalancerClass"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PortInfo"
            },
            "x-go-name": "Ports"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "PreviewAlarmConfigurationNotificationWebhookResponse": {
        "type": "object",
        "required": [
          "template"
        ],
        "properties": {
          "template": {
            "type": "string",
            "x-go-name": "Tempalte"
          }
        }
      },
      "ProjectInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "clusterCount",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "clusterCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ClusterCount"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MemberInfo"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "ProjectMember": {
        "type": "object",
        "required": [
          "userId",
          "roleIds"
        ],
        "properties": {
          "roleIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "x-go-name": "RoleIDs"
          },
          "userId": {
            "type": "string",
            "default": "",
            "x-go-name": "UserID",
            "x-go-validate": "required"
          }
        }
      },
      "ProjectName": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "QueryClusterMetadataResponse": {
        "type": "object",
        "required": [
          "clusterId",
          "elasticsearch",
          "mqtt",
          "tunnel"
        ],
        "properties": {
          "clusterId": {
            "type": "string",
            "x-go-name": "ClusterID"
          },
          "elasticsearch": {
            "x-go-name": "ElasticSearch",
            "$ref": "#/definitions/ElasticsearchConfig"
          },
          "mqtt": {
            "x-go-name": "MQTT",
            "$ref": "#/definitions/MQTTConfig"
          },
          "tunnel": {
            "x-go-name": "Tunnel",
            "$ref": "#/definitions/TunnelConfig"
          }
        }
      },
      "QueryGlobalConfigUserManagementResponse": {
        "type": "object",
        "required": [
          "verification",
          "token"
        ],
        "properties": {
          "token": {
            "x-go-name": "Token",
            "$ref": "#/definitions/AuthTokenConfig"
          },
          "verification": {
            "x-go-name": "Verification",
            "$ref": "#/definitions/UserManagementVerificationConfig"
          }
        }
      },
      "RefreshTokenRequestData": {
        "type": "object",
        "required": [
          "refreshToken"
        ],
        "properties": {
          "refreshToken": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "RefreshToken",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "required": [
          "accessToken",
          "expiresIn",
          "refreshExpiresIn",
          "refreshToken",
          "tokenType"
        ],
        "properties": {
          "accessToken": {
            "type": "string",
            "x-go-name": "AccessToken"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ExpiresIn"
          },
          "refreshExpiresIn": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RefreshExpiresIn"
          },
          "refreshToken": {
            "type": "string",
            "x-go-name": "RefreshToken"
          },
          "tokenType": {
            "type": "string",
            "x-go-name": "TokenType"
          }
        }
      },
      "RegisterClusterAgentData": {
        "type": "object",
        "required": [
          "nodeId",
          "registrationToken"
        ],
        "properties": {
          "nodeId": {
            "type": "string",
            "default": "",
            "x-go-name": "NodeID",
            "x-go-validate": "required"
          },
          "registrationToken": {
            "type": "string",
            "default": "",
            "x-go-name": "RegistrationToken",
            "x-go-validate": "required"
          }
        }
      },
      "RegisterClusterAgentResponse": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      },
      "ReloaderVersion": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "default": "",
            "x-go-name": "Image"
          }
        }
      },
      "ReportClusterAgentInfoData": {
        "type": "object",
        "required": [
          "nodeId",
          "agentVersion",
          "nodeConnectError",
          "clusterFetchError",
          "metricsFetchError",
          "logsFetchError",
          "dashboardEnabled",
          "mqttConnectError",
          "clusterNodes"
        ],
        "properties": {
          "agentVersion": {
            "type": "string",
            "default": "",
            "x-go-name": "AgentVersion",
            "x-go-validate": "required"
          },
          "clusterFetchError": {
            "type": "string",
            "x-go-name": "ClusterFetchError"
          },
          "clusterNodes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EMQXEENode"
            },
            "x-go-name": "ClusterNodes"
          },
          "dashboardEnabled": {
            "type": "boolean",
            "x-go-name": "DashboardEnabled"
          },
          "logsFetchError": {
            "type": "string",
            "x-go-name": "LogsFetchError"
          },
          "metricsFetchError": {
            "type": "string",
            "x-go-name": "MetricsFetchError"
          },
          "mqttConnectError": {
            "type": "string",
            "x-go-name": "MQTTConnectError"
          },
          "nodeConnectError": {
            "type": "string",
            "x-go-name": "NodeConnectError"
          },
          "nodeId": {
            "type": "string",
            "default": "",
            "x-go-name": "NodeID",
            "x-go-validate": "required"
          }
        }
      },
      "ResetPasswordRequestData": {
        "type": "object",
        "required": [
          "token",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "token": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Token",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "ResetUserPasswordRequestData": {
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          }
        }
      },
      "SMTPConfigData": {
        "type": "object",
        "required": [
          "host",
          "username",
          "password"
        ],
        "properties": {
          "encryption": {
            "description": "tls(default) / starttls",
            "type": "string",
            "default": "tls",
            "x-go-name": "Encryption"
          },
          "host": {
            "type": "string",
            "x-go-name": "Host"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "port": {
            "type": "integer",
            "format": "uint16",
            "default": "25",
            "x-go-name": "Port"
          },
          "username": {
            "description": "From string `json:\"from\"`",
            "type": "string",
            "x-go-name": "Username"
          }
        }
      },
      "SSOProvider": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "ScraperConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "Enabled"
          },
          "interval": {
            "type": "string",
            "default": "15s",
            "x-go-name": "Interval"
          },
          "timeout": {
            "type": "string",
            "default": "15s",
            "x-go-name": "Timeout"
          }
        }
      },
      "SearchUsersResponse": {
        "type": "object",
        "required": [
          "total",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SearchedUserInfo"
            },
            "x-go-name": "Data"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      },
      "SearchedUserInfo": {
        "type": "object",
        "required": [
          "userId",
          "name",
          "email",
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "userId": {
            "type": "string",
            "x-go-name": "UserID"
          }
        }
      },
      "SendResetPasswordEmailRequestData": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "default": "",
            "x-go-name": "Email",
            "x-go-validate": "email"
          }
        }
      },
      "SetKubeConfigResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/IaasConfigData"
          }
        }
      },
      "SetupAccountRequestData": {
        "type": "object",
        "required": [
          "token",
          "name",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          },
          "password": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Password",
            "x-go-validate": "@string[1,]"
          },
          "token": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Token",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "SetupInitSuperAdminRequestData": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "default": "",
            "x-go-name": "Email",
            "x-go-validate": "@email"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          },
          "password": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Password",
            "x-go-validate": "@string[1,]"
          }
        }
      },
      "SingleEkuiperStats": {
        "type": "object",
        "required": [
          "status",
          "uptime",
          "rules",
          "in",
          "out",
          "version",
          "os",
          "arch"
        ],
        "properties": {
          "arch": {
            "type": "string",
            "x-go-name": "Arch"
          },
          "in": {
            "x-go-name": "In",
            "$ref": "#/definitions/EkuiperIOStats"
          },
          "os": {
            "type": "string",
            "x-go-name": "OS"
          },
          "out": {
            "x-go-name": "Out",
            "$ref": "#/definitions/EkuiperIOStats"
          },
          "rules": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Rules"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          },
          "uptime": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Uptime"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "SingleNeuronStats": {
        "type": "object",
        "required": [
          "status",
          "uptime",
          "north",
          "south",
          "version",
          "buildDate",
          "memTotal",
          "memUsed",
          "hardware"
        ],
        "properties": {
          "buildDate": {
            "type": "string",
            "x-go-name": "BuildDate"
          },
          "hardware": {
            "type": "string",
            "x-go-name": "Hardware"
          },
          "memTotal": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "MemTotal"
          },
          "memUsed": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "MemUsed"
          },
          "north": {
            "x-go-name": "North",
            "$ref": "#/definitions/NodeStats"
          },
          "south": {
            "x-go-name": "South",
            "$ref": "#/definitions/NodeStats"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          },
          "uptime": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Uptime"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      },
      "StandardLog": {
        "type": "object",
        "required": [
          "time",
          "level",
          "msg",
          "id",
          "category"
        ],
        "properties": {
          "category": {
            "type": "string",
            "x-go-name": "Category"
          },
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "level": {
            "type": "string",
            "x-go-name": "Level"
          },
          "msg": {
            "type": "string",
            "x-go-name": "Msg"
          },
          "time": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Timestamp"
          }
        }
      },
      "StaticConfig": {
        "type": "object",
        "required": [
          "targets",
          "labels"
        ],
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Labels"
          },
          "targets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Targets"
          }
        }
      },
      "StatusError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "description": "错误代码",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "description": "错误信息",
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      },
      "StatusResp": {
        "type": "object",
        "required": [
          "status",
          "msg"
        ],
        "properties": {
          "msg": {
            "type": "string",
            "x-go-name": "Msg"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          }
        }
      },
      "StorageClass": {
        "type": "object",
        "required": [
          "storage_class_name"
        ],
        "properties": {
          "storage_class_name": {
            "type": "string",
            "x-go-name": "StorageClassName"
          },
          "storage_class_size": {
            "description": "StorageClassPVSize 默认单位 Mi",
            "type": "string",
            "default": "1024Mi",
            "x-go-name": "StorageClassSize"
          },
          "type": {
            "type": "integer",
            "format": "uint8",
            "default": "1",
            "x-go-name": "Type"
          }
        }
      },
      "SupportedLanguageItem": {
        "type": "object",
        "required": [
          "name",
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "x-go-name": "Key"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "SyslogInfo": {
        "type": "object",
        "properties": {
          "addr": {
            "type": "string",
            "default": "",
            "x-go-name": "Addr"
          },
          "enabled": {
            "type": "boolean",
            "default": "false",
            "x-go-name": "Enabled"
          },
          "network": {
            "type": "string",
            "default": "",
            "x-go-name": "Network"
          },
          "priority": {
            "type": "integer",
            "format": "int64",
            "default": "3",
            "x-go-name": "Priority"
          },
          "tag": {
            "type": "string",
            "default": "",
            "x-go-name": "Tag"
          }
        }
      },
      "TagLimitBody": {
        "type": "object",
        "required": [
          "tagLimit"
        ],
        "properties": {
          "tagLimit": {
            "description": "use pointer to avoid value 0 being treated as if the field not present",
            "type": "integer",
            "format": "int64",
            "x-go-name": "TagLimit"
          }
        }
      },
      "TaskInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/BaseModelUUID"
          },
          {
            "description": " task、batch 状态对照表\nconst (\n\tBC_TASK_STATUS_NOCHANGE = 0\n\tBC_TASK_STATUS_PENDING  = iota\n\tBC_TASK_STATUS_RUNNING\n\tBC_TASK_STATUS_FINISHED\n\tBC_TASK_STATUS_ERROR\n\n\t// internal panic for specific error reason\n\tBC_TASK_STATUS_PANIC_FOR_NOT_CREATED = 30\n\tBC_TASK_STATUS_PANIC_FOR_HEALTH      = 31\n\tBC_TASK_STATUS_PANIC_FOR_NOT_HEALTH  = 32\n)",
            "type": "object",
            "required": [
              "deploy_id",
              "type",
              "status",
              "progress",
              "user_id"
            ],
            "properties": {
              "deploy_id": {
                "type": "string",
                "x-go-name": "DeployID"
              },
              "progress": {
                "type": "string",
                "x-go-name": "Progress"
              },
              "status": {
                "type": "integer",
                "format": "uint8",
                "x-go-name": "Status"
              },
              "type": {
                "type": "integer",
                "format": "uint8",
                "x-go-name": "Type"
              },
              "user_id": {
                "type": "string",
                "x-go-name": "UserID"
              }
            }
          }
        ]
      },
      "TelegrafImage": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "x-go-name": "Image"
          }
        }
      },
      "TestAlarmConfigurationNotificationWebhookURLRequestData": {
        "type": "object",
        "required": [
          "url",
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Headers"
          },
          "url": {
            "type": "string",
            "default": "",
            "x-go-name": "URL",
            "x-go-validate": "@httpUrl"
          }
        }
      },
      "TestConnectivityData": {
        "type": "object",
        "required": [
          "url",
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "url": {
            "type": "string",
            "x-go-name": "Url"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      },
      "Time": {
        "description": "A Time represents an instant in time with nanosecond precision.\n\nPrograms using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading.",
        "type": "object"
      },
      "TokenResponse": {
        "type": "object",
        "required": [
          "tokenType",
          "accessToken",
          "expiresIn",
          "refreshToken",
          "refreshExpiresIn",
          "admin"
        ],
        "properties": {
          "accessToken": {
            "type": "string",
            "x-go-name": "AccessToken"
          },
          "admin": {
            "type": "boolean",
            "x-go-name": "IsAdministrator"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ExpiresIn"
          },
          "refreshExpiresIn": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RefreshExpiresIn"
          },
          "refreshToken": {
            "type": "string",
            "x-go-name": "RefreshToken"
          },
          "tokenType": {
            "type": "string",
            "x-go-name": "TokenType"
          }
        }
      },
      "TransferBody": {
        "type": "object",
        "required": [
          "agentIds",
          "targetOrgId",
          "targetProjectId"
        ],
        "properties": {
          "agentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "AgentIDs"
          },
          "targetOrgId": {
            "type": "string",
            "x-go-name": "TargetOrgID"
          },
          "targetProjectId": {
            "type": "string",
            "x-go-name": "TargetProjectID"
          }
        }
      },
      "TransferClusterRequestData": {
        "type": "object",
        "required": [
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "string",
            "default": "",
            "minLength": 8,
            "x-go-name": "ProjectID",
            "x-go-validate": "@string[8,]"
          }
        }
      },
      "TunnelConfig": {
        "type": "object",
        "required": [
          "requestTopic",
          "replyTopic"
        ],
        "properties": {
          "replyTopic": {
            "type": "string",
            "x-go-name": "ReplyTopic"
          },
          "requestTopic": {
            "type": "string",
            "x-go-name": "RequestTopic"
          }
        }
      },
      "UpdateAgentData": {
        "type": "object",
        "required": [
          "name",
          "desc"
        ],
        "properties": {
          "desc": {
            "type": "string",
            "x-go-name": "Desc"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "UpdateAlarmConfigurationNotificationEmailRequestData": {
        "type": "object",
        "required": [
          "enabled",
          "receivers"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "receivers": {
            "type": "array",
            "default": "",
            "items": {
              "type": "string"
            },
            "x-go-name": "Receivers",
            "x-go-validate": "@array[0,10]:@email"
          }
        }
      },
      "UpdateAlarmConfigurationNotificationRequestData": {
        "type": "object",
        "required": [
          "onlyCritical",
          "silenceInterval"
        ],
        "properties": {
          "onlyCritical": {
            "type": "boolean",
            "x-go-name": "OnlyCritical"
          },
          "silenceInterval": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SilenceInterval"
          }
        }
      },
      "UpdateAlarmConfigurationNotificationWebhookRequestData": {
        "type": "object",
        "required": [
          "enabled",
          "url",
          "headers"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Headers"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        }
      },
      "UpdateAlarmEnabledRequestData": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          }
        }
      },
      "UpdateDeployData": {
        "type": "object",
        "properties": {
          "deployName": {
            "type": "string",
            "default": "",
            "x-go-name": "DeployName",
            "x-go-validate": "@regexp[^[一-龥_a-zA-Z0-9 -]{0,200}$]"
          },
          "desc": {
            "type": "string",
            "default": "",
            "maxLength": 500,
            "minLength": 0,
            "x-go-name": "Desc",
            "x-go-validate": "@string[0,500]"
          }
        }
      },
      "UpdateDeployResp": {
        "type": "object"
      },
      "UpdateEdgeResp": {
        "type": "object",
        "required": [
          "data",
          "tip"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/EdgeService"
          },
          "tip": {
            "type": "string",
            "x-go-name": "Tip"
          }
        }
      },
      "UpdateEdgeServiceData": {
        "type": "object",
        "required": [
          "category",
          "name",
          "endpoint"
        ],
        "properties": {
          "agentId": {
            "type": "string",
            "default": "",
            "x-go-name": "AgentID"
          },
          "auth": {
            "description": "认证类型(0:无认证; 1:basic; 2:jwt)",
            "type": "integer",
            "format": "int8",
            "default": "0",
            "x-go-name": "Auth"
          },
          "broker": {
            "type": "string",
            "default": "",
            "x-go-name": "Broker"
          },
          "category": {
            "description": "服务类别(1:ekuiper；2:neuron; 3:nanomq)",
            "type": "integer",
            "format": "int8",
            "x-go-name": "Category"
          },
          "desc": {
            "type": "string",
            "default": "",
            "maxLength": 500,
            "minLength": 0,
            "x-go-name": "Desc",
            "x-go-validate": "@string[0,500]"
          },
          "endpoint": {
            "type": "string",
            "x-go-name": "Endpoint"
          },
          "key": {
            "type": "string",
            "default": "",
            "x-go-name": "Key"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@regexp[^[一-龥a-zA-Z0-9 -]{1,200}$]"
          },
          "nodeType": {
            "description": "节点类型(3:proxy; 4:direct)",
            "type": "integer",
            "format": "int8",
            "default": "4",
            "x-go-name": "NodeType"
          },
          "scheme": {
            "type": "string",
            "default": "http",
            "x-go-name": "Scheme"
          },
          "secret": {
            "type": "string",
            "default": "",
            "x-go-name": "Secret"
          }
        }
      },
      "UpdateGlobalAlarmConfigRequestData": {
        "type": "object",
        "required": [
          "webhook"
        ],
        "properties": {
          "webhook": {
            "x-go-name": "Webhook",
            "$ref": "#/definitions/GlobalAlarmConfigWebhookData"
          }
        }
      },
      "UpdateGlobalConfigUserManagementRequestData": {
        "type": "object",
        "required": [
          "verification",
          "token"
        ],
        "properties": {
          "token": {
            "x-go-name": "Token",
            "$ref": "#/definitions/AuthTokenConfig"
          },
          "verification": {
            "x-go-name": "Verification",
            "$ref": "#/definitions/UserManagementVerificationConfig"
          }
        }
      },
      "UpdateIdentityProviderRequestData": {
        "type": "object",
        "required": [
          "name",
          "type",
          "enabled",
          "idPSsoUrl",
          "idpSloUrl",
          "spEntityId",
          "spAcsUrl",
          "spSloUrl",
          "signAuthn",
          "forceAuthn",
          "validateSignature",
          "validatingCertificate"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "forceAuthn": {
            "type": "boolean",
            "x-go-name": "ForceAuthenticate"
          },
          "idPSsoUrl": {
            "description": "saml config",
            "type": "string",
            "default": "",
            "x-go-name": "IdPSSOURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "idpSloUrl": {
            "type": "string",
            "default": "",
            "x-go-name": "IdPSLOURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "name": {
            "type": "string",
            "default": "",
            "maxLength": 50,
            "minLength": 1,
            "x-go-name": "Name",
            "x-go-validate": "@string[1,50]"
          },
          "signAuthn": {
            "type": "boolean",
            "x-go-name": "SignAuthnRequests"
          },
          "spAcsUrl": {
            "type": "string",
            "default": "",
            "x-go-name": "SPACSURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "spEntityId": {
            "type": "string",
            "x-go-name": "SPEntityID"
          },
          "spSloUrl": {
            "type": "string",
            "default": "",
            "x-go-name": "SPSLOURL",
            "x-go-validate": "@httpUrlOrEmpty"
          },
          "type": {
            "type": "string",
            "default": "",
            "minLength": 1,
            "x-go-name": "Type",
            "x-go-validate": "@string[1,]"
          },
          "validateSignature": {
            "type": "boolean",
            "x-go-name": "ValidateSignature"
          },
          "validatingCertificate": {
            "type": "string",
            "x-go-name": "ValidatingCertificate"
          }
        }
      },
      "UpdateIdentityProviderResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "UpdateNodeBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "cacertPath": {
            "description": "cacertPath, certPath, keyPath",
            "type": "string",
            "default": "",
            "x-go-name": "CacertPath"
          },
          "certPath": {
            "type": "string",
            "default": "",
            "x-go-name": "CertPath"
          },
          "desc": {
            "type": "string",
            "default": "",
            "x-go-name": "Desc"
          },
          "keyPath": {
            "type": "string",
            "default": "",
            "x-go-name": "KeyPath"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "tls": {
            "description": "DockerHost string `json:\"dockerHost\"`",
            "type": "boolean",
            "default": "false",
            "x-go-name": "Tls"
          }
        }
      },
      "UpdateOptions": {
        "type": "object",
        "required": [
          "serviceId",
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "x-go-name": "Image"
          },
          "serviceId": {
            "type": "string",
            "x-go-name": "ServiceId"
          }
        }
      },
      "UpdateOrgRequestData": {
        "type": "object",
        "required": [
          "name",
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          }
        }
      },
      "UpdateOrgResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrgMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "UpdatePasswordRequestData": {
        "type": "object",
        "required": [
          "newPassword",
          "originPassword"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "x-go-name": "NewPassword"
          },
          "originPassword": {
            "type": "string",
            "x-go-name": "OriginPassword"
          }
        }
      },
      "UpdateProfileRequestData": {
        "type": "object",
        "required": [
          "name",
          "mobile"
        ],
        "properties": {
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          },
          "newPassword": {
            "type": "string",
            "default": "",
            "x-go-name": "NewPassword"
          },
          "originPassword": {
            "type": "string",
            "default": "",
            "x-go-name": "OriginPassword"
          }
        }
      },
      "UpdateProfileResponse": {
        "type": "object",
        "required": [
          "email",
          "name",
          "mobile"
        ],
        "properties": {
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "UpdateProjectRequestData": {
        "type": "object",
        "required": [
          "name",
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProjectMember"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "default": "",
            "x-go-name": "Name",
            "x-go-validate": "@char[1,50]"
          }
        }
      },
      "UpdateProjectResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "members",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "UpdateResp": {
        "type": "object",
        "required": [
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "x-go-name": "TaskId"
          }
        }
      },
      "UpdateSystemLanguageRequestData": {
        "type": "object",
        "required": [
          "language"
        ],
        "properties": {
          "language": {
            "type": "string",
            "default": "",
            "x-go-name": "Language",
            "x-go-validate": "required"
          }
        }
      },
      "UpdateTagRequestData": {
        "type": "object",
        "required": [
          "name",
          "serviceIDs"
        ],
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "serviceIDs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "EdgeServiceIDs"
          }
        }
      },
      "UpdateTagResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "tagged",
          "failedServiceNames",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "failedServiceNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "FailedEdgeServiceNames"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "tagged": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TaggedCount"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "UpdateTaskInfo": {
        "type": "object",
        "required": [
          "status",
          "progress"
        ],
        "properties": {
          "progress": {
            "type": "string",
            "x-go-name": "Progress"
          },
          "status": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Status"
          }
        }
      },
      "UpdateUICustomizationConfigResponse": {
        "type": "object",
        "required": [
          "name",
          "logo",
          "loginBg"
        ],
        "properties": {
          "loginBg": {
            "type": "string",
            "x-go-name": "LoginBackgroundImage"
          },
          "logo": {
            "type": "string",
            "x-go-name": "Logo"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "UpdateUserRequestData": {
        "type": "object",
        "required": [
          "email",
          "name",
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "required": [
          "id",
          "email",
          "name",
          "admin",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "Admin"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updatedAt": {
            "x-go-name": "UpdatedAt",
            "$ref": "#/definitions/Time"
          }
        }
      },
      "UploadAvatarResponse": {
        "type": "object",
        "required": [
          "avatar"
        ],
        "properties": {
          "avatar": {
            "type": "string",
            "x-go-name": "Avatar"
          }
        }
      },
      "UploadLicenseResponse": {
        "type": "object",
        "required": [
          "type",
          "customerName",
          "customerContact",
          "startDate",
          "expiredDate",
          "expired",
          "totalClusterConnectionCount",
          "maxSingleClusterConnectionCount",
          "maxEmqxClusterCount",
          "maxEdgeServiceCount",
          "maxTagCount"
        ],
        "properties": {
          "customerContact": {
            "type": "string",
            "x-go-name": "CustomerContact"
          },
          "customerName": {
            "type": "string",
            "x-go-name": "CustomerName"
          },
          "expired": {
            "type": "boolean",
            "x-go-name": "Expired"
          },
          "expiredDate": {
            "type": "string",
            "x-go-name": "ExpiredDate"
          },
          "maxEdgeServiceCount": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MaxEdgeServiceCount"
          },
          "maxEmqxClusterCount": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MaxEMQXClusterCount"
          },
          "maxSingleClusterConnectionCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "MaxSingleClusterConnectionCount"
          },
          "maxTagCount": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MaxTagCount"
          },
          "startDate": {
            "type": "string",
            "x-go-name": "StartDate"
          },
          "totalClusterConnectionCount": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "TotalClusterConnectionCount"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "required": [
          "userId",
          "name",
          "email",
          "mobile",
          "verified",
          "enabled",
          "admin",
          "lastLoginTime",
          "createdAt"
        ],
        "properties": {
          "admin": {
            "type": "boolean",
            "x-go-name": "IsAdministrator"
          },
          "createdAt": {
            "x-go-name": "CreatedAt",
            "$ref": "#/definitions/Time"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "enabled": {
            "type": "boolean",
            "x-go-name": "Enabled"
          },
          "lastLoginTime": {
            "x-go-name": "LastLoginAt",
            "$ref": "#/definitions/Time"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "userId": {
            "type": "string",
            "x-go-name": "UserID"
          },
          "verified": {
            "type": "boolean",
            "x-go-name": "Verified"
          }
        }
      },
      "UserManagementEmailVerificationConfig": {
        "type": "object",
        "required": [
          "invitationEmailDuration",
          "passwordResetEmailDuration"
        ],
        "properties": {
          "invitationEmailDuration": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "InvitationEmailDuration"
          },
          "passwordResetEmailDuration": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PasswordResetEmailDuration"
          }
        }
      },
      "UserManagementVerificationConfig": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "x-go-name": "Email",
            "$ref": "#/definitions/UserManagementEmailVerificationConfig"
          },
          "mode": {
            "type": "integer",
            "format": "int8",
            "default": "0",
            "x-go-name": "Mode",
            "x-go-validate": "@int8{0,1}"
          }
        }
      },
      "UserOrgRole": {
        "type": "object",
        "required": [
          "id",
          "roles",
          "projects"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserProjectRole"
            },
            "x-go-name": "Projects"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Roles"
          }
        }
      },
      "UserProjectRole": {
        "type": "object",
        "required": [
          "id",
          "roles"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Roles"
          }
        }
      },
      "ValidateBody": {
        "type": "object",
        "required": [
          "title",
          "serviceNames"
        ],
        "properties": {
          "serviceNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ServiceNames"
          },
          "title": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Title"
          }
        }
      },
      "ValidateInfo": {
        "type": "object",
        "required": [
          "success",
          "messages"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Messages"
          },
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        }
      },
      "ValidateResp": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "x-go-name": "Data",
            "$ref": "#/definitions/ValidateInfo"
          }
        }
      },
      "ViewBody": {
        "type": "object",
        "required": [
          "title",
          "defaultValue",
          "value"
        ],
        "properties": {
          "defaultValue": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Default"
          },
          "title": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Title"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Value"
          }
        }
      },
      "failVal": {
        "type": "object",
        "required": [
          "line",
          "reason"
        ],
        "properties": {
          "line": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Line"
          },
          "reason": {
            "type": "string",
            "x-go-name": "Reason"
          }
        }
      }
    }
  }